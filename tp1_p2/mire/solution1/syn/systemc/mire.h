// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mire_HH_
#define _mire_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mire : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<2> > mode_V;
    sc_out< sc_lv<8> > m_axis_video_TDATA;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_out< sc_lv<1> > m_axis_video_TKEEP;
    sc_out< sc_lv<1> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;
    sc_in< sc_lv<32> > hsize_in;
    sc_in< sc_lv<32> > vsize_in;
    sc_signal< sc_lv<1> > ap_var_for_const0;


    // Module declarations
    mire(sc_module_name name);
    SC_HAS_PROCESS(mire);

    ~mire();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_both<8>* regslice_both_m_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_dest_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > m_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln12_reg_399;
    sc_signal< sc_lv<1> > icmp_ln12_reg_399_pp0_iter1_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln12_reg_399_pp0_iter2_reg;
    sc_signal< sc_lv<64> > indvar_flatten_reg_123;
    sc_signal< sc_lv<31> > val_assign_1_reg_134;
    sc_signal< sc_lv<31> > val_assign_reg_145;
    sc_signal< sc_lv<32> > add_ln23_fu_170_p2;
    sc_signal< sc_lv<32> > add_ln23_reg_376;
    sc_signal< sc_lv<1> > icmp_ln879_fu_176_p2;
    sc_signal< sc_lv<1> > icmp_ln879_reg_381;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_182_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_reg_385;
    sc_signal< sc_lv<1> > icmp_ln879_2_fu_188_p2;
    sc_signal< sc_lv<1> > icmp_ln879_2_reg_389;
    sc_signal< sc_lv<64> > bound_fu_202_p2;
    sc_signal< sc_lv<64> > bound_reg_394;
    sc_signal< sc_lv<1> > icmp_ln12_fu_217_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > add_ln12_fu_222_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<31> > select_ln12_fu_228_p3;
    sc_signal< sc_lv<31> > select_ln12_reg_408;
    sc_signal< sc_lv<31> > select_ln12_1_fu_242_p3;
    sc_signal< sc_lv<31> > select_ln12_1_reg_416;
    sc_signal< sc_lv<1> > tmp_last_V_fu_254_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_424;
    sc_signal< sc_lv<1> > tmp_last_V_reg_424_pp0_iter1_reg;
    sc_signal< sc_lv<31> > j_fu_259_p2;
    sc_signal< sc_lv<1> > tmp_reg_434;
    sc_signal< sc_lv<1> > tmp_user_V_fu_286_p2;
    sc_signal< sc_lv<1> > tmp_user_V_reg_440;
    sc_signal< sc_lv<8> > video_data_V_fu_298_p3;
    sc_signal< sc_lv<63> > mul_ln35_fu_308_p2;
    sc_signal< sc_lv<63> > mul_ln35_reg_450;
    sc_signal< sc_lv<63> > mul_ln29_fu_317_p2;
    sc_signal< sc_lv<63> > mul_ln29_reg_455;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<31> > ap_phi_mux_val_assign_1_phi_fu_138_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_tmp_data_V_phi_fu_160_p6;
    sc_signal< sc_lv<8> > select_ln29_fu_362_p3;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter2_tmp_data_V_reg_156;
    sc_signal< sc_lv<8> > select_ln35_fu_335_p3;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_data_V_reg_156;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_data_V_reg_156;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bound_fu_202_p0;
    sc_signal< sc_lv<32> > bound_fu_202_p1;
    sc_signal< sc_lv<32> > zext_ln301_fu_208_p1;
    sc_signal< sc_lv<1> > icmp_ln15_fu_212_p2;
    sc_signal< sc_lv<31> > add_ln12_1_fu_236_p2;
    sc_signal< sc_lv<32> > zext_ln12_1_fu_250_p1;
    sc_signal< sc_lv<31> > mul_ln12_fu_268_p0;
    sc_signal< sc_lv<63> > mul_ln12_fu_268_p2;
    sc_signal< sc_lv<31> > or_ln18_fu_282_p2;
    sc_signal< sc_lv<8> > trunc_ln40_fu_292_p1;
    sc_signal< sc_lv<8> > trunc_ln40_1_fu_295_p1;
    sc_signal< sc_lv<31> > mul_ln35_fu_308_p1;
    sc_signal< sc_lv<31> > mul_ln29_fu_317_p1;
    sc_signal< sc_lv<1> > tmp_2_fu_323_p3;
    sc_signal< sc_lv<1> > or_ln35_fu_330_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_344_p3;
    sc_signal< sc_lv<1> > or_ln29_fu_351_p2;
    sc_signal< sc_lv<1> > xor_ln29_fu_356_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > m_axis_video_TVALID_int;
    sc_signal< sc_logic > m_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_lv<64> > bound_fu_202_p00;
    sc_signal< sc_lv<64> > bound_fu_202_p10;
    sc_signal< sc_lv<63> > mul_ln12_fu_268_p00;
    sc_signal< sc_lv<63> > mul_ln29_fu_317_p10;
    sc_signal< sc_lv<63> > mul_ln35_fu_308_p10;
    sc_signal< bool > ap_condition_137;
    sc_signal< bool > ap_condition_167;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<63> ap_const_lv63_CCCCCCCD;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln12_1_fu_236_p2();
    void thread_add_ln12_fu_222_p2();
    void thread_add_ln23_fu_170_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_137();
    void thread_ap_condition_167();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_tmp_data_V_phi_fu_160_p6();
    void thread_ap_phi_mux_val_assign_1_phi_fu_138_p4();
    void thread_ap_phi_reg_pp0_iter0_tmp_data_V_reg_156();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_bound_fu_202_p0();
    void thread_bound_fu_202_p00();
    void thread_bound_fu_202_p1();
    void thread_bound_fu_202_p10();
    void thread_bound_fu_202_p2();
    void thread_icmp_ln12_fu_217_p2();
    void thread_icmp_ln15_fu_212_p2();
    void thread_icmp_ln879_1_fu_182_p2();
    void thread_icmp_ln879_2_fu_188_p2();
    void thread_icmp_ln879_fu_176_p2();
    void thread_j_fu_259_p2();
    void thread_m_axis_video_TDATA_blk_n();
    void thread_m_axis_video_TVALID();
    void thread_m_axis_video_TVALID_int();
    void thread_mul_ln12_fu_268_p0();
    void thread_mul_ln12_fu_268_p00();
    void thread_mul_ln12_fu_268_p2();
    void thread_mul_ln29_fu_317_p1();
    void thread_mul_ln29_fu_317_p10();
    void thread_mul_ln29_fu_317_p2();
    void thread_mul_ln35_fu_308_p1();
    void thread_mul_ln35_fu_308_p10();
    void thread_mul_ln35_fu_308_p2();
    void thread_or_ln18_fu_282_p2();
    void thread_or_ln29_fu_351_p2();
    void thread_or_ln35_fu_330_p2();
    void thread_select_ln12_1_fu_242_p3();
    void thread_select_ln12_fu_228_p3();
    void thread_select_ln29_fu_362_p3();
    void thread_select_ln35_fu_335_p3();
    void thread_tmp_1_fu_344_p3();
    void thread_tmp_2_fu_323_p3();
    void thread_tmp_last_V_fu_254_p2();
    void thread_tmp_user_V_fu_286_p2();
    void thread_trunc_ln40_1_fu_295_p1();
    void thread_trunc_ln40_fu_292_p1();
    void thread_video_data_V_fu_298_p3();
    void thread_xor_ln29_fu_356_p2();
    void thread_zext_ln12_1_fu_250_p1();
    void thread_zext_ln301_fu_208_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
