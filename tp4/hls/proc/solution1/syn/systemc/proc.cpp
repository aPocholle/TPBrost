// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<43> proc::ap_ST_fsm_state1 = "1";
const sc_lv<43> proc::ap_ST_fsm_state2 = "10";
const sc_lv<43> proc::ap_ST_fsm_state3 = "100";
const sc_lv<43> proc::ap_ST_fsm_state4 = "1000";
const sc_lv<43> proc::ap_ST_fsm_state5 = "10000";
const sc_lv<43> proc::ap_ST_fsm_state6 = "100000";
const sc_lv<43> proc::ap_ST_fsm_state7 = "1000000";
const sc_lv<43> proc::ap_ST_fsm_state8 = "10000000";
const sc_lv<43> proc::ap_ST_fsm_state9 = "100000000";
const sc_lv<43> proc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<43> proc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<43> proc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<43> proc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<43> proc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<43> proc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<43> proc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<43> proc::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<32> proc::ap_const_lv32_1 = "1";
const sc_lv<32> proc::ap_const_lv32_8 = "1000";
const sc_lv<32> proc::ap_const_lv32_2 = "10";
const sc_lv<32> proc::ap_const_lv32_9 = "1001";
const sc_lv<32> proc::ap_const_lv32_F = "1111";
const sc_lv<1> proc::ap_const_lv1_1 = "1";
const sc_lv<32> proc::ap_const_lv32_16 = "10110";
const sc_lv<1> proc::ap_const_lv1_0 = "0";
const sc_lv<32> proc::ap_const_lv32_1D = "11101";
const sc_lv<32> proc::ap_const_lv32_23 = "100011";
const sc_lv<32> proc::ap_const_lv32_2A = "101010";
const sc_lv<32> proc::ap_const_lv32_E = "1110";
const sc_lv<32> proc::ap_const_lv32_1C = "11100";
const sc_lv<32> proc::ap_const_lv32_22 = "100010";
const int proc::C_M_AXI_PORT_R_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int proc::C_M_AXI_PORT_R_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int proc::C_M_AXI_PORT_R_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int proc::C_M_AXI_PORT_R_CACHE_VALUE = "11";
const int proc::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> proc::ap_const_lv32_D = "1101";
const sc_lv<64> proc::ap_const_lv64_10000008 = "10000000000000000000000001000";
const sc_lv<64> proc::ap_const_lv64_10004000 = "10000000000000100000000000000";
const sc_lv<64> proc::ap_const_lv64_10000000 = "10000000000000000000000000000";
const sc_lv<3> proc::ap_const_lv3_0 = "000";
const sc_lv<2> proc::ap_const_lv2_0 = "00";
const sc_lv<4> proc::ap_const_lv4_0 = "0000";
const bool proc::ap_const_boolean_0 = false;
const sc_lv<32> proc::ap_const_lv32_FF = "11111111";
const sc_lv<4> proc::ap_const_lv4_F = "1111";
const sc_lv<32> proc::ap_const_lv32_A = "1010";
const sc_lv<32> proc::ap_const_lv32_1E = "11110";
const sc_lv<32> proc::ap_const_lv32_186A0 = "11000011010100000";
const bool proc::ap_const_boolean_1 = true;

proc::proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    proc_port_r_m_axi_U = new proc_port_r_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_PORT_R_ID_WIDTH,C_M_AXI_PORT_R_ADDR_WIDTH,C_M_AXI_PORT_R_DATA_WIDTH,C_M_AXI_PORT_R_AWUSER_WIDTH,C_M_AXI_PORT_R_ARUSER_WIDTH,C_M_AXI_PORT_R_WUSER_WIDTH,C_M_AXI_PORT_R_RUSER_WIDTH,C_M_AXI_PORT_R_BUSER_WIDTH,C_M_AXI_PORT_R_TARGET_ADDR,C_M_AXI_PORT_R_USER_VALUE,C_M_AXI_PORT_R_PROT_VALUE,C_M_AXI_PORT_R_CACHE_VALUE>("proc_port_r_m_axi_U");
    proc_port_r_m_axi_U->AWVALID(m_axi_port_r_AWVALID);
    proc_port_r_m_axi_U->AWREADY(m_axi_port_r_AWREADY);
    proc_port_r_m_axi_U->AWADDR(m_axi_port_r_AWADDR);
    proc_port_r_m_axi_U->AWID(m_axi_port_r_AWID);
    proc_port_r_m_axi_U->AWLEN(m_axi_port_r_AWLEN);
    proc_port_r_m_axi_U->AWSIZE(m_axi_port_r_AWSIZE);
    proc_port_r_m_axi_U->AWBURST(m_axi_port_r_AWBURST);
    proc_port_r_m_axi_U->AWLOCK(m_axi_port_r_AWLOCK);
    proc_port_r_m_axi_U->AWCACHE(m_axi_port_r_AWCACHE);
    proc_port_r_m_axi_U->AWPROT(m_axi_port_r_AWPROT);
    proc_port_r_m_axi_U->AWQOS(m_axi_port_r_AWQOS);
    proc_port_r_m_axi_U->AWREGION(m_axi_port_r_AWREGION);
    proc_port_r_m_axi_U->AWUSER(m_axi_port_r_AWUSER);
    proc_port_r_m_axi_U->WVALID(m_axi_port_r_WVALID);
    proc_port_r_m_axi_U->WREADY(m_axi_port_r_WREADY);
    proc_port_r_m_axi_U->WDATA(m_axi_port_r_WDATA);
    proc_port_r_m_axi_U->WSTRB(m_axi_port_r_WSTRB);
    proc_port_r_m_axi_U->WLAST(m_axi_port_r_WLAST);
    proc_port_r_m_axi_U->WID(m_axi_port_r_WID);
    proc_port_r_m_axi_U->WUSER(m_axi_port_r_WUSER);
    proc_port_r_m_axi_U->ARVALID(m_axi_port_r_ARVALID);
    proc_port_r_m_axi_U->ARREADY(m_axi_port_r_ARREADY);
    proc_port_r_m_axi_U->ARADDR(m_axi_port_r_ARADDR);
    proc_port_r_m_axi_U->ARID(m_axi_port_r_ARID);
    proc_port_r_m_axi_U->ARLEN(m_axi_port_r_ARLEN);
    proc_port_r_m_axi_U->ARSIZE(m_axi_port_r_ARSIZE);
    proc_port_r_m_axi_U->ARBURST(m_axi_port_r_ARBURST);
    proc_port_r_m_axi_U->ARLOCK(m_axi_port_r_ARLOCK);
    proc_port_r_m_axi_U->ARCACHE(m_axi_port_r_ARCACHE);
    proc_port_r_m_axi_U->ARPROT(m_axi_port_r_ARPROT);
    proc_port_r_m_axi_U->ARQOS(m_axi_port_r_ARQOS);
    proc_port_r_m_axi_U->ARREGION(m_axi_port_r_ARREGION);
    proc_port_r_m_axi_U->ARUSER(m_axi_port_r_ARUSER);
    proc_port_r_m_axi_U->RVALID(m_axi_port_r_RVALID);
    proc_port_r_m_axi_U->RREADY(m_axi_port_r_RREADY);
    proc_port_r_m_axi_U->RDATA(m_axi_port_r_RDATA);
    proc_port_r_m_axi_U->RLAST(m_axi_port_r_RLAST);
    proc_port_r_m_axi_U->RID(m_axi_port_r_RID);
    proc_port_r_m_axi_U->RUSER(m_axi_port_r_RUSER);
    proc_port_r_m_axi_U->RRESP(m_axi_port_r_RRESP);
    proc_port_r_m_axi_U->BVALID(m_axi_port_r_BVALID);
    proc_port_r_m_axi_U->BREADY(m_axi_port_r_BREADY);
    proc_port_r_m_axi_U->BRESP(m_axi_port_r_BRESP);
    proc_port_r_m_axi_U->BID(m_axi_port_r_BID);
    proc_port_r_m_axi_U->BUSER(m_axi_port_r_BUSER);
    proc_port_r_m_axi_U->ACLK(ap_clk);
    proc_port_r_m_axi_U->ARESET(ap_rst_n_inv);
    proc_port_r_m_axi_U->ACLK_EN(ap_var_for_const0);
    proc_port_r_m_axi_U->I_ARVALID(port_r_ARVALID);
    proc_port_r_m_axi_U->I_ARREADY(port_r_ARREADY);
    proc_port_r_m_axi_U->I_ARADDR(port_r_ARADDR);
    proc_port_r_m_axi_U->I_ARID(ap_var_for_const1);
    proc_port_r_m_axi_U->I_ARLEN(ap_var_for_const2);
    proc_port_r_m_axi_U->I_ARSIZE(ap_var_for_const3);
    proc_port_r_m_axi_U->I_ARLOCK(ap_var_for_const4);
    proc_port_r_m_axi_U->I_ARCACHE(ap_var_for_const5);
    proc_port_r_m_axi_U->I_ARQOS(ap_var_for_const5);
    proc_port_r_m_axi_U->I_ARPROT(ap_var_for_const3);
    proc_port_r_m_axi_U->I_ARUSER(ap_var_for_const1);
    proc_port_r_m_axi_U->I_ARBURST(ap_var_for_const4);
    proc_port_r_m_axi_U->I_ARREGION(ap_var_for_const5);
    proc_port_r_m_axi_U->I_RVALID(port_r_RVALID);
    proc_port_r_m_axi_U->I_RREADY(port_r_RREADY);
    proc_port_r_m_axi_U->I_RDATA(port_r_RDATA);
    proc_port_r_m_axi_U->I_RID(port_r_RID);
    proc_port_r_m_axi_U->I_RUSER(port_r_RUSER);
    proc_port_r_m_axi_U->I_RRESP(port_r_RRESP);
    proc_port_r_m_axi_U->I_RLAST(port_r_RLAST);
    proc_port_r_m_axi_U->I_AWVALID(port_r_AWVALID);
    proc_port_r_m_axi_U->I_AWREADY(port_r_AWREADY);
    proc_port_r_m_axi_U->I_AWADDR(port_r_AWADDR);
    proc_port_r_m_axi_U->I_AWID(ap_var_for_const1);
    proc_port_r_m_axi_U->I_AWLEN(ap_var_for_const2);
    proc_port_r_m_axi_U->I_AWSIZE(ap_var_for_const3);
    proc_port_r_m_axi_U->I_AWLOCK(ap_var_for_const4);
    proc_port_r_m_axi_U->I_AWCACHE(ap_var_for_const5);
    proc_port_r_m_axi_U->I_AWQOS(ap_var_for_const5);
    proc_port_r_m_axi_U->I_AWPROT(ap_var_for_const3);
    proc_port_r_m_axi_U->I_AWUSER(ap_var_for_const1);
    proc_port_r_m_axi_U->I_AWBURST(ap_var_for_const4);
    proc_port_r_m_axi_U->I_AWREGION(ap_var_for_const5);
    proc_port_r_m_axi_U->I_WVALID(port_r_WVALID);
    proc_port_r_m_axi_U->I_WREADY(port_r_WREADY);
    proc_port_r_m_axi_U->I_WDATA(port_r_WDATA);
    proc_port_r_m_axi_U->I_WID(ap_var_for_const1);
    proc_port_r_m_axi_U->I_WUSER(ap_var_for_const1);
    proc_port_r_m_axi_U->I_WLAST(ap_var_for_const6);
    proc_port_r_m_axi_U->I_WSTRB(ap_var_for_const7);
    proc_port_r_m_axi_U->I_BVALID(port_r_BVALID);
    proc_port_r_m_axi_U->I_BREADY(port_r_BREADY);
    proc_port_r_m_axi_U->I_BRESP(port_r_BRESP);
    proc_port_r_m_axi_U->I_BID(port_r_BID);
    proc_port_r_m_axi_U->I_BUSER(port_r_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln23_fu_159_p2);
    sensitive << ( mul_ln23_reg_216 );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( icmp_ln23_fu_170_p2 );
    sensitive << ( port_r_ARREADY );

    SC_METHOD(thread_ap_block_state36_io);
    sensitive << ( icmp_ln33_fu_181_p2 );
    sensitive << ( port_r_ARREADY );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln23_fu_170_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( add_ln23_reg_221 );
    sensitive << ( ap_block_state16_io );
    sensitive << ( sub_ln23_fu_164_p2 );

    SC_METHOD(thread_icmp_ln33_fu_181_p2);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( add_ln23_reg_221 );
    sensitive << ( ap_block_state36_io );
    sensitive << ( sub_ln33_fu_175_p2 );

    SC_METHOD(thread_mul_ln23_fu_154_p2);
    sensitive << ( sw_reg_211 );

    SC_METHOD(thread_port_r_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln23_fu_170_p2 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( icmp_ln33_fu_181_p2 );
    sensitive << ( port_r_ARREADY );
    sensitive << ( ap_block_state16_io );
    sensitive << ( ap_block_state36_io );

    SC_METHOD(thread_port_r_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln23_fu_170_p2 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( icmp_ln33_fu_181_p2 );
    sensitive << ( port_r_ARREADY );
    sensitive << ( ap_block_state16_io );
    sensitive << ( ap_block_state36_io );

    SC_METHOD(thread_port_r_AWADDR);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( port_r_AWREADY );
    sensitive << ( port_r_RVALID );

    SC_METHOD(thread_port_r_AWVALID);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( port_r_AWREADY );
    sensitive << ( port_r_RVALID );

    SC_METHOD(thread_port_r_BREADY);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( port_r_BVALID );

    SC_METHOD(thread_port_r_RREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( port_r_AWREADY );
    sensitive << ( port_r_WREADY );
    sensitive << ( port_r_RVALID );

    SC_METHOD(thread_port_r_WDATA);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( port_r_RVALID );

    SC_METHOD(thread_port_r_WVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( port_r_WREADY );
    sensitive << ( port_r_RVALID );

    SC_METHOD(thread_port_r_blk_n_AR);
    sensitive << ( m_axi_port_r_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln23_fu_170_p2 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( icmp_ln33_fu_181_p2 );

    SC_METHOD(thread_port_r_blk_n_AW);
    sensitive << ( m_axi_port_r_AWREADY );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_port_r_blk_n_B);
    sensitive << ( m_axi_port_r_BVALID );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_port_r_blk_n_R);
    sensitive << ( m_axi_port_r_RVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_port_r_blk_n_W);
    sensitive << ( m_axi_port_r_WREADY );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_sub_ln23_fu_164_p2);
    sensitive << ( cpt_0_reg_104 );
    sensitive << ( tempo_fu_50 );

    SC_METHOD(thread_sub_ln33_fu_175_p2);
    sensitive << ( cpt_1_reg_113 );
    sensitive << ( tempo_fu_50 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln23_fu_170_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( icmp_ln33_fu_181_p2 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( port_r_AWREADY );
    sensitive << ( port_r_WREADY );
    sensitive << ( port_r_ARREADY );
    sensitive << ( port_r_RVALID );
    sensitive << ( port_r_BVALID );
    sensitive << ( ap_block_state16_io );
    sensitive << ( ap_block_state36_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "0000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_port_r_AWVALID, "(port)m_axi_port_r_AWVALID");
    sc_trace(mVcdFile, m_axi_port_r_AWREADY, "(port)m_axi_port_r_AWREADY");
    sc_trace(mVcdFile, m_axi_port_r_AWADDR, "(port)m_axi_port_r_AWADDR");
    sc_trace(mVcdFile, m_axi_port_r_AWID, "(port)m_axi_port_r_AWID");
    sc_trace(mVcdFile, m_axi_port_r_AWLEN, "(port)m_axi_port_r_AWLEN");
    sc_trace(mVcdFile, m_axi_port_r_AWSIZE, "(port)m_axi_port_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_port_r_AWBURST, "(port)m_axi_port_r_AWBURST");
    sc_trace(mVcdFile, m_axi_port_r_AWLOCK, "(port)m_axi_port_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_port_r_AWCACHE, "(port)m_axi_port_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_port_r_AWPROT, "(port)m_axi_port_r_AWPROT");
    sc_trace(mVcdFile, m_axi_port_r_AWQOS, "(port)m_axi_port_r_AWQOS");
    sc_trace(mVcdFile, m_axi_port_r_AWREGION, "(port)m_axi_port_r_AWREGION");
    sc_trace(mVcdFile, m_axi_port_r_AWUSER, "(port)m_axi_port_r_AWUSER");
    sc_trace(mVcdFile, m_axi_port_r_WVALID, "(port)m_axi_port_r_WVALID");
    sc_trace(mVcdFile, m_axi_port_r_WREADY, "(port)m_axi_port_r_WREADY");
    sc_trace(mVcdFile, m_axi_port_r_WDATA, "(port)m_axi_port_r_WDATA");
    sc_trace(mVcdFile, m_axi_port_r_WSTRB, "(port)m_axi_port_r_WSTRB");
    sc_trace(mVcdFile, m_axi_port_r_WLAST, "(port)m_axi_port_r_WLAST");
    sc_trace(mVcdFile, m_axi_port_r_WID, "(port)m_axi_port_r_WID");
    sc_trace(mVcdFile, m_axi_port_r_WUSER, "(port)m_axi_port_r_WUSER");
    sc_trace(mVcdFile, m_axi_port_r_ARVALID, "(port)m_axi_port_r_ARVALID");
    sc_trace(mVcdFile, m_axi_port_r_ARREADY, "(port)m_axi_port_r_ARREADY");
    sc_trace(mVcdFile, m_axi_port_r_ARADDR, "(port)m_axi_port_r_ARADDR");
    sc_trace(mVcdFile, m_axi_port_r_ARID, "(port)m_axi_port_r_ARID");
    sc_trace(mVcdFile, m_axi_port_r_ARLEN, "(port)m_axi_port_r_ARLEN");
    sc_trace(mVcdFile, m_axi_port_r_ARSIZE, "(port)m_axi_port_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_port_r_ARBURST, "(port)m_axi_port_r_ARBURST");
    sc_trace(mVcdFile, m_axi_port_r_ARLOCK, "(port)m_axi_port_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_port_r_ARCACHE, "(port)m_axi_port_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_port_r_ARPROT, "(port)m_axi_port_r_ARPROT");
    sc_trace(mVcdFile, m_axi_port_r_ARQOS, "(port)m_axi_port_r_ARQOS");
    sc_trace(mVcdFile, m_axi_port_r_ARREGION, "(port)m_axi_port_r_ARREGION");
    sc_trace(mVcdFile, m_axi_port_r_ARUSER, "(port)m_axi_port_r_ARUSER");
    sc_trace(mVcdFile, m_axi_port_r_RVALID, "(port)m_axi_port_r_RVALID");
    sc_trace(mVcdFile, m_axi_port_r_RREADY, "(port)m_axi_port_r_RREADY");
    sc_trace(mVcdFile, m_axi_port_r_RDATA, "(port)m_axi_port_r_RDATA");
    sc_trace(mVcdFile, m_axi_port_r_RLAST, "(port)m_axi_port_r_RLAST");
    sc_trace(mVcdFile, m_axi_port_r_RID, "(port)m_axi_port_r_RID");
    sc_trace(mVcdFile, m_axi_port_r_RUSER, "(port)m_axi_port_r_RUSER");
    sc_trace(mVcdFile, m_axi_port_r_RRESP, "(port)m_axi_port_r_RRESP");
    sc_trace(mVcdFile, m_axi_port_r_BVALID, "(port)m_axi_port_r_BVALID");
    sc_trace(mVcdFile, m_axi_port_r_BREADY, "(port)m_axi_port_r_BREADY");
    sc_trace(mVcdFile, m_axi_port_r_BRESP, "(port)m_axi_port_r_BRESP");
    sc_trace(mVcdFile, m_axi_port_r_BID, "(port)m_axi_port_r_BID");
    sc_trace(mVcdFile, m_axi_port_r_BUSER, "(port)m_axi_port_r_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, port_r_blk_n_AR, "port_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, port_r_blk_n_R, "port_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, icmp_ln23_fu_170_p2, "icmp_ln23_fu_170_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, icmp_ln33_fu_181_p2, "icmp_ln33_fu_181_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, port_r_blk_n_AW, "port_r_blk_n_AW");
    sc_trace(mVcdFile, port_r_blk_n_W, "port_r_blk_n_W");
    sc_trace(mVcdFile, port_r_blk_n_B, "port_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, port_r_AWVALID, "port_r_AWVALID");
    sc_trace(mVcdFile, port_r_AWREADY, "port_r_AWREADY");
    sc_trace(mVcdFile, port_r_AWADDR, "port_r_AWADDR");
    sc_trace(mVcdFile, port_r_WVALID, "port_r_WVALID");
    sc_trace(mVcdFile, port_r_WREADY, "port_r_WREADY");
    sc_trace(mVcdFile, port_r_WDATA, "port_r_WDATA");
    sc_trace(mVcdFile, port_r_ARVALID, "port_r_ARVALID");
    sc_trace(mVcdFile, port_r_ARREADY, "port_r_ARREADY");
    sc_trace(mVcdFile, port_r_ARADDR, "port_r_ARADDR");
    sc_trace(mVcdFile, port_r_RVALID, "port_r_RVALID");
    sc_trace(mVcdFile, port_r_RREADY, "port_r_RREADY");
    sc_trace(mVcdFile, port_r_RDATA, "port_r_RDATA");
    sc_trace(mVcdFile, port_r_RLAST, "port_r_RLAST");
    sc_trace(mVcdFile, port_r_RID, "port_r_RID");
    sc_trace(mVcdFile, port_r_RUSER, "port_r_RUSER");
    sc_trace(mVcdFile, port_r_RRESP, "port_r_RRESP");
    sc_trace(mVcdFile, port_r_BVALID, "port_r_BVALID");
    sc_trace(mVcdFile, port_r_BREADY, "port_r_BREADY");
    sc_trace(mVcdFile, port_r_BRESP, "port_r_BRESP");
    sc_trace(mVcdFile, port_r_BID, "port_r_BID");
    sc_trace(mVcdFile, port_r_BUSER, "port_r_BUSER");
    sc_trace(mVcdFile, reg_125, "reg_125");
    sc_trace(mVcdFile, sw_reg_211, "sw_reg_211");
    sc_trace(mVcdFile, mul_ln23_fu_154_p2, "mul_ln23_fu_154_p2");
    sc_trace(mVcdFile, mul_ln23_reg_216, "mul_ln23_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, add_ln23_fu_159_p2, "add_ln23_fu_159_p2");
    sc_trace(mVcdFile, add_ln23_reg_221, "add_ln23_reg_221");
    sc_trace(mVcdFile, cpt_0_reg_104, "cpt_0_reg_104");
    sc_trace(mVcdFile, cpt_1_reg_113, "cpt_1_reg_113");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_state36_io, "ap_block_state36_io");
    sc_trace(mVcdFile, tempo_fu_50, "tempo_fu_50");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, sub_ln23_fu_164_p2, "sub_ln23_fu_164_p2");
    sc_trace(mVcdFile, sub_ln33_fu_175_p2, "sub_ln33_fu_175_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("proc.hdltvin.dat");
    mHdltvoutHandle.open("proc.hdltvout.dat");
}

proc::~proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete proc_port_r_m_axi_U;
}

void proc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void proc::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void proc::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void proc::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void proc::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void proc::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void proc::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void proc::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void proc::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1))) {
        cpt_0_reg_104 = port_r_RDATA.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1))) {
        cpt_0_reg_104 = reg_125.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1))) {
        cpt_1_reg_113 = port_r_RDATA.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1))) {
        cpt_1_reg_113 = reg_125.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1))) {
        add_ln23_reg_221 = add_ln23_fu_159_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        mul_ln23_reg_216 = mul_ln23_fu_154_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))))) {
        reg_125 = port_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_AWREADY.read())))) {
        sw_reg_211 = port_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        tempo_fu_50 = reg_125.read();
    }
}

void proc::thread_add_ln23_fu_159_p2() {
    add_ln23_fu_159_p2 = (!mul_ln23_reg_216.read().is_01() || !ap_const_lv32_186A0.is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln23_reg_216.read()) + sc_biguint<32>(ap_const_lv32_186A0));
}

void proc::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void proc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void proc::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void proc::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void proc::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void proc::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void proc::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void proc::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void proc::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void proc::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void proc::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void proc::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void proc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void proc::thread_ap_block_state16_io() {
    ap_block_state16_io = ((esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, port_r_ARREADY.read())) || (esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, port_r_ARREADY.read())));
}

void proc::thread_ap_block_state36_io() {
    ap_block_state36_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_181_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, port_r_ARREADY.read()));
}

void proc::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void proc::thread_icmp_ln23_fu_170_p2() {
    icmp_ln23_fu_170_p2 = (!sub_ln23_fu_164_p2.read().is_01() || !add_ln23_reg_221.read().is_01())? sc_lv<1>(): (sc_biguint<32>(sub_ln23_fu_164_p2.read()) < sc_biguint<32>(add_ln23_reg_221.read()));
}

void proc::thread_icmp_ln33_fu_181_p2() {
    icmp_ln33_fu_181_p2 = (!sub_ln33_fu_175_p2.read().is_01() || !add_ln23_reg_221.read().is_01())? sc_lv<1>(): (sc_biguint<32>(sub_ln33_fu_175_p2.read()) < sc_biguint<32>(add_ln23_reg_221.read()));
}

void proc::thread_mul_ln23_fu_154_p2() {
    mul_ln23_fu_154_p2 = (!sw_reg_211.read().is_01() || !ap_const_lv32_186A0.is_01())? sc_lv<32>(): sc_bigint<32>(sw_reg_211.read()) * sc_biguint<32>(ap_const_lv32_186A0);
}

void proc::thread_port_r_ARADDR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_181_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state36_io.read(), ap_const_boolean_0)))) {
        port_r_ARADDR =  (sc_lv<32>) (ap_const_lv64_10004000);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1))) {
        port_r_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000008);
    } else {
        port_r_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void proc::thread_port_r_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_181_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state36_io.read(), ap_const_boolean_0)))) {
        port_r_ARVALID = ap_const_logic_1;
    } else {
        port_r_ARVALID = ap_const_logic_0;
    }
}

void proc::thread_port_r_AWADDR() {
    port_r_AWADDR =  (sc_lv<32>) (ap_const_lv64_10000000);
}

void proc::thread_port_r_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(port_r_AWREADY.read(), ap_const_logic_1)))) {
        port_r_AWVALID = ap_const_logic_1;
    } else {
        port_r_AWVALID = ap_const_logic_0;
    }
}

void proc::thread_port_r_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
          esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1)))) {
        port_r_BREADY = ap_const_logic_1;
    } else {
        port_r_BREADY = ap_const_logic_0;
    }
}

void proc::thread_port_r_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1)))) {
        port_r_RREADY = ap_const_logic_1;
    } else {
        port_r_RREADY = ap_const_logic_0;
    }
}

void proc::thread_port_r_WDATA() {
    if (esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
            port_r_WDATA = ap_const_lv32_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            port_r_WDATA = ap_const_lv32_FF;
        } else {
            port_r_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        port_r_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void proc::thread_port_r_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read()))))) {
        port_r_WVALID = ap_const_logic_1;
    } else {
        port_r_WVALID = ap_const_logic_0;
    }
}

void proc::thread_port_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_181_p2.read())))) {
        port_r_blk_n_AR = m_axi_port_r_ARREADY.read();
    } else {
        port_r_blk_n_AR = ap_const_logic_1;
    }
}

void proc::thread_port_r_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        port_r_blk_n_AW = m_axi_port_r_AWREADY.read();
    } else {
        port_r_blk_n_AW = ap_const_logic_1;
    }
}

void proc::thread_port_r_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        port_r_blk_n_B = m_axi_port_r_BVALID.read();
    } else {
        port_r_blk_n_B = ap_const_logic_1;
    }
}

void proc::thread_port_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
        port_r_blk_n_R = m_axi_port_r_RVALID.read();
    } else {
        port_r_blk_n_R = ap_const_logic_1;
    }
}

void proc::thread_port_r_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        port_r_blk_n_W = m_axi_port_r_WREADY.read();
    } else {
        port_r_blk_n_W = ap_const_logic_1;
    }
}

void proc::thread_sub_ln23_fu_164_p2() {
    sub_ln23_fu_164_p2 = (!cpt_0_reg_104.read().is_01() || !tempo_fu_50.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpt_0_reg_104.read()) - sc_biguint<32>(tempo_fu_50.read()));
}

void proc::thread_sub_ln33_fu_175_p2() {
    sub_ln33_fu_175_p2 = (!cpt_1_reg_113.read().is_01() || !tempo_fu_50.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpt_1_reg_113.read()) - sc_biguint<32>(tempo_fu_50.read()));
}

void proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(port_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_170_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_state16_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(port_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, port_r_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, port_r_WREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(port_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(ap_block_state36_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_181_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_181_p2.read()) && esl_seteq<1,1,1>(ap_block_state36_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(port_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state43;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<43>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void proc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_port_r_AWVALID\" :  \"" << m_axi_port_r_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_AWREADY\" :  \"" << m_axi_port_r_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWADDR\" :  \"" << m_axi_port_r_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWID\" :  \"" << m_axi_port_r_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWLEN\" :  \"" << m_axi_port_r_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWSIZE\" :  \"" << m_axi_port_r_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWBURST\" :  \"" << m_axi_port_r_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWLOCK\" :  \"" << m_axi_port_r_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWCACHE\" :  \"" << m_axi_port_r_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWPROT\" :  \"" << m_axi_port_r_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWQOS\" :  \"" << m_axi_port_r_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWREGION\" :  \"" << m_axi_port_r_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_AWUSER\" :  \"" << m_axi_port_r_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WVALID\" :  \"" << m_axi_port_r_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_WREADY\" :  \"" << m_axi_port_r_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WDATA\" :  \"" << m_axi_port_r_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WSTRB\" :  \"" << m_axi_port_r_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WLAST\" :  \"" << m_axi_port_r_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WID\" :  \"" << m_axi_port_r_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_WUSER\" :  \"" << m_axi_port_r_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARVALID\" :  \"" << m_axi_port_r_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_ARREADY\" :  \"" << m_axi_port_r_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARADDR\" :  \"" << m_axi_port_r_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARID\" :  \"" << m_axi_port_r_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARLEN\" :  \"" << m_axi_port_r_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARSIZE\" :  \"" << m_axi_port_r_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARBURST\" :  \"" << m_axi_port_r_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARLOCK\" :  \"" << m_axi_port_r_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARCACHE\" :  \"" << m_axi_port_r_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARPROT\" :  \"" << m_axi_port_r_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARQOS\" :  \"" << m_axi_port_r_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARREGION\" :  \"" << m_axi_port_r_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_ARUSER\" :  \"" << m_axi_port_r_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RVALID\" :  \"" << m_axi_port_r_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_RREADY\" :  \"" << m_axi_port_r_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RDATA\" :  \"" << m_axi_port_r_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RLAST\" :  \"" << m_axi_port_r_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RID\" :  \"" << m_axi_port_r_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RUSER\" :  \"" << m_axi_port_r_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_RRESP\" :  \"" << m_axi_port_r_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_BVALID\" :  \"" << m_axi_port_r_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_port_r_BREADY\" :  \"" << m_axi_port_r_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_BRESP\" :  \"" << m_axi_port_r_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_BID\" :  \"" << m_axi_port_r_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_port_r_BUSER\" :  \"" << m_axi_port_r_BUSER.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

