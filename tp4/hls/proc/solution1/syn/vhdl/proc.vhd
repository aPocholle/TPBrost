-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity proc is
generic (
    C_M_AXI_PORT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PORT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_PORT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PORT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_port_r_AWVALID : OUT STD_LOGIC;
    m_axi_port_r_AWREADY : IN STD_LOGIC;
    m_axi_port_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ADDR_WIDTH-1 downto 0);
    m_axi_port_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ID_WIDTH-1 downto 0);
    m_axi_port_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_port_r_WVALID : OUT STD_LOGIC;
    m_axi_port_r_WREADY : IN STD_LOGIC;
    m_axi_port_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_DATA_WIDTH-1 downto 0);
    m_axi_port_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_port_r_WLAST : OUT STD_LOGIC;
    m_axi_port_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ID_WIDTH-1 downto 0);
    m_axi_port_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_WUSER_WIDTH-1 downto 0);
    m_axi_port_r_ARVALID : OUT STD_LOGIC;
    m_axi_port_r_ARREADY : IN STD_LOGIC;
    m_axi_port_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ADDR_WIDTH-1 downto 0);
    m_axi_port_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ID_WIDTH-1 downto 0);
    m_axi_port_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_port_r_RVALID : IN STD_LOGIC;
    m_axi_port_r_RREADY : OUT STD_LOGIC;
    m_axi_port_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_R_DATA_WIDTH-1 downto 0);
    m_axi_port_r_RLAST : IN STD_LOGIC;
    m_axi_port_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ID_WIDTH-1 downto 0);
    m_axi_port_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_R_RUSER_WIDTH-1 downto 0);
    m_axi_port_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_BVALID : IN STD_LOGIC;
    m_axi_port_r_BREADY : OUT STD_LOGIC;
    m_axi_port_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_R_ID_WIDTH-1 downto 0);
    m_axi_port_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_R_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of proc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "proc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=769,HLS_SYN_LUT=1043,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_10000008 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000000000001000";
    constant ap_const_lv64_10004000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000100000000000000";
    constant ap_const_lv64_10000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_186A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011000011010100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal port_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal port_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln23_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln33_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal port_r_blk_n_AW : STD_LOGIC;
    signal port_r_blk_n_W : STD_LOGIC;
    signal port_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal port_r_AWVALID : STD_LOGIC;
    signal port_r_AWREADY : STD_LOGIC;
    signal port_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal port_r_WVALID : STD_LOGIC;
    signal port_r_WREADY : STD_LOGIC;
    signal port_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal port_r_ARVALID : STD_LOGIC;
    signal port_r_ARREADY : STD_LOGIC;
    signal port_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal port_r_RVALID : STD_LOGIC;
    signal port_r_RREADY : STD_LOGIC;
    signal port_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal port_r_RLAST : STD_LOGIC;
    signal port_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal port_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal port_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal port_r_BVALID : STD_LOGIC;
    signal port_r_BREADY : STD_LOGIC;
    signal port_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal port_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal port_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal sw_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln23_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpt_0_reg_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpt_1_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state36_io : BOOLEAN;
    signal tempo_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sub_ln23_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component proc_port_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    proc_port_r_m_axi_U : component proc_port_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PORT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PORT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PORT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PORT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PORT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PORT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PORT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PORT_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PORT_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PORT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PORT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PORT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_port_r_AWVALID,
        AWREADY => m_axi_port_r_AWREADY,
        AWADDR => m_axi_port_r_AWADDR,
        AWID => m_axi_port_r_AWID,
        AWLEN => m_axi_port_r_AWLEN,
        AWSIZE => m_axi_port_r_AWSIZE,
        AWBURST => m_axi_port_r_AWBURST,
        AWLOCK => m_axi_port_r_AWLOCK,
        AWCACHE => m_axi_port_r_AWCACHE,
        AWPROT => m_axi_port_r_AWPROT,
        AWQOS => m_axi_port_r_AWQOS,
        AWREGION => m_axi_port_r_AWREGION,
        AWUSER => m_axi_port_r_AWUSER,
        WVALID => m_axi_port_r_WVALID,
        WREADY => m_axi_port_r_WREADY,
        WDATA => m_axi_port_r_WDATA,
        WSTRB => m_axi_port_r_WSTRB,
        WLAST => m_axi_port_r_WLAST,
        WID => m_axi_port_r_WID,
        WUSER => m_axi_port_r_WUSER,
        ARVALID => m_axi_port_r_ARVALID,
        ARREADY => m_axi_port_r_ARREADY,
        ARADDR => m_axi_port_r_ARADDR,
        ARID => m_axi_port_r_ARID,
        ARLEN => m_axi_port_r_ARLEN,
        ARSIZE => m_axi_port_r_ARSIZE,
        ARBURST => m_axi_port_r_ARBURST,
        ARLOCK => m_axi_port_r_ARLOCK,
        ARCACHE => m_axi_port_r_ARCACHE,
        ARPROT => m_axi_port_r_ARPROT,
        ARQOS => m_axi_port_r_ARQOS,
        ARREGION => m_axi_port_r_ARREGION,
        ARUSER => m_axi_port_r_ARUSER,
        RVALID => m_axi_port_r_RVALID,
        RREADY => m_axi_port_r_RREADY,
        RDATA => m_axi_port_r_RDATA,
        RLAST => m_axi_port_r_RLAST,
        RID => m_axi_port_r_RID,
        RUSER => m_axi_port_r_RUSER,
        RRESP => m_axi_port_r_RRESP,
        BVALID => m_axi_port_r_BVALID,
        BREADY => m_axi_port_r_BREADY,
        BRESP => m_axi_port_r_BRESP,
        BID => m_axi_port_r_BID,
        BUSER => m_axi_port_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => port_r_ARVALID,
        I_ARREADY => port_r_ARREADY,
        I_ARADDR => port_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => port_r_RVALID,
        I_RREADY => port_r_RREADY,
        I_RDATA => port_r_RDATA,
        I_RID => port_r_RID,
        I_RUSER => port_r_RUSER,
        I_RRESP => port_r_RRESP,
        I_RLAST => port_r_RLAST,
        I_AWVALID => port_r_AWVALID,
        I_AWREADY => port_r_AWREADY,
        I_AWADDR => port_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => port_r_WVALID,
        I_WREADY => port_r_WREADY,
        I_WDATA => port_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => port_r_BVALID,
        I_BREADY => port_r_BREADY,
        I_BRESP => port_r_BRESP,
        I_BID => port_r_BID,
        I_BUSER => port_r_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cpt_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                cpt_0_reg_104 <= port_r_RDATA;
            elsif (((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                cpt_0_reg_104 <= reg_125;
            end if; 
        end if;
    end process;

    cpt_1_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                cpt_1_reg_113 <= port_r_RDATA;
            elsif (((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                cpt_1_reg_113 <= reg_125;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    add_ln23_reg_221(31 downto 5) <= add_ln23_fu_159_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    mul_ln23_reg_216(31 downto 5) <= mul_ln23_fu_154_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_125 <= port_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((port_r_RVALID = ap_const_logic_0) or (port_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                sw_reg_211 <= port_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tempo_fu_50 <= reg_125;
            end if;
        end if;
    end process;
    mul_ln23_reg_216(4 downto 0) <= "00000";
    add_ln23_reg_221(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state16, icmp_ln23_fu_170_p2, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state36, icmp_ln33_fu_181_p2, ap_CS_fsm_state43, ap_CS_fsm_state15, ap_CS_fsm_state29, ap_CS_fsm_state35, port_r_AWREADY, port_r_WREADY, port_r_ARREADY, port_r_RVALID, port_r_BVALID, ap_block_state16_io, ap_block_state36_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((port_r_RVALID = ap_const_logic_0) or (port_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((port_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if ((not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln33_fu_181_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln33_fu_181_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_159_p2 <= std_logic_vector(unsigned(mul_ln23_reg_216) + unsigned(ap_const_lv32_186A0));
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_io_assign_proc : process(icmp_ln23_fu_170_p2, port_r_ARREADY)
    begin
                ap_block_state16_io <= (((port_r_ARREADY = ap_const_logic_0) and (icmp_ln23_fu_170_p2 = ap_const_lv1_0)) or ((port_r_ARREADY = ap_const_logic_0) and (icmp_ln23_fu_170_p2 = ap_const_lv1_1)));
    end process;


    ap_block_state36_io_assign_proc : process(icmp_ln33_fu_181_p2, port_r_ARREADY)
    begin
                ap_block_state36_io <= ((port_r_ARREADY = ap_const_logic_0) and (icmp_ln33_fu_181_p2 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln23_fu_170_p2 <= "1" when (unsigned(sub_ln23_fu_164_p2) < unsigned(add_ln23_reg_221)) else "0";
    icmp_ln33_fu_181_p2 <= "1" when (unsigned(sub_ln33_fu_175_p2) < unsigned(add_ln23_reg_221)) else "0";
    mul_ln23_fu_154_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sw_reg_211) * signed('0' &ap_const_lv32_186A0))), 32));

    port_r_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state16, icmp_ln23_fu_170_p2, ap_CS_fsm_state36, icmp_ln33_fu_181_p2, port_r_ARREADY, ap_block_state16_io, ap_block_state36_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln33_fu_181_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_1)) or ((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            port_r_ARADDR <= ap_const_lv64_10004000(32 - 1 downto 0);
        elsif (((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            port_r_ARADDR <= ap_const_lv64_10000008(32 - 1 downto 0);
        else 
            port_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    port_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state16, icmp_ln23_fu_170_p2, ap_CS_fsm_state36, icmp_ln33_fu_181_p2, port_r_ARREADY, ap_block_state16_io, ap_block_state36_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state36_io) and (ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln33_fu_181_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_1)) or ((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((port_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            port_r_ARVALID <= ap_const_logic_1;
        else 
            port_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    port_r_AWADDR <= ap_const_lv64_10000000(32 - 1 downto 0);

    port_r_AWVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state29, port_r_AWREADY, port_r_RVALID)
    begin
        if ((((port_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            port_r_AWVALID <= ap_const_logic_1;
        else 
            port_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    port_r_BREADY_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state35, port_r_BVALID)
    begin
        if ((((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((port_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            port_r_BREADY <= ap_const_logic_1;
        else 
            port_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    port_r_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state43, port_r_AWREADY, port_r_WREADY, port_r_RVALID)
    begin
        if ((((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((port_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            port_r_RREADY <= ap_const_logic_1;
        else 
            port_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    port_r_WDATA_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state30, port_r_RVALID)
    begin
        if ((port_r_RVALID = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                port_r_WDATA <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                port_r_WDATA <= ap_const_lv32_FF;
            else 
                port_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            port_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    port_r_WVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state30, port_r_WREADY, port_r_RVALID)
    begin
        if (((not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((port_r_RVALID = ap_const_logic_0) or (port_r_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            port_r_WVALID <= ap_const_logic_1;
        else 
            port_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    port_r_blk_n_AR_assign_proc : process(m_axi_port_r_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state16, icmp_ln23_fu_170_p2, ap_CS_fsm_state36, icmp_ln33_fu_181_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln33_fu_181_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln23_fu_170_p2 = ap_const_lv1_1)))) then 
            port_r_blk_n_AR <= m_axi_port_r_ARREADY;
        else 
            port_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    port_r_blk_n_AW_assign_proc : process(m_axi_port_r_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            port_r_blk_n_AW <= m_axi_port_r_AWREADY;
        else 
            port_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    port_r_blk_n_B_assign_proc : process(m_axi_port_r_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            port_r_blk_n_B <= m_axi_port_r_BVALID;
        else 
            port_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    port_r_blk_n_R_assign_proc : process(m_axi_port_r_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            port_r_blk_n_R <= m_axi_port_r_RVALID;
        else 
            port_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    port_r_blk_n_W_assign_proc : process(m_axi_port_r_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            port_r_blk_n_W <= m_axi_port_r_WREADY;
        else 
            port_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    sub_ln23_fu_164_p2 <= std_logic_vector(unsigned(cpt_0_reg_104) - unsigned(tempo_fu_50));
    sub_ln33_fu_175_p2 <= std_logic_vector(unsigned(cpt_1_reg_113) - unsigned(tempo_fu_50));
end behav;
