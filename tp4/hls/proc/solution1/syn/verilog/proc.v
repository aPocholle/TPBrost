// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="proc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=769,HLS_SYN_LUT=1043,HLS_VERSION=2019_2}" *)

module proc (
        ap_clk,
        ap_rst_n,
        m_axi_port_r_AWVALID,
        m_axi_port_r_AWREADY,
        m_axi_port_r_AWADDR,
        m_axi_port_r_AWID,
        m_axi_port_r_AWLEN,
        m_axi_port_r_AWSIZE,
        m_axi_port_r_AWBURST,
        m_axi_port_r_AWLOCK,
        m_axi_port_r_AWCACHE,
        m_axi_port_r_AWPROT,
        m_axi_port_r_AWQOS,
        m_axi_port_r_AWREGION,
        m_axi_port_r_AWUSER,
        m_axi_port_r_WVALID,
        m_axi_port_r_WREADY,
        m_axi_port_r_WDATA,
        m_axi_port_r_WSTRB,
        m_axi_port_r_WLAST,
        m_axi_port_r_WID,
        m_axi_port_r_WUSER,
        m_axi_port_r_ARVALID,
        m_axi_port_r_ARREADY,
        m_axi_port_r_ARADDR,
        m_axi_port_r_ARID,
        m_axi_port_r_ARLEN,
        m_axi_port_r_ARSIZE,
        m_axi_port_r_ARBURST,
        m_axi_port_r_ARLOCK,
        m_axi_port_r_ARCACHE,
        m_axi_port_r_ARPROT,
        m_axi_port_r_ARQOS,
        m_axi_port_r_ARREGION,
        m_axi_port_r_ARUSER,
        m_axi_port_r_RVALID,
        m_axi_port_r_RREADY,
        m_axi_port_r_RDATA,
        m_axi_port_r_RLAST,
        m_axi_port_r_RID,
        m_axi_port_r_RUSER,
        m_axi_port_r_RRESP,
        m_axi_port_r_BVALID,
        m_axi_port_r_BREADY,
        m_axi_port_r_BRESP,
        m_axi_port_r_BID,
        m_axi_port_r_BUSER
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;
parameter    C_M_AXI_PORT_R_ID_WIDTH = 1;
parameter    C_M_AXI_PORT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_PORT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_PORT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_PORT_R_TARGET_ADDR = 0;
parameter    C_M_AXI_PORT_R_USER_VALUE = 0;
parameter    C_M_AXI_PORT_R_PROT_VALUE = 0;
parameter    C_M_AXI_PORT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_PORT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_port_r_AWVALID;
input   m_axi_port_r_AWREADY;
output  [C_M_AXI_PORT_R_ADDR_WIDTH - 1:0] m_axi_port_r_AWADDR;
output  [C_M_AXI_PORT_R_ID_WIDTH - 1:0] m_axi_port_r_AWID;
output  [7:0] m_axi_port_r_AWLEN;
output  [2:0] m_axi_port_r_AWSIZE;
output  [1:0] m_axi_port_r_AWBURST;
output  [1:0] m_axi_port_r_AWLOCK;
output  [3:0] m_axi_port_r_AWCACHE;
output  [2:0] m_axi_port_r_AWPROT;
output  [3:0] m_axi_port_r_AWQOS;
output  [3:0] m_axi_port_r_AWREGION;
output  [C_M_AXI_PORT_R_AWUSER_WIDTH - 1:0] m_axi_port_r_AWUSER;
output   m_axi_port_r_WVALID;
input   m_axi_port_r_WREADY;
output  [C_M_AXI_PORT_R_DATA_WIDTH - 1:0] m_axi_port_r_WDATA;
output  [C_M_AXI_PORT_R_WSTRB_WIDTH - 1:0] m_axi_port_r_WSTRB;
output   m_axi_port_r_WLAST;
output  [C_M_AXI_PORT_R_ID_WIDTH - 1:0] m_axi_port_r_WID;
output  [C_M_AXI_PORT_R_WUSER_WIDTH - 1:0] m_axi_port_r_WUSER;
output   m_axi_port_r_ARVALID;
input   m_axi_port_r_ARREADY;
output  [C_M_AXI_PORT_R_ADDR_WIDTH - 1:0] m_axi_port_r_ARADDR;
output  [C_M_AXI_PORT_R_ID_WIDTH - 1:0] m_axi_port_r_ARID;
output  [7:0] m_axi_port_r_ARLEN;
output  [2:0] m_axi_port_r_ARSIZE;
output  [1:0] m_axi_port_r_ARBURST;
output  [1:0] m_axi_port_r_ARLOCK;
output  [3:0] m_axi_port_r_ARCACHE;
output  [2:0] m_axi_port_r_ARPROT;
output  [3:0] m_axi_port_r_ARQOS;
output  [3:0] m_axi_port_r_ARREGION;
output  [C_M_AXI_PORT_R_ARUSER_WIDTH - 1:0] m_axi_port_r_ARUSER;
input   m_axi_port_r_RVALID;
output   m_axi_port_r_RREADY;
input  [C_M_AXI_PORT_R_DATA_WIDTH - 1:0] m_axi_port_r_RDATA;
input   m_axi_port_r_RLAST;
input  [C_M_AXI_PORT_R_ID_WIDTH - 1:0] m_axi_port_r_RID;
input  [C_M_AXI_PORT_R_RUSER_WIDTH - 1:0] m_axi_port_r_RUSER;
input  [1:0] m_axi_port_r_RRESP;
input   m_axi_port_r_BVALID;
output   m_axi_port_r_BREADY;
input  [1:0] m_axi_port_r_BRESP;
input  [C_M_AXI_PORT_R_ID_WIDTH - 1:0] m_axi_port_r_BID;
input  [C_M_AXI_PORT_R_BUSER_WIDTH - 1:0] m_axi_port_r_BUSER;

 reg    ap_rst_n_inv;
reg    port_r_blk_n_AR;
(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    port_r_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln23_fu_170_p2;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln33_fu_181_p2;
wire    ap_CS_fsm_state43;
reg    port_r_blk_n_AW;
reg    port_r_blk_n_W;
reg    port_r_blk_n_B;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
reg    port_r_AWVALID;
wire    port_r_AWREADY;
wire   [31:0] port_r_AWADDR;
reg    port_r_WVALID;
wire    port_r_WREADY;
reg   [31:0] port_r_WDATA;
reg    port_r_ARVALID;
wire    port_r_ARREADY;
reg   [31:0] port_r_ARADDR;
wire    port_r_RVALID;
reg    port_r_RREADY;
wire   [31:0] port_r_RDATA;
wire    port_r_RLAST;
wire   [0:0] port_r_RID;
wire   [0:0] port_r_RUSER;
wire   [1:0] port_r_RRESP;
wire    port_r_BVALID;
reg    port_r_BREADY;
wire   [1:0] port_r_BRESP;
wire   [0:0] port_r_BID;
wire   [0:0] port_r_BUSER;
reg   [31:0] reg_125;
reg  signed [31:0] sw_reg_211;
wire   [31:0] mul_ln23_fu_154_p2;
reg   [31:0] mul_ln23_reg_216;
wire    ap_CS_fsm_state14;
wire   [31:0] add_ln23_fu_159_p2;
reg   [31:0] add_ln23_reg_221;
reg   [31:0] cpt_0_reg_104;
reg   [31:0] cpt_1_reg_113;
reg    ap_block_state16_io;
reg    ap_block_state36_io;
reg   [31:0] tempo_fu_50;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state31;
wire   [31:0] sub_ln23_fu_164_p2;
wire   [31:0] sub_ln33_fu_175_p2;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

proc_port_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PORT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PORT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PORT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PORT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PORT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PORT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PORT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PORT_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_PORT_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_PORT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PORT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PORT_R_CACHE_VALUE ))
proc_port_r_m_axi_U(
    .AWVALID(m_axi_port_r_AWVALID),
    .AWREADY(m_axi_port_r_AWREADY),
    .AWADDR(m_axi_port_r_AWADDR),
    .AWID(m_axi_port_r_AWID),
    .AWLEN(m_axi_port_r_AWLEN),
    .AWSIZE(m_axi_port_r_AWSIZE),
    .AWBURST(m_axi_port_r_AWBURST),
    .AWLOCK(m_axi_port_r_AWLOCK),
    .AWCACHE(m_axi_port_r_AWCACHE),
    .AWPROT(m_axi_port_r_AWPROT),
    .AWQOS(m_axi_port_r_AWQOS),
    .AWREGION(m_axi_port_r_AWREGION),
    .AWUSER(m_axi_port_r_AWUSER),
    .WVALID(m_axi_port_r_WVALID),
    .WREADY(m_axi_port_r_WREADY),
    .WDATA(m_axi_port_r_WDATA),
    .WSTRB(m_axi_port_r_WSTRB),
    .WLAST(m_axi_port_r_WLAST),
    .WID(m_axi_port_r_WID),
    .WUSER(m_axi_port_r_WUSER),
    .ARVALID(m_axi_port_r_ARVALID),
    .ARREADY(m_axi_port_r_ARREADY),
    .ARADDR(m_axi_port_r_ARADDR),
    .ARID(m_axi_port_r_ARID),
    .ARLEN(m_axi_port_r_ARLEN),
    .ARSIZE(m_axi_port_r_ARSIZE),
    .ARBURST(m_axi_port_r_ARBURST),
    .ARLOCK(m_axi_port_r_ARLOCK),
    .ARCACHE(m_axi_port_r_ARCACHE),
    .ARPROT(m_axi_port_r_ARPROT),
    .ARQOS(m_axi_port_r_ARQOS),
    .ARREGION(m_axi_port_r_ARREGION),
    .ARUSER(m_axi_port_r_ARUSER),
    .RVALID(m_axi_port_r_RVALID),
    .RREADY(m_axi_port_r_RREADY),
    .RDATA(m_axi_port_r_RDATA),
    .RLAST(m_axi_port_r_RLAST),
    .RID(m_axi_port_r_RID),
    .RUSER(m_axi_port_r_RUSER),
    .RRESP(m_axi_port_r_RRESP),
    .BVALID(m_axi_port_r_BVALID),
    .BREADY(m_axi_port_r_BREADY),
    .BRESP(m_axi_port_r_BRESP),
    .BID(m_axi_port_r_BID),
    .BUSER(m_axi_port_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(port_r_ARVALID),
    .I_ARREADY(port_r_ARREADY),
    .I_ARADDR(port_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(port_r_RVALID),
    .I_RREADY(port_r_RREADY),
    .I_RDATA(port_r_RDATA),
    .I_RID(port_r_RID),
    .I_RUSER(port_r_RUSER),
    .I_RRESP(port_r_RRESP),
    .I_RLAST(port_r_RLAST),
    .I_AWVALID(port_r_AWVALID),
    .I_AWREADY(port_r_AWREADY),
    .I_AWADDR(port_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(port_r_WVALID),
    .I_WREADY(port_r_WREADY),
    .I_WDATA(port_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(port_r_BVALID),
    .I_BREADY(port_r_BREADY),
    .I_BRESP(port_r_BRESP),
    .I_BID(port_r_BID),
    .I_BUSER(port_r_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        cpt_0_reg_104 <= port_r_RDATA;
    end else if (((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        cpt_0_reg_104 <= reg_125;
    end
end

always @ (posedge ap_clk) begin
    if (((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        cpt_1_reg_113 <= port_r_RDATA;
    end else if (((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        cpt_1_reg_113 <= reg_125;
    end
end

always @ (posedge ap_clk) begin
    if (((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        add_ln23_reg_221[31 : 5] <= add_ln23_fu_159_p2[31 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln23_reg_216[31 : 5] <= mul_ln23_fu_154_p2[31 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_125 <= port_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((port_r_RVALID == 1'b0) | (port_r_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        sw_reg_211 <= port_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state11))) begin
        tempo_fu_50 <= reg_125;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln33_fu_181_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd0)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd1)) | ((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        port_r_ARADDR = 64'd268451840;
    end else if (((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        port_r_ARADDR = 64'd268435464;
    end else begin
        port_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln33_fu_181_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd0)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd1)) | ((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        port_r_ARVALID = 1'b1;
    end else begin
        port_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((port_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | (~((port_r_RVALID == 1'b0) | (port_r_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        port_r_AWVALID = 1'b1;
    end else begin
        port_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        port_r_BREADY = 1'b1;
    end else begin
        port_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | (~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | ((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | (~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((port_r_RVALID == 1'b0) | (port_r_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        port_r_RREADY = 1'b1;
    end else begin
        port_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((port_r_RVALID == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            port_r_WDATA = 32'd0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            port_r_WDATA = 32'd255;
        end else begin
            port_r_WDATA = 'bx;
        end
    end else begin
        port_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        port_r_WVALID = 1'b1;
    end else begin
        port_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state36) & (icmp_ln33_fu_181_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd1)))) begin
        port_r_blk_n_AR = m_axi_port_r_ARREADY;
    end else begin
        port_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state9))) begin
        port_r_blk_n_AW = m_axi_port_r_AWREADY;
    end else begin
        port_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state15))) begin
        port_r_blk_n_B = m_axi_port_r_BVALID;
    end else begin
        port_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        port_r_blk_n_R = m_axi_port_r_RVALID;
    end else begin
        port_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state10))) begin
        port_r_blk_n_W = m_axi_port_r_WREADY;
    end else begin
        port_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((port_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((port_r_RVALID == 1'b0) | (port_r_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln23_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((port_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((port_r_RVALID == 1'b0) | (port_r_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((port_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln33_fu_181_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln33_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((port_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_159_p2 = (mul_ln23_reg_216 + 32'd100000);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16_io = (((port_r_ARREADY == 1'b0) & (icmp_ln23_fu_170_p2 == 1'd0)) | ((port_r_ARREADY == 1'b0) & (icmp_ln23_fu_170_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state36_io = ((port_r_ARREADY == 1'b0) & (icmp_ln33_fu_181_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln23_fu_170_p2 = ((sub_ln23_fu_164_p2 < add_ln23_reg_221) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_181_p2 = ((sub_ln33_fu_175_p2 < add_ln23_reg_221) ? 1'b1 : 1'b0);

assign mul_ln23_fu_154_p2 = ($signed(sw_reg_211) * $signed('h186A0));

assign port_r_AWADDR = 64'd268435456;

assign sub_ln23_fu_164_p2 = (cpt_0_reg_104 - tempo_fu_50);

assign sub_ln33_fu_175_p2 = (cpt_1_reg_113 - tempo_fu_50);

always @ (posedge ap_clk) begin
    mul_ln23_reg_216[4:0] <= 5'b00000;
    add_ln23_reg_221[4:0] <= 5'b00000;
end

endmodule //proc
