// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="im_load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.568312,HLS_SYN_LAT=922561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=88,HLS_SYN_LUT=507,HLS_VERSION=2019_2}" *)

module im_load (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mode_V,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        mem_V_address0,
        mem_V_ce0,
        mem_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] mode_V;
output  [7:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [0:0] m_axis_video_TKEEP;
output  [0:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
output  [18:0] mem_V_address0;
output   mem_V_ce0;
input  [7:0] mem_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mem_V_ce0;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    m_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln879_fu_160_p2;
reg   [0:0] icmp_ln879_reg_504;
wire   [0:0] and_ln879_fu_184_p2;
reg   [0:0] and_ln879_reg_509;
wire   [0:0] and_ln879_1_fu_202_p2;
reg   [0:0] and_ln879_1_reg_515;
wire   [0:0] xor_ln879_2_fu_214_p2;
reg   [0:0] xor_ln879_2_reg_521;
wire   [8:0] i_fu_226_p2;
reg   [8:0] i_reg_529;
wire    ap_CS_fsm_state2;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
wire   [18:0] add_ln31_1_fu_256_p2;
reg   [18:0] add_ln31_1_reg_534;
wire   [0:0] icmp_ln16_fu_220_p2;
wire   [19:0] zext_ln31_2_fu_262_p1;
reg   [19:0] zext_ln31_2_reg_539;
wire   [18:0] add_ln48_1_fu_302_p2;
reg   [18:0] add_ln48_1_reg_544;
wire   [0:0] and_ln44_fu_308_p2;
reg   [0:0] and_ln44_reg_550;
wire   [0:0] and_ln44_2_fu_324_p2;
reg   [0:0] and_ln44_2_reg_556;
wire   [0:0] or_ln44_fu_329_p2;
reg   [0:0] or_ln44_reg_561;
wire   [9:0] j_fu_349_p2;
reg   [9:0] j_reg_570;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_user_V_fu_381_p2;
reg   [0:0] tmp_user_V_reg_575;
wire   [0:0] icmp_ln19_fu_343_p2;
wire   [0:0] tmp_last_V_fu_387_p2;
reg   [0:0] tmp_last_V_reg_580;
reg   [8:0] i_0_reg_137;
reg   [9:0] j_0_reg_149;
wire  signed [63:0] sext_ln44_fu_499_p1;
wire   [0:0] icmp_ln879_1_fu_166_p2;
wire   [0:0] xor_ln879_fu_178_p2;
wire   [0:0] or_ln879_fu_190_p2;
wire   [0:0] icmp_ln879_2_fu_172_p2;
wire   [0:0] xor_ln879_1_fu_196_p2;
wire   [0:0] or_ln879_1_fu_208_p2;
wire   [17:0] shl_ln_fu_232_p3;
wire   [15:0] shl_ln31_1_fu_244_p3;
wire   [18:0] zext_ln31_1_fu_252_p1;
wire   [18:0] zext_ln31_fu_240_p1;
wire   [8:0] sub_ln48_fu_272_p2;
wire   [17:0] shl_ln1_fu_278_p3;
wire   [15:0] shl_ln48_1_fu_290_p3;
wire   [18:0] zext_ln48_1_fu_298_p1;
wire   [18:0] zext_ln48_fu_286_p1;
wire   [0:0] icmp_ln44_fu_266_p2;
wire   [0:0] xor_ln44_fu_313_p2;
wire   [0:0] and_ln44_1_fu_319_p2;
wire   [8:0] trunc_ln21_fu_355_p1;
wire   [0:0] tmp_fu_365_p3;
wire   [8:0] or_ln21_fu_359_p2;
wire   [9:0] or_ln_fu_373_p3;
wire   [18:0] zext_ln19_fu_335_p1;
wire   [18:0] add_ln31_fu_393_p2;
wire   [19:0] zext_ln19_1_fu_339_p1;
wire   [0:0] icmp_ln35_fu_402_p2;
wire   [0:0] xor_ln35_fu_428_p2;
wire   [18:0] add_ln48_fu_413_p2;
wire   [18:0] select_ln44_fu_439_p3;
wire   [19:0] zext_ln35_fu_398_p1;
wire   [19:0] sub_ln39_fu_408_p2;
wire   [0:0] and_ln35_1_fu_434_p2;
wire   [0:0] and_ln35_fu_423_p2;
wire   [19:0] zext_ln44_fu_446_p1;
wire   [19:0] select_ln44_1_fu_450_p3;
wire   [0:0] or_ln44_1_fu_457_p2;
wire   [0:0] or_ln44_2_fu_462_p2;
wire   [18:0] sub_ln57_fu_418_p2;
wire   [18:0] select_ln44_3_fu_479_p3;
wire   [0:0] or_ln44_3_fu_474_p2;
wire   [19:0] select_ln44_2_fu_467_p3;
wire   [19:0] zext_ln44_1_fu_487_p1;
wire   [19:0] select_ln44_4_fu_491_p3;
reg   [4:0] ap_NS_fsm;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

regslice_both #(
    .DataWidth( 8 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mem_V_q0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_575),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_580),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln19_fu_343_p2 == 1'd1))) begin
        i_0_reg_137 <= i_reg_529;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_137 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_220_p2 == 1'd0) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_149 <= 10'd0;
    end else if (((m_axis_video_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_149 <= j_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_220_p2 == 1'd0) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln31_1_reg_534[18 : 7] <= add_ln31_1_fu_256_p2[18 : 7];
        add_ln48_1_reg_544[18 : 7] <= add_ln48_1_fu_302_p2[18 : 7];
        and_ln44_2_reg_556 <= and_ln44_2_fu_324_p2;
        and_ln44_reg_550 <= and_ln44_fu_308_p2;
        or_ln44_reg_561 <= or_ln44_fu_329_p2;
        zext_ln31_2_reg_539[18 : 7] <= zext_ln31_2_fu_262_p1[18 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        and_ln879_1_reg_515 <= and_ln879_1_fu_202_p2;
        and_ln879_reg_509 <= and_ln879_fu_184_p2;
        icmp_ln879_reg_504 <= icmp_ln879_fu_160_p2;
        xor_ln879_2_reg_521 <= xor_ln879_2_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_529 <= i_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_570 <= j_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_last_V_reg_580 <= tmp_last_V_fu_387_p2;
        tmp_user_V_reg_575 <= tmp_user_V_fu_381_p2;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_220_p2 == 1'd1) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_220_p2 == 1'd1) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((m_axis_video_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_V_ce0 = 1'b1;
    end else begin
        mem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_220_p2 == 1'd1) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln16_fu_220_p2 == 1'd0) & (regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln19_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axis_video_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axis_video_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_256_p2 = (zext_ln31_1_fu_252_p1 + zext_ln31_fu_240_p1);

assign add_ln31_fu_393_p2 = (add_ln31_1_reg_534 + zext_ln19_fu_335_p1);

assign add_ln48_1_fu_302_p2 = (zext_ln48_1_fu_298_p1 + zext_ln48_fu_286_p1);

assign add_ln48_fu_413_p2 = (add_ln48_1_reg_544 + zext_ln19_fu_335_p1);

assign and_ln35_1_fu_434_p2 = (xor_ln35_fu_428_p2 & and_ln879_reg_509);

assign and_ln35_fu_423_p2 = (icmp_ln35_fu_402_p2 & and_ln879_reg_509);

assign and_ln44_1_fu_319_p2 = (xor_ln44_fu_313_p2 & and_ln879_1_reg_515);

assign and_ln44_2_fu_324_p2 = (xor_ln879_2_reg_521 & icmp_ln44_fu_266_p2);

assign and_ln44_fu_308_p2 = (icmp_ln44_fu_266_p2 & and_ln879_1_reg_515);

assign and_ln879_1_fu_202_p2 = (xor_ln879_1_fu_196_p2 & icmp_ln879_2_fu_172_p2);

assign and_ln879_fu_184_p2 = (xor_ln879_fu_178_p2 & icmp_ln879_1_fu_166_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_226_p2 = (i_0_reg_137 + 9'd1);

assign icmp_ln16_fu_220_p2 = ((i_0_reg_137 == 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_343_p2 = ((j_0_reg_149 == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_402_p2 = ((j_0_reg_149 < 10'd320) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_266_p2 = ((i_0_reg_137 < 9'd240) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_166_p2 = ((mode_V == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_172_p2 = ((mode_V == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_160_p2 = ((mode_V == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_349_p2 = (j_0_reg_149 + 10'd1);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign mem_V_address0 = sext_ln44_fu_499_p1;

assign or_ln21_fu_359_p2 = (trunc_ln21_fu_355_p1 | i_0_reg_137);

assign or_ln44_1_fu_457_p2 = (and_ln44_reg_550 | and_ln35_1_fu_434_p2);

assign or_ln44_2_fu_462_p2 = (icmp_ln879_reg_504 | and_ln35_fu_423_p2);

assign or_ln44_3_fu_474_p2 = (or_ln44_reg_561 | or_ln44_1_fu_457_p2);

assign or_ln44_fu_329_p2 = (and_ln44_2_fu_324_p2 | and_ln44_1_fu_319_p2);

assign or_ln879_1_fu_208_p2 = (or_ln879_fu_190_p2 | icmp_ln879_2_fu_172_p2);

assign or_ln879_fu_190_p2 = (icmp_ln879_fu_160_p2 | icmp_ln879_1_fu_166_p2);

assign or_ln_fu_373_p3 = {{tmp_fu_365_p3}, {or_ln21_fu_359_p2}};

assign select_ln44_1_fu_450_p3 = ((and_ln44_reg_550[0:0] === 1'b1) ? zext_ln35_fu_398_p1 : sub_ln39_fu_408_p2);

assign select_ln44_2_fu_467_p3 = ((or_ln44_reg_561[0:0] === 1'b1) ? zext_ln44_fu_446_p1 : select_ln44_1_fu_450_p3);

assign select_ln44_3_fu_479_p3 = ((or_ln44_2_fu_462_p2[0:0] === 1'b1) ? add_ln31_fu_393_p2 : sub_ln57_fu_418_p2);

assign select_ln44_4_fu_491_p3 = ((or_ln44_3_fu_474_p2[0:0] === 1'b1) ? select_ln44_2_fu_467_p3 : zext_ln44_1_fu_487_p1);

assign select_ln44_fu_439_p3 = ((and_ln44_2_reg_556[0:0] === 1'b1) ? add_ln31_fu_393_p2 : add_ln48_fu_413_p2);

assign sext_ln44_fu_499_p1 = $signed(select_ln44_4_fu_491_p3);

assign shl_ln1_fu_278_p3 = {{sub_ln48_fu_272_p2}, {9'd0}};

assign shl_ln31_1_fu_244_p3 = {{i_0_reg_137}, {7'd0}};

assign shl_ln48_1_fu_290_p3 = {{sub_ln48_fu_272_p2}, {7'd0}};

assign shl_ln_fu_232_p3 = {{i_0_reg_137}, {9'd0}};

assign sub_ln39_fu_408_p2 = (zext_ln31_2_reg_539 - zext_ln19_1_fu_339_p1);

assign sub_ln48_fu_272_p2 = ($signed(9'd480) - $signed(i_0_reg_137));

assign sub_ln57_fu_418_p2 = (add_ln48_1_reg_544 - zext_ln19_fu_335_p1);

assign tmp_fu_365_p3 = j_0_reg_149[32'd9];

assign tmp_last_V_fu_387_p2 = ((j_0_reg_149 == 10'd639) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_381_p2 = ((or_ln_fu_373_p3 == 10'd0) ? 1'b1 : 1'b0);

assign trunc_ln21_fu_355_p1 = j_0_reg_149[8:0];

assign xor_ln35_fu_428_p2 = (icmp_ln35_fu_402_p2 ^ 1'd1);

assign xor_ln44_fu_313_p2 = (icmp_ln44_fu_266_p2 ^ 1'd1);

assign xor_ln879_1_fu_196_p2 = (or_ln879_fu_190_p2 ^ 1'd1);

assign xor_ln879_2_fu_214_p2 = (or_ln879_1_fu_208_p2 ^ 1'd1);

assign xor_ln879_fu_178_p2 = (icmp_ln879_fu_160_p2 ^ 1'd1);

assign zext_ln19_1_fu_339_p1 = j_0_reg_149;

assign zext_ln19_fu_335_p1 = j_0_reg_149;

assign zext_ln31_1_fu_252_p1 = shl_ln31_1_fu_244_p3;

assign zext_ln31_2_fu_262_p1 = add_ln31_1_fu_256_p2;

assign zext_ln31_fu_240_p1 = shl_ln_fu_232_p3;

assign zext_ln35_fu_398_p1 = add_ln31_fu_393_p2;

assign zext_ln44_1_fu_487_p1 = select_ln44_3_fu_479_p3;

assign zext_ln44_fu_446_p1 = select_ln44_fu_439_p3;

assign zext_ln48_1_fu_298_p1 = shl_ln48_1_fu_290_p3;

assign zext_ln48_fu_286_p1 = shl_ln1_fu_278_p3;

always @ (posedge ap_clk) begin
    add_ln31_1_reg_534[6:0] <= 7'b0000000;
    zext_ln31_2_reg_539[6:0] <= 7'b0000000;
    zext_ln31_2_reg_539[19] <= 1'b0;
    add_ln48_1_reg_544[6:0] <= 7'b0000000;
end

endmodule //im_load
