-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity im_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mode_V : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    mem_V_ce0 : OUT STD_LOGIC;
    mem_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of im_load is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "im_load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.568312,HLS_SYN_LAT=922561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=88,HLS_SYN_LUT=507,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_lv10_140 : STD_LOGIC_VECTOR (9 downto 0) := "0101000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln879_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_2_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_2_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_529 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal add_ln31_1_fu_256_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln31_1_reg_534 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln16_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_2_fu_262_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln31_2_reg_539 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln48_1_fu_302_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln48_1_reg_544 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln44_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_2_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_349_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_570 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_user_V_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_137 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_149 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln44_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln879_1_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_232_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln31_1_fu_244_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_1_fu_252_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln31_fu_240_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln48_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_278_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln48_1_fu_290_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln48_1_fu_298_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln48_fu_286_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln44_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_373_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_fu_335_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln31_fu_393_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln19_1_fu_339_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln35_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_413_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_fu_439_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln35_fu_398_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln39_fu_408_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal and_ln35_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_fu_446_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln44_1_fu_450_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_ln44_1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln57_fu_418_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_3_fu_479_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal or_ln44_3_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_2_fu_467_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln44_1_fu_487_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln44_4_fu_491_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mem_V_q0,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_575,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_580,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln19_fu_343_p2 = ap_const_lv1_1))) then 
                i_0_reg_137 <= i_reg_529;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_137 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_220_p2 = ap_const_lv1_0) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_149 <= ap_const_lv10_0;
            elsif (((m_axis_video_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_149 <= j_reg_570;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_220_p2 = ap_const_lv1_0) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln31_1_reg_534(18 downto 7) <= add_ln31_1_fu_256_p2(18 downto 7);
                    add_ln48_1_reg_544(18 downto 7) <= add_ln48_1_fu_302_p2(18 downto 7);
                and_ln44_2_reg_556 <= and_ln44_2_fu_324_p2;
                and_ln44_reg_550 <= and_ln44_fu_308_p2;
                or_ln44_reg_561 <= or_ln44_fu_329_p2;
                    zext_ln31_2_reg_539(18 downto 7) <= zext_ln31_2_fu_262_p1(18 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                and_ln879_1_reg_515 <= and_ln879_1_fu_202_p2;
                and_ln879_reg_509 <= and_ln879_fu_184_p2;
                icmp_ln879_reg_504 <= icmp_ln879_fu_160_p2;
                xor_ln879_2_reg_521 <= xor_ln879_2_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_529 <= i_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_570 <= j_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_last_V_reg_580 <= tmp_last_V_fu_387_p2;
                tmp_user_V_reg_575 <= tmp_user_V_fu_381_p2;
            end if;
        end if;
    end process;
    add_ln31_1_reg_534(6 downto 0) <= "0000000";
    zext_ln31_2_reg_539(6 downto 0) <= "0000000";
    zext_ln31_2_reg_539(19) <= '0';
    add_ln48_1_reg_544(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2, regslice_both_m_axis_video_V_data_V_U_apdone_blk, icmp_ln16_fu_220_p2, ap_CS_fsm_state3, icmp_ln19_fu_343_p2, m_axis_video_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_220_p2 = ap_const_lv1_1) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln16_fu_220_p2 = ap_const_lv1_0) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln19_fu_343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axis_video_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axis_video_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln31_1_fu_256_p2 <= std_logic_vector(unsigned(zext_ln31_1_fu_252_p1) + unsigned(zext_ln31_fu_240_p1));
    add_ln31_fu_393_p2 <= std_logic_vector(unsigned(add_ln31_1_reg_534) + unsigned(zext_ln19_fu_335_p1));
    add_ln48_1_fu_302_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_298_p1) + unsigned(zext_ln48_fu_286_p1));
    add_ln48_fu_413_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_544) + unsigned(zext_ln19_fu_335_p1));
    and_ln35_1_fu_434_p2 <= (xor_ln35_fu_428_p2 and and_ln879_reg_509);
    and_ln35_fu_423_p2 <= (icmp_ln35_fu_402_p2 and and_ln879_reg_509);
    and_ln44_1_fu_319_p2 <= (xor_ln44_fu_313_p2 and and_ln879_1_reg_515);
    and_ln44_2_fu_324_p2 <= (xor_ln879_2_reg_521 and icmp_ln44_fu_266_p2);
    and_ln44_fu_308_p2 <= (icmp_ln44_fu_266_p2 and and_ln879_1_reg_515);
    and_ln879_1_fu_202_p2 <= (xor_ln879_1_fu_196_p2 and icmp_ln879_2_fu_172_p2);
    and_ln879_fu_184_p2 <= (xor_ln879_fu_178_p2 and icmp_ln879_1_fu_166_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_both_m_axis_video_V_data_V_U_apdone_blk, icmp_ln16_fu_220_p2)
    begin
        if (((icmp_ln16_fu_220_p2 = ap_const_lv1_1) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_m_axis_video_V_data_V_U_apdone_blk, icmp_ln16_fu_220_p2)
    begin
        if (((icmp_ln16_fu_220_p2 = ap_const_lv1_1) and (regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_226_p2 <= std_logic_vector(unsigned(i_0_reg_137) + unsigned(ap_const_lv9_1));
    icmp_ln16_fu_220_p2 <= "1" when (i_0_reg_137 = ap_const_lv9_1E0) else "0";
    icmp_ln19_fu_343_p2 <= "1" when (j_0_reg_149 = ap_const_lv10_280) else "0";
    icmp_ln35_fu_402_p2 <= "1" when (unsigned(j_0_reg_149) < unsigned(ap_const_lv10_140)) else "0";
    icmp_ln44_fu_266_p2 <= "1" when (unsigned(i_0_reg_137) < unsigned(ap_const_lv9_F0)) else "0";
    icmp_ln879_1_fu_166_p2 <= "1" when (mode_V = ap_const_lv2_1) else "0";
    icmp_ln879_2_fu_172_p2 <= "1" when (mode_V = ap_const_lv2_2) else "0";
    icmp_ln879_fu_160_p2 <= "1" when (mode_V = ap_const_lv2_0) else "0";
    j_fu_349_p2 <= std_logic_vector(unsigned(j_0_reg_149) + unsigned(ap_const_lv10_1));

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, m_axis_video_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(ap_CS_fsm_state4, m_axis_video_TREADY_int)
    begin
        if (((m_axis_video_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    mem_V_address0 <= sext_ln44_fu_499_p1(19 - 1 downto 0);

    mem_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_V_ce0 <= ap_const_logic_1;
        else 
            mem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_359_p2 <= (trunc_ln21_fu_355_p1 or i_0_reg_137);
    or_ln44_1_fu_457_p2 <= (and_ln44_reg_550 or and_ln35_1_fu_434_p2);
    or_ln44_2_fu_462_p2 <= (icmp_ln879_reg_504 or and_ln35_fu_423_p2);
    or_ln44_3_fu_474_p2 <= (or_ln44_reg_561 or or_ln44_1_fu_457_p2);
    or_ln44_fu_329_p2 <= (and_ln44_2_fu_324_p2 or and_ln44_1_fu_319_p2);
    or_ln879_1_fu_208_p2 <= (or_ln879_fu_190_p2 or icmp_ln879_2_fu_172_p2);
    or_ln879_fu_190_p2 <= (icmp_ln879_fu_160_p2 or icmp_ln879_1_fu_166_p2);
    or_ln_fu_373_p3 <= (tmp_fu_365_p3 & or_ln21_fu_359_p2);
    select_ln44_1_fu_450_p3 <= 
        zext_ln35_fu_398_p1 when (and_ln44_reg_550(0) = '1') else 
        sub_ln39_fu_408_p2;
    select_ln44_2_fu_467_p3 <= 
        zext_ln44_fu_446_p1 when (or_ln44_reg_561(0) = '1') else 
        select_ln44_1_fu_450_p3;
    select_ln44_3_fu_479_p3 <= 
        add_ln31_fu_393_p2 when (or_ln44_2_fu_462_p2(0) = '1') else 
        sub_ln57_fu_418_p2;
    select_ln44_4_fu_491_p3 <= 
        select_ln44_2_fu_467_p3 when (or_ln44_3_fu_474_p2(0) = '1') else 
        zext_ln44_1_fu_487_p1;
    select_ln44_fu_439_p3 <= 
        add_ln31_fu_393_p2 when (and_ln44_2_reg_556(0) = '1') else 
        add_ln48_fu_413_p2;
        sext_ln44_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln44_4_fu_491_p3),64));

    shl_ln1_fu_278_p3 <= (sub_ln48_fu_272_p2 & ap_const_lv9_0);
    shl_ln31_1_fu_244_p3 <= (i_0_reg_137 & ap_const_lv7_0);
    shl_ln48_1_fu_290_p3 <= (sub_ln48_fu_272_p2 & ap_const_lv7_0);
    shl_ln_fu_232_p3 <= (i_0_reg_137 & ap_const_lv9_0);
    sub_ln39_fu_408_p2 <= std_logic_vector(unsigned(zext_ln31_2_reg_539) - unsigned(zext_ln19_1_fu_339_p1));
    sub_ln48_fu_272_p2 <= std_logic_vector(signed(ap_const_lv9_1E0) - signed(i_0_reg_137));
    sub_ln57_fu_418_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_544) - unsigned(zext_ln19_fu_335_p1));
    tmp_fu_365_p3 <= j_0_reg_149(9 downto 9);
    tmp_last_V_fu_387_p2 <= "1" when (j_0_reg_149 = ap_const_lv10_27F) else "0";
    tmp_user_V_fu_381_p2 <= "1" when (or_ln_fu_373_p3 = ap_const_lv10_0) else "0";
    trunc_ln21_fu_355_p1 <= j_0_reg_149(9 - 1 downto 0);
    xor_ln35_fu_428_p2 <= (icmp_ln35_fu_402_p2 xor ap_const_lv1_1);
    xor_ln44_fu_313_p2 <= (icmp_ln44_fu_266_p2 xor ap_const_lv1_1);
    xor_ln879_1_fu_196_p2 <= (or_ln879_fu_190_p2 xor ap_const_lv1_1);
    xor_ln879_2_fu_214_p2 <= (or_ln879_1_fu_208_p2 xor ap_const_lv1_1);
    xor_ln879_fu_178_p2 <= (icmp_ln879_fu_160_p2 xor ap_const_lv1_1);
    zext_ln19_1_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_149),20));
    zext_ln19_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_149),19));
    zext_ln31_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_1_fu_244_p3),19));
    zext_ln31_2_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_256_p2),20));
    zext_ln31_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_232_p3),19));
    zext_ln35_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_393_p2),20));
    zext_ln44_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_3_fu_479_p3),20));
    zext_ln44_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_fu_439_p3),20));
    zext_ln48_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln48_1_fu_290_p3),19));
    zext_ln48_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_278_p3),19));
end behav;
