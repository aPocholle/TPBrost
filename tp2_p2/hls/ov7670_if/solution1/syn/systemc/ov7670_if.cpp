// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ov7670_if.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ov7670_if::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ov7670_if::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ov7670_if::ap_ST_fsm_state1 = "1";
const sc_lv<32> ov7670_if::ap_const_lv32_0 = "00000000000000000000000000000000";
const int ov7670_if::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_if::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ov7670_if::C_M_AXI_GMEM_CACHE_VALUE = "11";
const sc_lv<1> ov7670_if::ap_const_lv1_0 = "0";
const sc_lv<8> ov7670_if::ap_const_lv8_0 = "00000000";
const sc_lv<3> ov7670_if::ap_const_lv3_0 = "000";
const sc_lv<2> ov7670_if::ap_const_lv2_0 = "00";
const sc_lv<4> ov7670_if::ap_const_lv4_0 = "0000";
const bool ov7670_if::ap_const_boolean_1 = true;

ov7670_if::ov7670_if(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_m_axi_gmem_ARADDR);

    SC_METHOD(thread_m_axi_gmem_ARBURST);

    SC_METHOD(thread_m_axi_gmem_ARCACHE);

    SC_METHOD(thread_m_axi_gmem_ARID);

    SC_METHOD(thread_m_axi_gmem_ARLEN);

    SC_METHOD(thread_m_axi_gmem_ARLOCK);

    SC_METHOD(thread_m_axi_gmem_ARPROT);

    SC_METHOD(thread_m_axi_gmem_ARQOS);

    SC_METHOD(thread_m_axi_gmem_ARREGION);

    SC_METHOD(thread_m_axi_gmem_ARSIZE);

    SC_METHOD(thread_m_axi_gmem_ARUSER);

    SC_METHOD(thread_m_axi_gmem_ARVALID);

    SC_METHOD(thread_m_axi_gmem_AWADDR);

    SC_METHOD(thread_m_axi_gmem_AWBURST);

    SC_METHOD(thread_m_axi_gmem_AWCACHE);

    SC_METHOD(thread_m_axi_gmem_AWID);

    SC_METHOD(thread_m_axi_gmem_AWLEN);

    SC_METHOD(thread_m_axi_gmem_AWLOCK);

    SC_METHOD(thread_m_axi_gmem_AWPROT);

    SC_METHOD(thread_m_axi_gmem_AWQOS);

    SC_METHOD(thread_m_axi_gmem_AWREGION);

    SC_METHOD(thread_m_axi_gmem_AWSIZE);

    SC_METHOD(thread_m_axi_gmem_AWUSER);

    SC_METHOD(thread_m_axi_gmem_AWVALID);

    SC_METHOD(thread_m_axi_gmem_BREADY);

    SC_METHOD(thread_m_axi_gmem_RREADY);

    SC_METHOD(thread_m_axi_gmem_WDATA);

    SC_METHOD(thread_m_axi_gmem_WID);

    SC_METHOD(thread_m_axi_gmem_WLAST);

    SC_METHOD(thread_m_axi_gmem_WSTRB);

    SC_METHOD(thread_m_axi_gmem_WUSER);

    SC_METHOD(thread_m_axi_gmem_WVALID);

    SC_METHOD(thread_video_in_V_read);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ov7670_if_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, video_in_V_dout, "(port)video_in_V_dout");
    sc_trace(mVcdFile, video_in_V_empty_n, "(port)video_in_V_empty_n");
    sc_trace(mVcdFile, video_in_V_read, "(port)video_in_V_read");
    sc_trace(mVcdFile, vsync_V, "(port)vsync_V");
    sc_trace(mVcdFile, href_V, "(port)href_V");
    sc_trace(mVcdFile, mem_ddr_V, "(port)mem_ddr_V");
    sc_trace(mVcdFile, hsize_in, "(port)hsize_in");
    sc_trace(mVcdFile, vsize_in, "(port)vsize_in");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ov7670_if.hdltvin.dat");
    mHdltvoutHandle.open("ov7670_if.hdltvout.dat");
}

ov7670_if::~ov7670_if() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ov7670_if::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void ov7670_if::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ov7670_if::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ov7670_if::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ov7670_if::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ov7670_if::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ov7670_if::thread_m_axi_gmem_ARADDR() {
    m_axi_gmem_ARADDR = ap_const_lv32_0;
}

void ov7670_if::thread_m_axi_gmem_ARBURST() {
    m_axi_gmem_ARBURST = ap_const_lv2_0;
}

void ov7670_if::thread_m_axi_gmem_ARCACHE() {
    m_axi_gmem_ARCACHE = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_ARID() {
    m_axi_gmem_ARID = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_ARLEN() {
    m_axi_gmem_ARLEN = ap_const_lv8_0;
}

void ov7670_if::thread_m_axi_gmem_ARLOCK() {
    m_axi_gmem_ARLOCK = ap_const_lv2_0;
}

void ov7670_if::thread_m_axi_gmem_ARPROT() {
    m_axi_gmem_ARPROT = ap_const_lv3_0;
}

void ov7670_if::thread_m_axi_gmem_ARQOS() {
    m_axi_gmem_ARQOS = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_ARREGION() {
    m_axi_gmem_ARREGION = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_ARSIZE() {
    m_axi_gmem_ARSIZE = ap_const_lv3_0;
}

void ov7670_if::thread_m_axi_gmem_ARUSER() {
    m_axi_gmem_ARUSER = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_ARVALID() {
    m_axi_gmem_ARVALID = ap_const_logic_0;
}

void ov7670_if::thread_m_axi_gmem_AWADDR() {
    m_axi_gmem_AWADDR = ap_const_lv32_0;
}

void ov7670_if::thread_m_axi_gmem_AWBURST() {
    m_axi_gmem_AWBURST = ap_const_lv2_0;
}

void ov7670_if::thread_m_axi_gmem_AWCACHE() {
    m_axi_gmem_AWCACHE = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_AWID() {
    m_axi_gmem_AWID = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_AWLEN() {
    m_axi_gmem_AWLEN = ap_const_lv8_0;
}

void ov7670_if::thread_m_axi_gmem_AWLOCK() {
    m_axi_gmem_AWLOCK = ap_const_lv2_0;
}

void ov7670_if::thread_m_axi_gmem_AWPROT() {
    m_axi_gmem_AWPROT = ap_const_lv3_0;
}

void ov7670_if::thread_m_axi_gmem_AWQOS() {
    m_axi_gmem_AWQOS = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_AWREGION() {
    m_axi_gmem_AWREGION = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_AWSIZE() {
    m_axi_gmem_AWSIZE = ap_const_lv3_0;
}

void ov7670_if::thread_m_axi_gmem_AWUSER() {
    m_axi_gmem_AWUSER = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_AWVALID() {
    m_axi_gmem_AWVALID = ap_const_logic_0;
}

void ov7670_if::thread_m_axi_gmem_BREADY() {
    m_axi_gmem_BREADY = ap_const_logic_0;
}

void ov7670_if::thread_m_axi_gmem_RREADY() {
    m_axi_gmem_RREADY = ap_const_logic_0;
}

void ov7670_if::thread_m_axi_gmem_WDATA() {
    m_axi_gmem_WDATA = ap_const_lv32_0;
}

void ov7670_if::thread_m_axi_gmem_WID() {
    m_axi_gmem_WID = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_WLAST() {
    m_axi_gmem_WLAST = ap_const_logic_0;
}

void ov7670_if::thread_m_axi_gmem_WSTRB() {
    m_axi_gmem_WSTRB = ap_const_lv4_0;
}

void ov7670_if::thread_m_axi_gmem_WUSER() {
    m_axi_gmem_WUSER = ap_const_lv1_0;
}

void ov7670_if::thread_m_axi_gmem_WVALID() {
    m_axi_gmem_WVALID = ap_const_logic_0;
}

void ov7670_if::thread_video_in_V_read() {
    video_in_V_read = ap_const_logic_0;
}

void ov7670_if::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void ov7670_if::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_V_dout\" :  \"" << video_in_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_V_empty_n\" :  \"" << video_in_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_in_V_read\" :  \"" << video_in_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsync_V\" :  \"" << vsync_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"href_V\" :  \"" << href_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_ddr_V\" :  \"" << mem_ddr_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hsize_in\" :  \"" << hsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsize_in\" :  \"" << vsize_in.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

