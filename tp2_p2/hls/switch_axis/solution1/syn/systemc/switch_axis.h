// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _switch_axis_HH_
#define _switch_axis_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct switch_axis : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > select_V;
    sc_in< sc_lv<8> > s0_axis_video_TDATA;
    sc_in< sc_logic > s0_axis_video_TVALID;
    sc_out< sc_logic > s0_axis_video_TREADY;
    sc_in< sc_lv<1> > s0_axis_video_TKEEP;
    sc_in< sc_lv<1> > s0_axis_video_TSTRB;
    sc_in< sc_lv<1> > s0_axis_video_TUSER;
    sc_in< sc_lv<1> > s0_axis_video_TLAST;
    sc_in< sc_lv<1> > s0_axis_video_TID;
    sc_in< sc_lv<1> > s0_axis_video_TDEST;
    sc_in< sc_lv<8> > s1_axis_video_TDATA;
    sc_in< sc_logic > s1_axis_video_TVALID;
    sc_out< sc_logic > s1_axis_video_TREADY;
    sc_in< sc_lv<1> > s1_axis_video_TKEEP;
    sc_in< sc_lv<1> > s1_axis_video_TSTRB;
    sc_in< sc_lv<1> > s1_axis_video_TUSER;
    sc_in< sc_lv<1> > s1_axis_video_TLAST;
    sc_in< sc_lv<1> > s1_axis_video_TID;
    sc_in< sc_lv<1> > s1_axis_video_TDEST;
    sc_out< sc_lv<8> > m_axis_video_TDATA;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_out< sc_lv<1> > m_axis_video_TKEEP;
    sc_out< sc_lv<1> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;
    sc_in< sc_lv<32> > hsize_in;
    sc_in< sc_lv<32> > vsize_in;


    // Module declarations
    switch_axis(sc_module_name name);
    SC_HAS_PROCESS(switch_axis);

    ~switch_axis();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_both<8>* regslice_both_s0_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_s0_axis_video_V_dest_V_U;
    regslice_both<8>* regslice_both_s1_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_s1_axis_video_V_dest_V_U;
    regslice_both<8>* regslice_both_m_axis_video_V_data_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_keep_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_dest_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > s0_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln13_fu_270_p2;
    sc_signal< sc_logic > s1_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > m_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln13_reg_346;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln13_reg_346_pp0_iter1_reg;
    sc_signal< sc_lv<64> > indvar_flatten_reg_161;
    sc_signal< sc_lv<64> > bound_fu_264_p2;
    sc_signal< sc_lv<64> > bound_reg_341;
    sc_signal< bool > ap_predicate_op47_read_state2;
    sc_signal< bool > ap_predicate_op56_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > add_ln13_fu_275_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_id_V_reg_172;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_id_V_reg_172;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_last_V_reg_184;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_last_V_reg_184;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_user_V_reg_196;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_user_V_reg_196;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_tmp_data_V_reg_232;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_tmp_data_V_reg_232;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_video_dest_V_reg_244;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_video_dest_V_reg_244;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bound_fu_264_p0;
    sc_signal< sc_lv<32> > bound_fu_264_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > s0_axis_video_TDATA_int;
    sc_signal< sc_logic > s0_axis_video_TVALID_int;
    sc_signal< sc_logic > s0_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TKEEP_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TSTRB_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TUSER_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TLAST_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TID_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s0_axis_video_TDEST_int;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s0_axis_video_V_dest_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > s1_axis_video_TDATA_int;
    sc_signal< sc_logic > s1_axis_video_TVALID_int;
    sc_signal< sc_logic > s1_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TKEEP_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TSTRB_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TUSER_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TLAST_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TID_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s1_axis_video_TDEST_int;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s1_axis_video_V_dest_V_U_ack_in;
    sc_signal< sc_logic > m_axis_video_TVALID_int;
    sc_signal< sc_logic > m_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_lv<64> > bound_fu_264_p00;
    sc_signal< sc_lv<64> > bound_fu_264_p10;
    sc_signal< bool > ap_condition_148;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_275_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_148();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_reg_pp0_iter0_tmp_data_V_reg_232();
    void thread_ap_phi_reg_pp0_iter0_tmp_id_V_reg_172();
    void thread_ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220();
    void thread_ap_phi_reg_pp0_iter0_tmp_last_V_reg_184();
    void thread_ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208();
    void thread_ap_phi_reg_pp0_iter0_tmp_user_V_reg_196();
    void thread_ap_phi_reg_pp0_iter0_video_dest_V_reg_244();
    void thread_ap_predicate_op47_read_state2();
    void thread_ap_predicate_op56_read_state2();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_bound_fu_264_p0();
    void thread_bound_fu_264_p00();
    void thread_bound_fu_264_p1();
    void thread_bound_fu_264_p10();
    void thread_bound_fu_264_p2();
    void thread_icmp_ln13_fu_270_p2();
    void thread_m_axis_video_TDATA_blk_n();
    void thread_m_axis_video_TVALID();
    void thread_m_axis_video_TVALID_int();
    void thread_s0_axis_video_TDATA_blk_n();
    void thread_s0_axis_video_TREADY();
    void thread_s0_axis_video_TREADY_int();
    void thread_s1_axis_video_TDATA_blk_n();
    void thread_s1_axis_video_TREADY();
    void thread_s1_axis_video_TREADY_int();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
