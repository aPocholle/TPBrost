// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="switch_axis,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=150,HLS_SYN_LUT=320,HLS_VERSION=2019_2}" *)

module switch_axis (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_V,
        s0_axis_video_TDATA,
        s0_axis_video_TVALID,
        s0_axis_video_TREADY,
        s0_axis_video_TKEEP,
        s0_axis_video_TSTRB,
        s0_axis_video_TUSER,
        s0_axis_video_TLAST,
        s0_axis_video_TID,
        s0_axis_video_TDEST,
        s1_axis_video_TDATA,
        s1_axis_video_TVALID,
        s1_axis_video_TREADY,
        s1_axis_video_TKEEP,
        s1_axis_video_TSTRB,
        s1_axis_video_TUSER,
        s1_axis_video_TLAST,
        s1_axis_video_TID,
        s1_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] select_V;
input  [7:0] s0_axis_video_TDATA;
input   s0_axis_video_TVALID;
output   s0_axis_video_TREADY;
input  [0:0] s0_axis_video_TKEEP;
input  [0:0] s0_axis_video_TSTRB;
input  [0:0] s0_axis_video_TUSER;
input  [0:0] s0_axis_video_TLAST;
input  [0:0] s0_axis_video_TID;
input  [0:0] s0_axis_video_TDEST;
input  [7:0] s1_axis_video_TDATA;
input   s1_axis_video_TVALID;
output   s1_axis_video_TREADY;
input  [0:0] s1_axis_video_TKEEP;
input  [0:0] s1_axis_video_TSTRB;
input  [0:0] s1_axis_video_TUSER;
input  [0:0] s1_axis_video_TLAST;
input  [0:0] s1_axis_video_TID;
input  [0:0] s1_axis_video_TDEST;
output  [7:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [0:0] m_axis_video_TKEEP;
output  [0:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s0_axis_video_TREADY;
reg s1_axis_video_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s0_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln13_fu_270_p2;
reg    s1_axis_video_TDATA_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln13_reg_346;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln13_reg_346_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_161;
wire   [63:0] bound_fu_264_p2;
reg   [63:0] bound_reg_341;
reg    ap_predicate_op47_read_state2;
reg    ap_predicate_op56_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln13_fu_275_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_id_V_reg_172;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_id_V_reg_172;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_last_V_reg_184;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_last_V_reg_184;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_user_V_reg_196;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_user_V_reg_196;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220;
wire   [7:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_232;
reg   [7:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_232;
wire   [0:0] ap_phi_reg_pp0_iter0_video_dest_V_reg_244;
reg   [0:0] ap_phi_reg_pp0_iter1_video_dest_V_reg_244;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_264_p0;
wire   [31:0] bound_fu_264_p1;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s0_axis_video_V_data_V_U_apdone_blk;
wire   [7:0] s0_axis_video_TDATA_int;
wire    s0_axis_video_TVALID_int;
reg    s0_axis_video_TREADY_int;
wire    regslice_both_s0_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_keep_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TKEEP_int;
wire    regslice_both_s0_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_strb_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TSTRB_int;
wire    regslice_both_s0_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TUSER_int;
wire    regslice_both_s0_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TLAST_int;
wire    regslice_both_s0_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TID_int;
wire    regslice_both_s0_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s0_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s0_axis_video_TDEST_int;
wire    regslice_both_s0_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s0_axis_video_V_dest_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_data_V_U_apdone_blk;
wire   [7:0] s1_axis_video_TDATA_int;
wire    s1_axis_video_TVALID_int;
reg    s1_axis_video_TREADY_int;
wire    regslice_both_s1_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_keep_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TKEEP_int;
wire    regslice_both_s1_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_strb_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TSTRB_int;
wire    regslice_both_s1_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TUSER_int;
wire    regslice_both_s1_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TLAST_int;
wire    regslice_both_s1_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TID_int;
wire    regslice_both_s1_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s1_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s1_axis_video_TDEST_int;
wire    regslice_both_s1_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s1_axis_video_V_dest_V_U_ack_in;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_264_p00;
wire   [63:0] bound_fu_264_p10;
reg    ap_condition_148;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

regslice_both #(
    .DataWidth( 8 ))
regslice_both_s0_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TDATA),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_data_V_U_ack_in),
    .data_out(s0_axis_video_TDATA_int),
    .vld_out(s0_axis_video_TVALID_int),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TKEEP),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_keep_V_U_ack_in),
    .data_out(s0_axis_video_TKEEP_int),
    .vld_out(regslice_both_s0_axis_video_V_keep_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TSTRB),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_strb_V_U_ack_in),
    .data_out(s0_axis_video_TSTRB_int),
    .vld_out(regslice_both_s0_axis_video_V_strb_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TUSER),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_user_V_U_ack_in),
    .data_out(s0_axis_video_TUSER_int),
    .vld_out(regslice_both_s0_axis_video_V_user_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TLAST),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_last_V_U_ack_in),
    .data_out(s0_axis_video_TLAST_int),
    .vld_out(regslice_both_s0_axis_video_V_last_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TID),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_id_V_U_ack_in),
    .data_out(s0_axis_video_TID_int),
    .vld_out(regslice_both_s0_axis_video_V_id_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s0_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s0_axis_video_TDEST),
    .vld_in(s0_axis_video_TVALID),
    .ack_in(regslice_both_s0_axis_video_V_dest_V_U_ack_in),
    .data_out(s0_axis_video_TDEST_int),
    .vld_out(regslice_both_s0_axis_video_V_dest_V_U_vld_out),
    .ack_out(s0_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s0_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_s1_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TDATA),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_data_V_U_ack_in),
    .data_out(s1_axis_video_TDATA_int),
    .vld_out(s1_axis_video_TVALID_int),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TKEEP),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_keep_V_U_ack_in),
    .data_out(s1_axis_video_TKEEP_int),
    .vld_out(regslice_both_s1_axis_video_V_keep_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TSTRB),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_strb_V_U_ack_in),
    .data_out(s1_axis_video_TSTRB_int),
    .vld_out(regslice_both_s1_axis_video_V_strb_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TUSER),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_user_V_U_ack_in),
    .data_out(s1_axis_video_TUSER_int),
    .vld_out(regslice_both_s1_axis_video_V_user_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TLAST),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_last_V_U_ack_in),
    .data_out(s1_axis_video_TLAST_int),
    .vld_out(regslice_both_s1_axis_video_V_last_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TID),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_id_V_U_ack_in),
    .data_out(s1_axis_video_TID_int),
    .vld_out(regslice_both_s1_axis_video_V_id_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s1_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s1_axis_video_TDEST),
    .vld_in(s1_axis_video_TVALID),
    .ack_in(regslice_both_s1_axis_video_V_dest_V_U_ack_in),
    .data_out(s1_axis_video_TDEST_int),
    .vld_out(regslice_both_s1_axis_video_V_dest_V_U_vld_out),
    .ack_out(s1_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s1_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_data_V_reg_232),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_user_V_reg_196),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_last_V_reg_184),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_tmp_id_V_reg_172),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_reg_pp0_iter1_video_dest_V_reg_244),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= s0_axis_video_TDATA_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= s1_axis_video_TDATA_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= s0_axis_video_TID_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= s1_axis_video_TID_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= s0_axis_video_TKEEP_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= s1_axis_video_TKEEP_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= s0_axis_video_TLAST_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= s1_axis_video_TLAST_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_184;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= s0_axis_video_TSTRB_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= s1_axis_video_TSTRB_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= s0_axis_video_TUSER_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= s1_axis_video_TUSER_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= s0_axis_video_TDEST_int;
        end else if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= s1_axis_video_TDEST_int;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= ap_phi_reg_pp0_iter0_video_dest_V_reg_244;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_161 <= add_ln13_fu_275_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_161 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_341 <= bound_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_346 <= icmp_ln13_fu_270_p2;
        icmp_ln13_reg_346_pp0_iter1_reg <= icmp_ln13_reg_346;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln13_reg_346_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln13_reg_346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s0_axis_video_TDATA_blk_n = s0_axis_video_TVALID_int;
    end else begin
        s0_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s0_axis_video_V_data_V_U_ack_in == 1'b1) & (s0_axis_video_TVALID == 1'b1))) begin
        s0_axis_video_TREADY = 1'b1;
    end else begin
        s0_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op47_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s0_axis_video_TREADY_int = 1'b1;
    end else begin
        s0_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s1_axis_video_TDATA_blk_n = s1_axis_video_TVALID_int;
    end else begin
        s1_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s1_axis_video_V_data_V_U_ack_in == 1'b1) & (s1_axis_video_TVALID == 1'b1))) begin
        s1_axis_video_TREADY = 1'b1;
    end else begin
        s1_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op56_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s1_axis_video_TREADY_int = 1'b1;
    end else begin
        s1_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln13_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln13_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_275_p2 = (indvar_flatten_reg_161 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((s1_axis_video_TVALID_int == 1'b0) & (ap_predicate_op56_read_state2 == 1'b1)) | ((s0_axis_video_TVALID_int == 1'b0) & (ap_predicate_op47_read_state2 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((s1_axis_video_TVALID_int == 1'b0) & (ap_predicate_op56_read_state2 == 1'b1)) | ((s0_axis_video_TVALID_int == 1'b0) & (ap_predicate_op47_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((s1_axis_video_TVALID_int == 1'b0) & (ap_predicate_op56_read_state2 == 1'b1)) | ((s0_axis_video_TVALID_int == 1'b0) & (ap_predicate_op47_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((s1_axis_video_TVALID_int == 1'b0) & (ap_predicate_op56_read_state2 == 1'b1)) | ((s0_axis_video_TVALID_int == 1'b0) & (ap_predicate_op47_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln13_reg_346 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln13_reg_346_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_148 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_data_V_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_id_V_reg_172 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_last_V_reg_184 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_user_V_reg_196 = 'bx;

assign ap_phi_reg_pp0_iter0_video_dest_V_reg_244 = 'bx;

always @ (*) begin
    ap_predicate_op47_read_state2 = ((select_V == 1'd0) & (icmp_ln13_fu_270_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op56_read_state2 = ((select_V == 1'd1) & (icmp_ln13_fu_270_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_264_p0 = bound_fu_264_p00;

assign bound_fu_264_p00 = hsize_in;

assign bound_fu_264_p1 = bound_fu_264_p10;

assign bound_fu_264_p10 = vsize_in;

assign bound_fu_264_p2 = (bound_fu_264_p0 * bound_fu_264_p1);

assign icmp_ln13_fu_270_p2 = ((indvar_flatten_reg_161 == bound_reg_341) ? 1'b1 : 1'b0);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

endmodule //switch_axis
