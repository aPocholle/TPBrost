-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity switch_axis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s0_axis_video_TVALID : IN STD_LOGIC;
    s0_axis_video_TREADY : OUT STD_LOGIC;
    s0_axis_video_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s0_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s1_axis_video_TVALID : IN STD_LOGIC;
    s1_axis_video_TREADY : OUT STD_LOGIC;
    s1_axis_video_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s1_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of switch_axis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "switch_axis,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=150,HLS_SYN_LUT=320,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s0_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s1_axis_video_TDATA_blk_n : STD_LOGIC;
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln13_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln13_reg_346_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_161 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op47_read_state2 : BOOLEAN;
    signal ap_predicate_op56_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln13_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_tmp_id_V_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_last_V_reg_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_user_V_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_video_dest_V_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_video_dest_V_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_264_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal s0_axis_video_TVALID_int : STD_LOGIC;
    signal s0_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TKEEP_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TSTRB_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s0_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s0_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s0_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal s1_axis_video_TVALID_int : STD_LOGIC;
    signal s1_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TKEEP_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TSTRB_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s1_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s1_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s1_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal bound_fu_264_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_264_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_148 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_s0_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TDATA,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_data_V_U_ack_in,
        data_out => s0_axis_video_TDATA_int,
        vld_out => s0_axis_video_TVALID_int,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TKEEP,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_keep_V_U_ack_in,
        data_out => s0_axis_video_TKEEP_int,
        vld_out => regslice_both_s0_axis_video_V_keep_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TSTRB,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_strb_V_U_ack_in,
        data_out => s0_axis_video_TSTRB_int,
        vld_out => regslice_both_s0_axis_video_V_strb_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TUSER,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_user_V_U_ack_in,
        data_out => s0_axis_video_TUSER_int,
        vld_out => regslice_both_s0_axis_video_V_user_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TLAST,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_last_V_U_ack_in,
        data_out => s0_axis_video_TLAST_int,
        vld_out => regslice_both_s0_axis_video_V_last_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TID,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_id_V_U_ack_in,
        data_out => s0_axis_video_TID_int,
        vld_out => regslice_both_s0_axis_video_V_id_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s0_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s0_axis_video_TDEST,
        vld_in => s0_axis_video_TVALID,
        ack_in => regslice_both_s0_axis_video_V_dest_V_U_ack_in,
        data_out => s0_axis_video_TDEST_int,
        vld_out => regslice_both_s0_axis_video_V_dest_V_U_vld_out,
        ack_out => s0_axis_video_TREADY_int,
        apdone_blk => regslice_both_s0_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TDATA,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_data_V_U_ack_in,
        data_out => s1_axis_video_TDATA_int,
        vld_out => s1_axis_video_TVALID_int,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TKEEP,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_keep_V_U_ack_in,
        data_out => s1_axis_video_TKEEP_int,
        vld_out => regslice_both_s1_axis_video_V_keep_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TSTRB,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_strb_V_U_ack_in,
        data_out => s1_axis_video_TSTRB_int,
        vld_out => regslice_both_s1_axis_video_V_strb_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TUSER,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_user_V_U_ack_in,
        data_out => s1_axis_video_TUSER_int,
        vld_out => regslice_both_s1_axis_video_V_user_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TLAST,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_last_V_U_ack_in,
        data_out => s1_axis_video_TLAST_int,
        vld_out => regslice_both_s1_axis_video_V_last_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TID,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_id_V_U_ack_in,
        data_out => s1_axis_video_TID_int,
        vld_out => regslice_both_s1_axis_video_V_id_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s1_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s1_axis_video_TDEST,
        vld_in => s1_axis_video_TVALID,
        ack_in => regslice_both_s1_axis_video_V_dest_V_U_ack_in,
        data_out => s1_axis_video_TDEST_int,
        vld_out => regslice_both_s1_axis_video_V_dest_V_U_vld_out,
        ack_out => s1_axis_video_TREADY_int,
        apdone_blk => regslice_both_s1_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_data_V_reg_232,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_user_V_reg_196,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_last_V_reg_184,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_tmp_id_V_reg_172,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_reg_pp0_iter1_video_dest_V_reg_244,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_tmp_data_V_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= s0_axis_video_TDATA_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= s1_axis_video_TDATA_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_data_V_reg_232 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_232;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_id_V_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= s0_axis_video_TID_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= s1_axis_video_TID_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_id_V_reg_172 <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_172;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= s0_axis_video_TKEEP_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= s1_axis_video_TKEEP_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_keep_V_reg_220 <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_last_V_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= s0_axis_video_TLAST_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= s1_axis_video_TLAST_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_last_V_reg_184 <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_184;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= s0_axis_video_TSTRB_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= s1_axis_video_TSTRB_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_strb_V_reg_208 <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_user_V_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= s0_axis_video_TUSER_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= s1_axis_video_TUSER_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_user_V_reg_196 <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_196;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_video_dest_V_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_148)) then
                if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= s0_axis_video_TDEST_int;
                elsif (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= s1_axis_video_TDEST_int;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_video_dest_V_reg_244 <= ap_phi_reg_pp0_iter0_video_dest_V_reg_244;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_161 <= add_ln13_fu_275_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_161 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_341 <= bound_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_346 <= icmp_ln13_fu_270_p2;
                icmp_ln13_reg_346_pp0_iter1_reg <= icmp_ln13_reg_346;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln13_fu_270_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln13_fu_275_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_161) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_predicate_op47_read_state2, ap_predicate_op56_read_state2, s0_axis_video_TVALID_int, s1_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((s1_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op56_read_state2 = ap_const_boolean_1)) or ((s0_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op47_read_state2 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op47_read_state2, ap_predicate_op56_read_state2, ap_block_state3_io, ap_block_state4_io, s0_axis_video_TVALID_int, s1_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((s1_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op56_read_state2 = ap_const_boolean_1)) or ((s0_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op47_read_state2 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op47_read_state2, ap_predicate_op56_read_state2, ap_block_state3_io, ap_block_state4_io, s0_axis_video_TVALID_int, s1_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((s1_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op56_read_state2 = ap_const_boolean_1)) or ((s0_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op47_read_state2 = ap_const_boolean_1)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(ap_predicate_op47_read_state2, ap_predicate_op56_read_state2, s0_axis_video_TVALID_int, s1_axis_video_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((s1_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op56_read_state2 = ap_const_boolean_1)) or ((s0_axis_video_TVALID_int = ap_const_logic_0) and (ap_predicate_op47_read_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln13_reg_346, m_axis_video_TREADY_int)
    begin
                ap_block_state3_io <= ((icmp_ln13_reg_346 = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln13_reg_346_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state4_io <= ((icmp_ln13_reg_346_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_148_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_148 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln13_fu_270_p2)
    begin
        if ((icmp_ln13_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_data_V_reg_232 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_id_V_reg_172 <= "X";
    ap_phi_reg_pp0_iter0_tmp_keep_V_reg_220 <= "X";
    ap_phi_reg_pp0_iter0_tmp_last_V_reg_184 <= "X";
    ap_phi_reg_pp0_iter0_tmp_strb_V_reg_208 <= "X";
    ap_phi_reg_pp0_iter0_tmp_user_V_reg_196 <= "X";
    ap_phi_reg_pp0_iter0_video_dest_V_reg_244 <= "X";

    ap_predicate_op47_read_state2_assign_proc : process(select_V, icmp_ln13_fu_270_p2)
    begin
                ap_predicate_op47_read_state2 <= ((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op56_read_state2_assign_proc : process(select_V, icmp_ln13_fu_270_p2)
    begin
                ap_predicate_op56_read_state2 <= ((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_264_p0 <= bound_fu_264_p00(32 - 1 downto 0);
    bound_fu_264_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_264_p1 <= bound_fu_264_p10(32 - 1 downto 0);
    bound_fu_264_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_264_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_264_p0) * unsigned(bound_fu_264_p1), 64));
    icmp_ln13_fu_270_p2 <= "1" when (indvar_flatten_reg_161 = bound_reg_341) else "0";

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_346, ap_enable_reg_pp0_iter2, icmp_ln13_reg_346_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
        if ((((icmp_ln13_reg_346_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln13_reg_346 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_346, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_reg_346 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    s0_axis_video_TDATA_blk_n_assign_proc : process(select_V, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln13_fu_270_p2, s0_axis_video_TVALID_int)
    begin
        if (((select_V = ap_const_lv1_0) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s0_axis_video_TDATA_blk_n <= s0_axis_video_TVALID_int;
        else 
            s0_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s0_axis_video_TREADY_assign_proc : process(s0_axis_video_TVALID, regslice_both_s0_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s0_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s0_axis_video_TVALID = ap_const_logic_1))) then 
            s0_axis_video_TREADY <= ap_const_logic_1;
        else 
            s0_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s0_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op47_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op47_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s0_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s0_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    s1_axis_video_TDATA_blk_n_assign_proc : process(select_V, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln13_fu_270_p2, s1_axis_video_TVALID_int)
    begin
        if (((select_V = ap_const_lv1_1) and (icmp_ln13_fu_270_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s1_axis_video_TDATA_blk_n <= s1_axis_video_TVALID_int;
        else 
            s1_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s1_axis_video_TREADY_assign_proc : process(s1_axis_video_TVALID, regslice_both_s1_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s1_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s1_axis_video_TVALID = ap_const_logic_1))) then 
            s1_axis_video_TREADY <= ap_const_logic_1;
        else 
            s1_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s1_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op56_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op56_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s1_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s1_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
