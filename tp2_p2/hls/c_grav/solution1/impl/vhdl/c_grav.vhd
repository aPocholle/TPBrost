-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity c_grav is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cg_on_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of c_grav is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "c_grav,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.533000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1829,HLS_SYN_LUT=1861,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010100";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cgy_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    signal cgx_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln19_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln19_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_497_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln19_reg_497_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_145 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_156 : STD_LOGIC_VECTOR (30 downto 0);
    signal nb_1_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_1_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_203 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_236_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln19_fu_256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln19_1_fu_276_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln19_1_reg_506 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_data_V_1_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_V_1_reg_512_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_519_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_524_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_534_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_539_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_544_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal cgx_2_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_2_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_358_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal nb_2_fu_379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_2_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal cgy_2_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_2_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_nb_1_phi_fu_171_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cgx_1_phi_fu_183_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cgy_1_phi_fu_195_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_data_V_phi_fu_218_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_reg_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_reg_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_1_fu_270_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln19_fu_262_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln25_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_1_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgx_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cgy_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_1_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond35_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg34_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs36_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_458_ap_start : STD_LOGIC;
    signal grp_fu_458_ap_done : STD_LOGIC;
    signal grp_fu_458_ce : STD_LOGIC;
    signal grp_fu_464_ap_start : STD_LOGIC;
    signal grp_fu_464_ap_done : STD_LOGIC;
    signal grp_fu_464_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal s_axis_video_TVALID_int : STD_LOGIC;
    signal s_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal bound_fu_236_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_236_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_238 : BOOLEAN;
    signal ap_condition_217 : BOOLEAN;

    component c_grav_udiv_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    c_grav_udiv_32ns_bkb_U1 : component c_grav_udiv_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_458_ap_start,
        done => grp_fu_458_ap_done,
        din0 => cgx_1_reg_179,
        din1 => nb_1_reg_167,
        ce => grp_fu_458_ce,
        dout => grp_fu_458_p2);

    c_grav_udiv_32ns_bkb_U2 : component c_grav_udiv_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_464_ap_start,
        done => grp_fu_464_ap_done,
        din0 => cgy_1_reg_191,
        din1 => nb_1_reg_167,
        ce => grp_fu_464_ce,
        dout => grp_fu_464_p2);

    regslice_both_s_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int,
        vld_out => s_axis_video_TVALID_int,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_tmp_data_V_phi_fu_218_p6,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_519_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_524_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_529_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_534_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_539_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_544_pp0_iter1_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_tmp_data_V_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_217)) then
                if (((icmp_ln32_fu_410_p2 = ap_const_lv1_0) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= tmp_data_V_1_reg_512;
                elsif ((ap_const_boolean_1 = ap_condition_238)) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= select_ln34_fu_452_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_214;
                end if;
            end if; 
        end if;
    end process;

    cgx_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then 
                cgx_1_reg_179 <= cgx_2_reg_555;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cgx_1_reg_179 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cgy_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
                cgy_1_reg_191 <= cgy_2_reg_577;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cgy_1_reg_191 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then 
                i_0_reg_156 <= select_ln19_1_reg_506;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_156 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_145 <= add_ln19_fu_256_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_145 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_203 <= j_fu_358_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_203 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    nb_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
                nb_1_reg_167 <= nb_2_reg_572;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nb_1_reg_167 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln26_reg_549 <= and_ln26_fu_328_p2;
                sub_ln32_reg_560 <= sub_ln32_fu_352_p2;
                tmp_data_V_1_reg_512 <= s_axis_video_TDATA_int;
                tmp_dest_V_reg_544 <= s_axis_video_TDEST_int;
                tmp_id_V_reg_539 <= s_axis_video_TID_int;
                tmp_keep_V_reg_519 <= s_axis_video_TKEEP_int;
                tmp_last_V_reg_534 <= s_axis_video_TLAST_int;
                tmp_strb_V_reg_524 <= s_axis_video_TSTRB_int;
                tmp_user_V_reg_529 <= s_axis_video_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_tmp_data_V_reg_214 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_492 <= bound_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cgx_2_reg_555 <= cgx_2_fu_340_p3;
                select_ln19_1_reg_506 <= select_ln19_1_fu_276_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                cgx_r <= grp_fu_458_p2;
                cgy_r <= grp_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then
                cgy_2_reg_577 <= cgy_2_fu_386_p3;
                nb_2_reg_572 <= nb_2_fu_379_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln19_reg_497 <= icmp_ln19_fu_251_p2;
                icmp_ln19_reg_497_pp0_iter1_reg <= icmp_ln19_reg_497;
                tmp_data_V_1_reg_512_pp0_iter1_reg <= tmp_data_V_1_reg_512;
                tmp_dest_V_reg_544_pp0_iter1_reg <= tmp_dest_V_reg_544;
                tmp_id_V_reg_539_pp0_iter1_reg <= tmp_id_V_reg_539;
                tmp_keep_V_reg_519_pp0_iter1_reg <= tmp_keep_V_reg_519;
                tmp_last_V_reg_534_pp0_iter1_reg <= tmp_last_V_reg_534;
                tmp_strb_V_reg_524_pp0_iter1_reg <= tmp_strb_V_reg_524;
                tmp_user_V_reg_529_pp0_iter1_reg <= tmp_user_V_reg_529;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln19_reg_497_pp0_iter2_reg <= icmp_ln19_reg_497_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then
                icmp_ln32_1_reg_586 <= icmp_ln32_1_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then
                icmp_ln32_reg_582 <= icmp_ln32_fu_410_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln19_fu_251_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln19_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln19_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abs36_fu_438_p3 <= 
        sub_ln32_1_fu_420_p2 when (abscond35_fu_432_p2(0) = '1') else 
        neg34_fu_426_p2;
    abs_fu_403_p3 <= 
        sub_ln32_reg_560 when (abscond_fu_398_p2(0) = '1') else 
        neg_fu_393_p2;
    abscond35_fu_432_p2 <= "1" when (signed(sub_ln32_1_fu_420_p2) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_398_p2 <= "1" when (signed(sub_ln32_reg_560) > signed(ap_const_lv32_0)) else "0";
    add_ln19_1_fu_270_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_160_p4) + unsigned(ap_const_lv31_1));
    add_ln19_fu_256_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_145) + unsigned(ap_const_lv64_1));
    and_ln26_fu_328_p2 <= (icmp_ln887_fu_322_p2 and icmp_ln25_fu_316_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state41 <= ap_CS_fsm(37);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_251_p2, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_251_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_251_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln19_fu_251_p2, s_axis_video_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln19_reg_497_pp0_iter1_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state4_io <= ((m_axis_video_TREADY_int = ap_const_logic_0) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln19_reg_497_pp0_iter2_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state5_io <= ((m_axis_video_TREADY_int = ap_const_logic_0) and (icmp_ln19_reg_497_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_217_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_217 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_238_assign_proc : process(icmp_ln19_reg_497, icmp_ln32_fu_410_p2, icmp_ln32_1_fu_446_p2)
    begin
                ap_condition_238 <= ((icmp_ln32_1_fu_446_p2 = ap_const_lv1_1) and (icmp_ln32_fu_410_p2 = ap_const_lv1_1) and (icmp_ln19_reg_497 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln19_fu_251_p2)
    begin
        if ((icmp_ln19_fu_251_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cgx_1_phi_fu_183_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln19_reg_497, cgx_1_reg_179, cgx_2_reg_555, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then 
            ap_phi_mux_cgx_1_phi_fu_183_p4 <= cgx_2_reg_555;
        else 
            ap_phi_mux_cgx_1_phi_fu_183_p4 <= cgx_1_reg_179;
        end if; 
    end process;


    ap_phi_mux_cgy_1_phi_fu_195_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln19_reg_497_pp0_iter1_reg, cgy_1_reg_191, cgy_2_reg_577)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_cgy_1_phi_fu_195_p4 <= cgy_2_reg_577;
        else 
            ap_phi_mux_cgy_1_phi_fu_195_p4 <= cgy_1_reg_191;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_160_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln19_reg_497, i_0_reg_156, select_ln19_1_reg_506, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln19_reg_497 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_160_p4 <= select_ln19_1_reg_506;
        else 
            ap_phi_mux_i_0_phi_fu_160_p4 <= i_0_reg_156;
        end if; 
    end process;


    ap_phi_mux_nb_1_phi_fu_171_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln19_reg_497_pp0_iter1_reg, nb_1_reg_167, nb_2_reg_572)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_nb_1_phi_fu_171_p4 <= nb_2_reg_572;
        else 
            ap_phi_mux_nb_1_phi_fu_171_p4 <= nb_1_reg_167;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_phi_fu_218_p6_assign_proc : process(icmp_ln19_reg_497_pp0_iter1_reg, tmp_data_V_1_reg_512_pp0_iter1_reg, icmp_ln32_reg_582, icmp_ln32_1_reg_586, ap_phi_reg_pp0_iter2_tmp_data_V_reg_214)
    begin
        if (((icmp_ln32_reg_582 = ap_const_lv1_1) and (icmp_ln32_1_reg_586 = ap_const_lv1_0) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_data_V_phi_fu_218_p6 <= tmp_data_V_1_reg_512_pp0_iter1_reg;
        else 
            ap_phi_mux_tmp_data_V_phi_fu_218_p6 <= ap_phi_reg_pp0_iter2_tmp_data_V_reg_214;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_data_V_reg_214 <= "XXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state41, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_236_p0 <= bound_fu_236_p00(32 - 1 downto 0);
    bound_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_236_p1 <= bound_fu_236_p10(32 - 1 downto 0);
    bound_fu_236_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_236_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_236_p0) * unsigned(bound_fu_236_p1), 64));
    cgx_2_fu_340_p3 <= 
        cgx_fu_334_p2 when (and_ln26_fu_328_p2(0) = '1') else 
        ap_phi_mux_cgx_1_phi_fu_183_p4;
    cgx_fu_334_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_284_p1) + unsigned(ap_phi_mux_cgx_1_phi_fu_183_p4));
    cgy_2_fu_386_p3 <= 
        cgy_fu_373_p2 when (and_ln26_reg_549(0) = '1') else 
        ap_phi_mux_cgy_1_phi_fu_195_p4;
    cgy_fu_373_p2 <= std_logic_vector(unsigned(ap_phi_mux_cgy_1_phi_fu_195_p4) + unsigned(zext_ln19_fu_364_p1));

    grp_fu_458_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_458_ap_start <= ap_const_logic_1;
        else 
            grp_fu_458_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_458_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_458_ce <= ap_const_logic_0;
        else 
            grp_fu_458_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_464_ap_start_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_464_ap_start <= ap_const_logic_1;
        else 
            grp_fu_464_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_464_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_464_ce <= ap_const_logic_0;
        else 
            grp_fu_464_ce <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln19_fu_251_p2 <= "1" when (indvar_flatten_reg_145 = bound_reg_492) else "0";
    icmp_ln22_fu_246_p2 <= "1" when (signed(zext_ln22_fu_242_p1) < signed(hsize_in)) else "0";
    icmp_ln25_fu_316_p2 <= "1" when (unsigned(select_ln19_fu_262_p3) > unsigned(ap_const_lv31_14)) else "0";
    icmp_ln32_1_fu_446_p2 <= "1" when (signed(abs36_fu_438_p3) < signed(ap_const_lv32_A)) else "0";
    icmp_ln32_fu_410_p2 <= "1" when (signed(abs_fu_403_p3) < signed(ap_const_lv32_A)) else "0";
    icmp_ln887_fu_322_p2 <= "1" when (unsigned(s_axis_video_TDATA_int) < unsigned(ap_const_lv8_50)) else "0";
    j_fu_358_p2 <= std_logic_vector(unsigned(select_ln19_fu_262_p3) + unsigned(ap_const_lv31_1));

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln19_reg_497_pp0_iter1_reg, ap_enable_reg_pp0_iter3, icmp_ln19_reg_497_pp0_iter2_reg, m_axis_video_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln19_reg_497_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln19_reg_497_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_497_pp0_iter1_reg = ap_const_lv1_0))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    nb_2_fu_379_p3 <= 
        nb_fu_367_p2 when (and_ln26_reg_549(0) = '1') else 
        ap_phi_mux_nb_1_phi_fu_171_p4;
    nb_fu_367_p2 <= std_logic_vector(unsigned(ap_phi_mux_nb_1_phi_fu_171_p4) + unsigned(ap_const_lv32_1));
    neg34_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln32_1_fu_420_p2));
    neg_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln32_reg_560));

    s_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln19_fu_251_p2, s_axis_video_TVALID_int)
    begin
        if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_TVALID_int;
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, regslice_both_s_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s_axis_video_TVALID = ap_const_logic_1))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln19_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln19_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_276_p3 <= 
        ap_phi_mux_i_0_phi_fu_160_p4 when (icmp_ln22_fu_246_p2(0) = '1') else 
        add_ln19_1_fu_270_p2;
    select_ln19_fu_262_p3 <= 
        j_0_reg_203 when (icmp_ln22_fu_246_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln34_fu_452_p3 <= 
        ap_const_lv8_FF when (cg_on_V(0) = '1') else 
        tmp_data_V_1_reg_512;
    sub_ln32_1_fu_420_p2 <= std_logic_vector(unsigned(cgy_r) - unsigned(zext_ln19_fu_364_p1));
    sub_ln32_fu_352_p2 <= std_logic_vector(unsigned(cgx_r) - unsigned(zext_ln19_1_fu_284_p1));
    zext_ln19_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_262_p3),32));
    zext_ln19_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_1_reg_506),32));
    zext_ln22_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_203),32));
end behav;
