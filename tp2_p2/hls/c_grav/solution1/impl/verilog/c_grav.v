// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="c_grav,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.533000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1829,HLS_SYN_LUT=1861,HLS_VERSION=2019_2}" *)

module c_grav (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cg_on_V,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_pp0_stage0 = 38'd2;
parameter    ap_ST_fsm_state6 = 38'd4;
parameter    ap_ST_fsm_state7 = 38'd8;
parameter    ap_ST_fsm_state8 = 38'd16;
parameter    ap_ST_fsm_state9 = 38'd32;
parameter    ap_ST_fsm_state10 = 38'd64;
parameter    ap_ST_fsm_state11 = 38'd128;
parameter    ap_ST_fsm_state12 = 38'd256;
parameter    ap_ST_fsm_state13 = 38'd512;
parameter    ap_ST_fsm_state14 = 38'd1024;
parameter    ap_ST_fsm_state15 = 38'd2048;
parameter    ap_ST_fsm_state16 = 38'd4096;
parameter    ap_ST_fsm_state17 = 38'd8192;
parameter    ap_ST_fsm_state18 = 38'd16384;
parameter    ap_ST_fsm_state19 = 38'd32768;
parameter    ap_ST_fsm_state20 = 38'd65536;
parameter    ap_ST_fsm_state21 = 38'd131072;
parameter    ap_ST_fsm_state22 = 38'd262144;
parameter    ap_ST_fsm_state23 = 38'd524288;
parameter    ap_ST_fsm_state24 = 38'd1048576;
parameter    ap_ST_fsm_state25 = 38'd2097152;
parameter    ap_ST_fsm_state26 = 38'd4194304;
parameter    ap_ST_fsm_state27 = 38'd8388608;
parameter    ap_ST_fsm_state28 = 38'd16777216;
parameter    ap_ST_fsm_state29 = 38'd33554432;
parameter    ap_ST_fsm_state30 = 38'd67108864;
parameter    ap_ST_fsm_state31 = 38'd134217728;
parameter    ap_ST_fsm_state32 = 38'd268435456;
parameter    ap_ST_fsm_state33 = 38'd536870912;
parameter    ap_ST_fsm_state34 = 38'd1073741824;
parameter    ap_ST_fsm_state35 = 38'd2147483648;
parameter    ap_ST_fsm_state36 = 38'd4294967296;
parameter    ap_ST_fsm_state37 = 38'd8589934592;
parameter    ap_ST_fsm_state38 = 38'd17179869184;
parameter    ap_ST_fsm_state39 = 38'd34359738368;
parameter    ap_ST_fsm_state40 = 38'd68719476736;
parameter    ap_ST_fsm_state41 = 38'd137438953472;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] cg_on_V;
input  [7:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [0:0] s_axis_video_TKEEP;
input  [0:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [0:0] m_axis_video_TKEEP;
output  [0:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] cgy_r;
reg   [31:0] cgx_r;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln19_fu_251_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln19_reg_497;
reg   [0:0] icmp_ln19_reg_497_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln19_reg_497_pp0_iter2_reg;
reg   [63:0] indvar_flatten_reg_145;
reg   [30:0] i_0_reg_156;
reg   [31:0] nb_1_reg_167;
reg   [31:0] cgx_1_reg_179;
reg   [31:0] cgy_1_reg_191;
reg   [30:0] j_0_reg_203;
wire   [63:0] bound_fu_236_p2;
reg   [63:0] bound_reg_492;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln19_fu_256_p2;
wire   [30:0] select_ln19_1_fu_276_p3;
reg   [30:0] select_ln19_1_reg_506;
reg   [7:0] tmp_data_V_1_reg_512;
reg   [7:0] tmp_data_V_1_reg_512_pp0_iter1_reg;
reg   [0:0] tmp_keep_V_reg_519;
reg   [0:0] tmp_keep_V_reg_519_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_524;
reg   [0:0] tmp_strb_V_reg_524_pp0_iter1_reg;
reg   [0:0] tmp_user_V_reg_529;
reg   [0:0] tmp_user_V_reg_529_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_534;
reg   [0:0] tmp_last_V_reg_534_pp0_iter1_reg;
reg   [0:0] tmp_id_V_reg_539;
reg   [0:0] tmp_id_V_reg_539_pp0_iter1_reg;
reg   [0:0] tmp_dest_V_reg_544;
reg   [0:0] tmp_dest_V_reg_544_pp0_iter1_reg;
wire   [0:0] and_ln26_fu_328_p2;
reg   [0:0] and_ln26_reg_549;
wire   [31:0] cgx_2_fu_340_p3;
reg   [31:0] cgx_2_reg_555;
wire   [31:0] sub_ln32_fu_352_p2;
reg   [31:0] sub_ln32_reg_560;
wire   [30:0] j_fu_358_p2;
wire   [31:0] nb_2_fu_379_p3;
reg   [31:0] nb_2_reg_572;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] cgy_2_fu_386_p3;
reg   [31:0] cgy_2_reg_577;
wire   [0:0] icmp_ln32_fu_410_p2;
reg   [0:0] icmp_ln32_reg_582;
wire   [0:0] icmp_ln32_1_fu_446_p2;
reg   [0:0] icmp_ln32_1_reg_586;
wire   [7:0] select_ln34_fu_452_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [30:0] ap_phi_mux_i_0_phi_fu_160_p4;
reg   [31:0] ap_phi_mux_nb_1_phi_fu_171_p4;
reg   [31:0] ap_phi_mux_cgx_1_phi_fu_183_p4;
reg   [31:0] ap_phi_mux_cgy_1_phi_fu_195_p4;
reg   [7:0] ap_phi_mux_tmp_data_V_phi_fu_218_p6;
wire   [7:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_214;
reg   [7:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_214;
reg   [7:0] ap_phi_reg_pp0_iter2_tmp_data_V_reg_214;
wire   [31:0] grp_fu_464_p2;
wire    ap_CS_fsm_state41;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
wire   [31:0] grp_fu_458_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_236_p0;
wire   [31:0] bound_fu_236_p1;
wire   [31:0] zext_ln22_fu_242_p1;
wire   [0:0] icmp_ln22_fu_246_p2;
wire   [30:0] add_ln19_1_fu_270_p2;
wire   [30:0] select_ln19_fu_262_p3;
wire   [0:0] icmp_ln25_fu_316_p2;
wire   [0:0] icmp_ln887_fu_322_p2;
wire   [31:0] zext_ln19_1_fu_284_p1;
wire   [31:0] cgx_fu_334_p2;
wire   [31:0] zext_ln19_fu_364_p1;
wire   [31:0] nb_fu_367_p2;
wire   [31:0] cgy_fu_373_p2;
wire   [0:0] abscond_fu_398_p2;
wire   [31:0] neg_fu_393_p2;
wire   [31:0] abs_fu_403_p3;
wire   [31:0] sub_ln32_1_fu_420_p2;
wire   [0:0] abscond35_fu_432_p2;
wire   [31:0] neg34_fu_426_p2;
wire   [31:0] abs36_fu_438_p3;
wire    ap_CS_fsm_state6;
reg    grp_fu_458_ap_start;
wire    grp_fu_458_ap_done;
reg    grp_fu_458_ce;
reg    grp_fu_464_ap_start;
wire    grp_fu_464_ap_done;
reg    grp_fu_464_ce;
reg   [37:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [7:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [0:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [0:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_236_p00;
wire   [63:0] bound_fu_236_p10;
reg    ap_condition_238;
reg    ap_condition_217;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 cgy_r = 32'd240;
#0 cgx_r = 32'd320;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

c_grav_udiv_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
c_grav_udiv_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_458_ap_start),
    .done(grp_fu_458_ap_done),
    .din0(cgx_1_reg_179),
    .din1(nb_1_reg_167),
    .ce(grp_fu_458_ce),
    .dout(grp_fu_458_p2)
);

c_grav_udiv_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
c_grav_udiv_32ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_464_ap_start),
    .done(grp_fu_464_ap_done),
    .din0(cgy_1_reg_191),
    .din1(nb_1_reg_167),
    .ce(grp_fu_464_ce),
    .dout(grp_fu_464_p2)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_tmp_data_V_phi_fu_218_p6),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_519_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_524_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_529_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_534_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_539_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_544_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_217)) begin
        if (((icmp_ln32_fu_410_p2 == 1'd0) & (icmp_ln19_reg_497 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= tmp_data_V_1_reg_512;
        end else if ((1'b1 == ap_condition_238)) begin
            ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= select_ln34_fu_452_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_tmp_data_V_reg_214 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_214;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497 == 1'd0))) begin
        cgx_1_reg_179 <= cgx_2_reg_555;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cgx_1_reg_179 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        cgy_1_reg_191 <= cgy_2_reg_577;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cgy_1_reg_191 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497 == 1'd0))) begin
        i_0_reg_156 <= select_ln19_1_reg_506;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_156 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_145 <= add_ln19_fu_256_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_145 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_203 <= j_fu_358_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_203 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        nb_1_reg_167 <= nb_2_reg_572;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nb_1_reg_167 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln26_reg_549 <= and_ln26_fu_328_p2;
        sub_ln32_reg_560 <= sub_ln32_fu_352_p2;
        tmp_data_V_1_reg_512 <= s_axis_video_TDATA_int;
        tmp_dest_V_reg_544 <= s_axis_video_TDEST_int;
        tmp_id_V_reg_539 <= s_axis_video_TID_int;
        tmp_keep_V_reg_519 <= s_axis_video_TKEEP_int;
        tmp_last_V_reg_534 <= s_axis_video_TLAST_int;
        tmp_strb_V_reg_524 <= s_axis_video_TSTRB_int;
        tmp_user_V_reg_529 <= s_axis_video_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_tmp_data_V_reg_214 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_492 <= bound_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cgx_2_reg_555 <= cgx_2_fu_340_p3;
        select_ln19_1_reg_506 <= select_ln19_1_fu_276_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        cgx_r <= grp_fu_458_p2;
        cgy_r <= grp_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497 == 1'd0))) begin
        cgy_2_reg_577 <= cgy_2_fu_386_p3;
        nb_2_reg_572 <= nb_2_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln19_reg_497 <= icmp_ln19_fu_251_p2;
        icmp_ln19_reg_497_pp0_iter1_reg <= icmp_ln19_reg_497;
        tmp_data_V_1_reg_512_pp0_iter1_reg <= tmp_data_V_1_reg_512;
        tmp_dest_V_reg_544_pp0_iter1_reg <= tmp_dest_V_reg_544;
        tmp_id_V_reg_539_pp0_iter1_reg <= tmp_id_V_reg_539;
        tmp_keep_V_reg_519_pp0_iter1_reg <= tmp_keep_V_reg_519;
        tmp_last_V_reg_534_pp0_iter1_reg <= tmp_last_V_reg_534;
        tmp_strb_V_reg_524_pp0_iter1_reg <= tmp_strb_V_reg_524;
        tmp_user_V_reg_529_pp0_iter1_reg <= tmp_user_V_reg_529;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln19_reg_497_pp0_iter2_reg <= icmp_ln19_reg_497_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_410_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497 == 1'd0))) begin
        icmp_ln32_1_reg_586 <= icmp_ln32_1_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497 == 1'd0))) begin
        icmp_ln32_reg_582 <= icmp_ln32_fu_410_p2;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_251_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_reg_497 == 1'd0))) begin
        ap_phi_mux_cgx_1_phi_fu_183_p4 = cgx_2_reg_555;
    end else begin
        ap_phi_mux_cgx_1_phi_fu_183_p4 = cgx_1_reg_179;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_cgy_1_phi_fu_195_p4 = cgy_2_reg_577;
    end else begin
        ap_phi_mux_cgy_1_phi_fu_195_p4 = cgy_1_reg_191;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_reg_497 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_160_p4 = select_ln19_1_reg_506;
    end else begin
        ap_phi_mux_i_0_phi_fu_160_p4 = i_0_reg_156;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_nb_1_phi_fu_171_p4 = nb_2_reg_572;
    end else begin
        ap_phi_mux_nb_1_phi_fu_171_p4 = nb_1_reg_167;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_582 == 1'd1) & (icmp_ln32_1_reg_586 == 1'd0) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tmp_data_V_phi_fu_218_p6 = tmp_data_V_1_reg_512_pp0_iter1_reg;
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_218_p6 = ap_phi_reg_pp0_iter2_tmp_data_V_reg_214;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_458_ap_start = 1'b1;
    end else begin
        grp_fu_458_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_458_ce = 1'b0;
    end else begin
        grp_fu_458_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_464_ap_start = 1'b1;
    end else begin
        grp_fu_464_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_464_ce = 1'b0;
    end else begin
        grp_fu_464_ce = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln19_reg_497_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln19_fu_251_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln19_fu_251_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs36_fu_438_p3 = ((abscond35_fu_432_p2[0:0] === 1'b1) ? sub_ln32_1_fu_420_p2 : neg34_fu_426_p2);

assign abs_fu_403_p3 = ((abscond_fu_398_p2[0:0] === 1'b1) ? sub_ln32_reg_560 : neg_fu_393_p2);

assign abscond35_fu_432_p2 = (($signed(sub_ln32_1_fu_420_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_398_p2 = (($signed(sub_ln32_reg_560) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln19_1_fu_270_p2 = (ap_phi_mux_i_0_phi_fu_160_p4 + 31'd1);

assign add_ln19_fu_256_p2 = (indvar_flatten_reg_145 + 64'd1);

assign and_ln26_fu_328_p2 = (icmp_ln887_fu_322_p2 & icmp_ln25_fu_316_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln19_fu_251_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln19_fu_251_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln19_fu_251_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln19_fu_251_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axis_video_TREADY_int == 1'b0) & (icmp_ln19_reg_497_pp0_iter1_reg == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axis_video_TREADY_int == 1'b0) & (icmp_ln19_reg_497_pp0_iter2_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_217 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_238 = ((icmp_ln32_1_fu_446_p2 == 1'd1) & (icmp_ln32_fu_410_p2 == 1'd1) & (icmp_ln19_reg_497 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_data_V_reg_214 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_236_p0 = bound_fu_236_p00;

assign bound_fu_236_p00 = hsize_in;

assign bound_fu_236_p1 = bound_fu_236_p10;

assign bound_fu_236_p10 = vsize_in;

assign bound_fu_236_p2 = (bound_fu_236_p0 * bound_fu_236_p1);

assign cgx_2_fu_340_p3 = ((and_ln26_fu_328_p2[0:0] === 1'b1) ? cgx_fu_334_p2 : ap_phi_mux_cgx_1_phi_fu_183_p4);

assign cgx_fu_334_p2 = (zext_ln19_1_fu_284_p1 + ap_phi_mux_cgx_1_phi_fu_183_p4);

assign cgy_2_fu_386_p3 = ((and_ln26_reg_549[0:0] === 1'b1) ? cgy_fu_373_p2 : ap_phi_mux_cgy_1_phi_fu_195_p4);

assign cgy_fu_373_p2 = (ap_phi_mux_cgy_1_phi_fu_195_p4 + zext_ln19_fu_364_p1);

assign icmp_ln19_fu_251_p2 = ((indvar_flatten_reg_145 == bound_reg_492) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_246_p2 = (($signed(zext_ln22_fu_242_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_316_p2 = ((select_ln19_fu_262_p3 > 31'd20) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_446_p2 = (($signed(abs36_fu_438_p3) < $signed(32'd10)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_410_p2 = (($signed(abs_fu_403_p3) < $signed(32'd10)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_322_p2 = ((s_axis_video_TDATA_int < 8'd80) ? 1'b1 : 1'b0);

assign j_fu_358_p2 = (select_ln19_fu_262_p3 + 31'd1);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign nb_2_fu_379_p3 = ((and_ln26_reg_549[0:0] === 1'b1) ? nb_fu_367_p2 : ap_phi_mux_nb_1_phi_fu_171_p4);

assign nb_fu_367_p2 = (ap_phi_mux_nb_1_phi_fu_171_p4 + 32'd1);

assign neg34_fu_426_p2 = (32'd0 - sub_ln32_1_fu_420_p2);

assign neg_fu_393_p2 = (32'd0 - sub_ln32_reg_560);

assign select_ln19_1_fu_276_p3 = ((icmp_ln22_fu_246_p2[0:0] === 1'b1) ? ap_phi_mux_i_0_phi_fu_160_p4 : add_ln19_1_fu_270_p2);

assign select_ln19_fu_262_p3 = ((icmp_ln22_fu_246_p2[0:0] === 1'b1) ? j_0_reg_203 : 31'd0);

assign select_ln34_fu_452_p3 = ((cg_on_V[0:0] === 1'b1) ? 8'd255 : tmp_data_V_1_reg_512);

assign sub_ln32_1_fu_420_p2 = (cgy_r - zext_ln19_fu_364_p1);

assign sub_ln32_fu_352_p2 = (cgx_r - zext_ln19_1_fu_284_p1);

assign zext_ln19_1_fu_284_p1 = select_ln19_fu_262_p3;

assign zext_ln19_fu_364_p1 = select_ln19_1_reg_506;

assign zext_ln22_fu_242_p1 = j_0_reg_203;

endmodule //c_grav
