// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axis_to_aximm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_to_aximm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_to_aximm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state1 = "1";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state2 = "10";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state3 = "100";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state4 = "1000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_pp0_stage0 = "10000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state8 = "100000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state9 = "1000000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state10 = "10000000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state11 = "100000000";
const sc_lv<10> axis_to_aximm::ap_ST_fsm_state12 = "1000000000";
const sc_lv<32> axis_to_aximm::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axis_to_aximm::ap_const_boolean_1 = true;
const sc_lv<32> axis_to_aximm::ap_const_lv32_3 = "11";
const bool axis_to_aximm::ap_const_boolean_0 = false;
const sc_lv<1> axis_to_aximm::ap_const_lv1_0 = "0";
const sc_lv<32> axis_to_aximm::ap_const_lv32_9 = "1001";
const sc_lv<32> axis_to_aximm::ap_const_lv32_2 = "10";
const sc_lv<1> axis_to_aximm::ap_const_lv1_1 = "1";
const int axis_to_aximm::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_aximm::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_aximm::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int axis_to_aximm::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> axis_to_aximm::ap_const_lv32_1 = "1";
const sc_lv<32> axis_to_aximm::ap_const_lv32_4 = "100";
const sc_lv<31> axis_to_aximm::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<3> axis_to_aximm::ap_const_lv3_0 = "000";
const sc_lv<2> axis_to_aximm::ap_const_lv2_0 = "00";
const sc_lv<4> axis_to_aximm::ap_const_lv4_0 = "0000";
const sc_lv<31> axis_to_aximm::ap_const_lv31_1 = "1";

axis_to_aximm::axis_to_aximm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axis_to_aximm_gmem_m_axi_U = new axis_to_aximm_gmem_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("axis_to_aximm_gmem_m_axi_U");
    axis_to_aximm_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    axis_to_aximm_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    axis_to_aximm_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    axis_to_aximm_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    axis_to_aximm_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    axis_to_aximm_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    axis_to_aximm_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    axis_to_aximm_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    axis_to_aximm_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    axis_to_aximm_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    axis_to_aximm_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    axis_to_aximm_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    axis_to_aximm_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    axis_to_aximm_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    axis_to_aximm_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    axis_to_aximm_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    axis_to_aximm_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    axis_to_aximm_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    axis_to_aximm_gmem_m_axi_U->WID(m_axi_gmem_WID);
    axis_to_aximm_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    axis_to_aximm_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    axis_to_aximm_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    axis_to_aximm_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    axis_to_aximm_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    axis_to_aximm_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    axis_to_aximm_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    axis_to_aximm_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    axis_to_aximm_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    axis_to_aximm_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    axis_to_aximm_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    axis_to_aximm_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    axis_to_aximm_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    axis_to_aximm_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    axis_to_aximm_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    axis_to_aximm_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    axis_to_aximm_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    axis_to_aximm_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    axis_to_aximm_gmem_m_axi_U->RID(m_axi_gmem_RID);
    axis_to_aximm_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    axis_to_aximm_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    axis_to_aximm_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    axis_to_aximm_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    axis_to_aximm_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    axis_to_aximm_gmem_m_axi_U->BID(m_axi_gmem_BID);
    axis_to_aximm_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    axis_to_aximm_gmem_m_axi_U->ACLK(ap_clk);
    axis_to_aximm_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    axis_to_aximm_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    axis_to_aximm_gmem_m_axi_U->I_ARVALID(ap_var_for_const1);
    axis_to_aximm_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    axis_to_aximm_gmem_m_axi_U->I_ARADDR(ap_var_for_const2);
    axis_to_aximm_gmem_m_axi_U->I_ARID(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    axis_to_aximm_gmem_m_axi_U->I_ARSIZE(ap_var_for_const4);
    axis_to_aximm_gmem_m_axi_U->I_ARLOCK(ap_var_for_const5);
    axis_to_aximm_gmem_m_axi_U->I_ARCACHE(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_ARQOS(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_ARPROT(ap_var_for_const4);
    axis_to_aximm_gmem_m_axi_U->I_ARUSER(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_ARBURST(ap_var_for_const5);
    axis_to_aximm_gmem_m_axi_U->I_ARREGION(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    axis_to_aximm_gmem_m_axi_U->I_RREADY(ap_var_for_const1);
    axis_to_aximm_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    axis_to_aximm_gmem_m_axi_U->I_RID(gmem_RID);
    axis_to_aximm_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    axis_to_aximm_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    axis_to_aximm_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    axis_to_aximm_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    axis_to_aximm_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    axis_to_aximm_gmem_m_axi_U->I_AWADDR(gmem_addr_reg_326);
    axis_to_aximm_gmem_m_axi_U->I_AWID(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_AWLEN(hsize_in);
    axis_to_aximm_gmem_m_axi_U->I_AWSIZE(ap_var_for_const4);
    axis_to_aximm_gmem_m_axi_U->I_AWLOCK(ap_var_for_const5);
    axis_to_aximm_gmem_m_axi_U->I_AWCACHE(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_AWQOS(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_AWPROT(ap_var_for_const4);
    axis_to_aximm_gmem_m_axi_U->I_AWUSER(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_AWBURST(ap_var_for_const5);
    axis_to_aximm_gmem_m_axi_U->I_AWREGION(ap_var_for_const6);
    axis_to_aximm_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    axis_to_aximm_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    axis_to_aximm_gmem_m_axi_U->I_WDATA(mem_locale_V_load_reg_346);
    axis_to_aximm_gmem_m_axi_U->I_WID(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_WUSER(ap_var_for_const3);
    axis_to_aximm_gmem_m_axi_U->I_WLAST(ap_var_for_const1);
    axis_to_aximm_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    axis_to_aximm_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    axis_to_aximm_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    axis_to_aximm_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    axis_to_aximm_gmem_m_axi_U->I_BID(gmem_BID);
    axis_to_aximm_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    mem_locale_V_U = new axis_to_aximm_membkb("mem_locale_V_U");
    mem_locale_V_U->clk(ap_clk);
    mem_locale_V_U->reset(ap_rst_n_inv);
    mem_locale_V_U->address0(mem_locale_V_address0);
    mem_locale_V_U->ce0(mem_locale_V_ce0);
    mem_locale_V_U->we0(mem_locale_V_we0);
    mem_locale_V_U->d0(s_axis_video_TDATA_int);
    mem_locale_V_U->q0(mem_locale_V_q0);
    regslice_both_s_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_s_axis_video_V_data_V_U");
    regslice_both_s_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_data_V_U->data_in(s_axis_video_TDATA);
    regslice_both_s_axis_video_V_data_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_data_V_U->ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in);
    regslice_both_s_axis_video_V_data_V_U->data_out(s_axis_video_TDATA_int);
    regslice_both_s_axis_video_V_data_V_U->vld_out(s_axis_video_TVALID_int);
    regslice_both_s_axis_video_V_data_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_data_V_U->apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk);
    regslice_both_s_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_keep_V_U");
    regslice_both_s_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_keep_V_U->data_in(s_axis_video_TKEEP);
    regslice_both_s_axis_video_V_keep_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_keep_V_U->ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in);
    regslice_both_s_axis_video_V_keep_V_U->data_out(s_axis_video_TKEEP_int);
    regslice_both_s_axis_video_V_keep_V_U->vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out);
    regslice_both_s_axis_video_V_keep_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_keep_V_U->apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_s_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_strb_V_U");
    regslice_both_s_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_strb_V_U->data_in(s_axis_video_TSTRB);
    regslice_both_s_axis_video_V_strb_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_strb_V_U->ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in);
    regslice_both_s_axis_video_V_strb_V_U->data_out(s_axis_video_TSTRB_int);
    regslice_both_s_axis_video_V_strb_V_U->vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out);
    regslice_both_s_axis_video_V_strb_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_strb_V_U->apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_s_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_user_V_U");
    regslice_both_s_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_user_V_U->data_in(s_axis_video_TUSER);
    regslice_both_s_axis_video_V_user_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_user_V_U->ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in);
    regslice_both_s_axis_video_V_user_V_U->data_out(s_axis_video_TUSER_int);
    regslice_both_s_axis_video_V_user_V_U->vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out);
    regslice_both_s_axis_video_V_user_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_user_V_U->apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk);
    regslice_both_s_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_last_V_U");
    regslice_both_s_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_last_V_U->data_in(s_axis_video_TLAST);
    regslice_both_s_axis_video_V_last_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_last_V_U->ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in);
    regslice_both_s_axis_video_V_last_V_U->data_out(s_axis_video_TLAST_int);
    regslice_both_s_axis_video_V_last_V_U->vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out);
    regslice_both_s_axis_video_V_last_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_last_V_U->apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk);
    regslice_both_s_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_id_V_U");
    regslice_both_s_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_id_V_U->data_in(s_axis_video_TID);
    regslice_both_s_axis_video_V_id_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_id_V_U->ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in);
    regslice_both_s_axis_video_V_id_V_U->data_out(s_axis_video_TID_int);
    regslice_both_s_axis_video_V_id_V_U->vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out);
    regslice_both_s_axis_video_V_id_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_id_V_U->apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk);
    regslice_both_s_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_dest_V_U");
    regslice_both_s_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_dest_V_U->data_in(s_axis_video_TDEST);
    regslice_both_s_axis_video_V_dest_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_dest_V_U->ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in);
    regslice_both_s_axis_video_V_dest_V_U->data_out(s_axis_video_TDEST_int);
    regslice_both_s_axis_video_V_dest_V_U->vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out);
    regslice_both_s_axis_video_V_dest_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_dest_V_U->apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln15_fu_207_p2);
    sensitive << ( hsize_in );
    sensitive << ( phi_mul_reg_169 );

    SC_METHOD(thread_add_ln29_1_fu_256_p2);
    sensitive << ( p_cast_reg_300 );
    sensitive << ( sext_ln29_fu_252_p1 );

    SC_METHOD(thread_add_ln29_fu_276_p2);
    sensitive << ( phi_ln29_reg_192 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( icmp_ln29_reg_332_pp0_iter1_reg );
    sensitive << ( gmem_WREADY );

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state5);
    sensitive << ( icmp_ln29_fu_271_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_216_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_216_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln29_reg_332_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln29_reg_332_pp0_iter1_reg );

    SC_METHOD(thread_i_fu_221_p2);
    sensitive << ( i_0_reg_158 );

    SC_METHOD(thread_icmp_ln15_fu_216_p2);
    sensitive << ( vsize_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln15_fu_212_p1 );

    SC_METHOD(thread_icmp_ln18_fu_231_p2);
    sensitive << ( hsize_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( zext_ln18_fu_227_p1 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_icmp_ln29_fu_271_p2);
    sensitive << ( hsize_in );
    sensitive << ( phi_ln29_reg_192 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_fu_236_p2);
    sensitive << ( j_0_reg_181 );

    SC_METHOD(thread_mem_locale_V_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln22_fu_247_p1 );
    sensitive << ( sext_ln29_1_fu_282_p1 );

    SC_METHOD(thread_mem_locale_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_mem_locale_V_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_p_cast_fu_203_p1);
    sensitive << ( mem_ddr_V );

    SC_METHOD(thread_s_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_s_axis_video_TREADY);
    sensitive << ( s_axis_video_TVALID );
    sensitive << ( regslice_both_s_axis_video_V_data_V_U_ack_in );

    SC_METHOD(thread_s_axis_video_TREADY_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_sext_ln29_1_fu_282_p1);
    sensitive << ( phi_ln29_reg_192 );

    SC_METHOD(thread_sext_ln29_2_fu_261_p1);
    sensitive << ( add_ln29_1_fu_256_p2 );

    SC_METHOD(thread_sext_ln29_fu_252_p1);
    sensitive << ( phi_mul_reg_169 );

    SC_METHOD(thread_zext_ln15_fu_212_p1);
    sensitive << ( i_0_reg_158 );

    SC_METHOD(thread_zext_ln18_fu_227_p1);
    sensitive << ( j_0_reg_181 );

    SC_METHOD(thread_zext_ln22_fu_247_p1);
    sensitive << ( j_0_reg_181 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln18_fu_231_p2 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_271_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( icmp_ln15_fu_216_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_to_aximm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axis_video_TDATA, "(port)s_axis_video_TDATA");
    sc_trace(mVcdFile, s_axis_video_TVALID, "(port)s_axis_video_TVALID");
    sc_trace(mVcdFile, s_axis_video_TREADY, "(port)s_axis_video_TREADY");
    sc_trace(mVcdFile, s_axis_video_TKEEP, "(port)s_axis_video_TKEEP");
    sc_trace(mVcdFile, s_axis_video_TSTRB, "(port)s_axis_video_TSTRB");
    sc_trace(mVcdFile, s_axis_video_TUSER, "(port)s_axis_video_TUSER");
    sc_trace(mVcdFile, s_axis_video_TLAST, "(port)s_axis_video_TLAST");
    sc_trace(mVcdFile, s_axis_video_TID, "(port)s_axis_video_TID");
    sc_trace(mVcdFile, s_axis_video_TDEST, "(port)s_axis_video_TDEST");
    sc_trace(mVcdFile, mem_ddr_V, "(port)mem_ddr_V");
    sc_trace(mVcdFile, hsize_in, "(port)hsize_in");
    sc_trace(mVcdFile, vsize_in, "(port)vsize_in");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln29_reg_332, "icmp_ln29_reg_332");
    sc_trace(mVcdFile, icmp_ln29_reg_332_pp0_iter1_reg, "icmp_ln29_reg_332_pp0_iter1_reg");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, s_axis_video_TDATA_blk_n, "s_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln18_fu_231_p2, "icmp_ln18_fu_231_p2");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, phi_ln29_reg_192, "phi_ln29_reg_192");
    sc_trace(mVcdFile, p_cast_fu_203_p1, "p_cast_fu_203_p1");
    sc_trace(mVcdFile, p_cast_reg_300, "p_cast_reg_300");
    sc_trace(mVcdFile, add_ln15_fu_207_p2, "add_ln15_fu_207_p2");
    sc_trace(mVcdFile, add_ln15_reg_305, "add_ln15_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_221_p2, "i_fu_221_p2");
    sc_trace(mVcdFile, i_reg_313, "i_reg_313");
    sc_trace(mVcdFile, j_fu_236_p2, "j_fu_236_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, gmem_addr_reg_326, "gmem_addr_reg_326");
    sc_trace(mVcdFile, icmp_ln29_fu_271_p2, "icmp_ln29_fu_271_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter0, "ap_block_state5_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter1, "ap_block_state6_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter2, "ap_block_state7_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln29_fu_276_p2, "add_ln29_fu_276_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, mem_locale_V_q0, "mem_locale_V_q0");
    sc_trace(mVcdFile, mem_locale_V_load_reg_346, "mem_locale_V_load_reg_346");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state5, "ap_condition_pp0_exit_iter0_state5");
    sc_trace(mVcdFile, mem_locale_V_address0, "mem_locale_V_address0");
    sc_trace(mVcdFile, mem_locale_V_ce0, "mem_locale_V_ce0");
    sc_trace(mVcdFile, mem_locale_V_we0, "mem_locale_V_we0");
    sc_trace(mVcdFile, i_0_reg_158, "i_0_reg_158");
    sc_trace(mVcdFile, phi_mul_reg_169, "phi_mul_reg_169");
    sc_trace(mVcdFile, j_0_reg_181, "j_0_reg_181");
    sc_trace(mVcdFile, icmp_ln15_fu_216_p2, "icmp_ln15_fu_216_p2");
    sc_trace(mVcdFile, zext_ln22_fu_247_p1, "zext_ln22_fu_247_p1");
    sc_trace(mVcdFile, sext_ln29_1_fu_282_p1, "sext_ln29_1_fu_282_p1");
    sc_trace(mVcdFile, sext_ln29_2_fu_261_p1, "sext_ln29_2_fu_261_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln15_fu_212_p1, "zext_ln15_fu_212_p1");
    sc_trace(mVcdFile, zext_ln18_fu_227_p1, "zext_ln18_fu_227_p1");
    sc_trace(mVcdFile, sext_ln29_fu_252_p1, "sext_ln29_fu_252_p1");
    sc_trace(mVcdFile, add_ln29_1_fu_256_p2, "add_ln29_1_fu_256_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_apdone_blk, "regslice_both_s_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDATA_int, "s_axis_video_TDATA_int");
    sc_trace(mVcdFile, s_axis_video_TVALID_int, "s_axis_video_TVALID_int");
    sc_trace(mVcdFile, s_axis_video_TREADY_int, "s_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_ack_in, "regslice_both_s_axis_video_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_apdone_blk, "regslice_both_s_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TKEEP_int, "s_axis_video_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_vld_out, "regslice_both_s_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_ack_in, "regslice_both_s_axis_video_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_apdone_blk, "regslice_both_s_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TSTRB_int, "s_axis_video_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_vld_out, "regslice_both_s_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_ack_in, "regslice_both_s_axis_video_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_apdone_blk, "regslice_both_s_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TUSER_int, "s_axis_video_TUSER_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_vld_out, "regslice_both_s_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_ack_in, "regslice_both_s_axis_video_V_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_apdone_blk, "regslice_both_s_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TLAST_int, "s_axis_video_TLAST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_vld_out, "regslice_both_s_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_ack_in, "regslice_both_s_axis_video_V_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_apdone_blk, "regslice_both_s_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TID_int, "s_axis_video_TID_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_vld_out, "regslice_both_s_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_ack_in, "regslice_both_s_axis_video_V_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_apdone_blk, "regslice_both_s_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDEST_int, "s_axis_video_TDEST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_vld_out, "regslice_both_s_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_ack_in, "regslice_both_s_axis_video_V_dest_V_U_ack_in");
#endif

    }
    mHdltvinHandle.open("axis_to_aximm.hdltvin.dat");
    mHdltvoutHandle.open("axis_to_aximm.hdltvout.dat");
}

axis_to_aximm::~axis_to_aximm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axis_to_aximm_gmem_m_axi_U;
    delete mem_locale_V_U;
    delete regslice_both_s_axis_video_V_data_V_U;
    delete regslice_both_s_axis_video_V_keep_V_U;
    delete regslice_both_s_axis_video_V_strb_V_U;
    delete regslice_both_s_axis_video_V_user_V_U;
    delete regslice_both_s_axis_video_V_last_V_U;
    delete regslice_both_s_axis_video_V_id_V_U;
    delete regslice_both_s_axis_video_V_dest_V_U;
}

void axis_to_aximm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void axis_to_aximm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void axis_to_aximm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void axis_to_aximm::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void axis_to_aximm::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv1_1;
}

void axis_to_aximm::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void axis_to_aximm::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void axis_to_aximm::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void axis_to_aximm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state5.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state5.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state5.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        i_0_reg_158 = i_reg_313.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_158 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
        j_0_reg_181 = j_fu_236_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln15_fu_216_p2.read()))) {
        j_0_reg_181 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_271_p2.read()))) {
        phi_ln29_reg_192 = add_ln29_fu_276_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        phi_ln29_reg_192 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        phi_mul_reg_169 = add_ln15_reg_305.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_169 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln15_reg_305 = add_ln15_fu_207_p2.read();
        i_reg_313 = i_fu_221_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_231_p2.read()) && !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
        gmem_addr_reg_326 =  (sc_lv<32>) (sext_ln29_2_fu_261_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln29_reg_332 = icmp_ln29_fu_271_p2.read();
        icmp_ln29_reg_332_pp0_iter1_reg = icmp_ln29_reg_332.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln29_reg_332.read(), ap_const_lv1_0))) {
        mem_locale_V_load_reg_346 = mem_locale_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_cast_reg_300 = p_cast_fu_203_p1.read();
    }
}

void axis_to_aximm::thread_add_ln15_fu_207_p2() {
    add_ln15_fu_207_p2 = (!phi_mul_reg_169.read().is_01() || !hsize_in.read().is_01())? sc_lv<32>(): (sc_bigint<32>(phi_mul_reg_169.read()) + sc_biguint<32>(hsize_in.read()));
}

void axis_to_aximm::thread_add_ln29_1_fu_256_p2() {
    add_ln29_1_fu_256_p2 = (!sext_ln29_fu_252_p1.read().is_01() || !p_cast_reg_300.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_ln29_fu_252_p1.read()) + sc_bigint<33>(p_cast_reg_300.read()));
}

void axis_to_aximm::thread_add_ln29_fu_276_p2() {
    add_ln29_fu_276_p2 = (!phi_ln29_reg_192.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(phi_ln29_reg_192.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_aximm::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[4];
}

void axis_to_aximm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axis_to_aximm::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void axis_to_aximm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axis_to_aximm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void axis_to_aximm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void axis_to_aximm::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_aximm::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_aximm::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()));
}

void axis_to_aximm::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()));
}

void axis_to_aximm::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()));
}

void axis_to_aximm::thread_ap_block_state5_pp0_stage0_iter0() {
    ap_block_state5_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_aximm::thread_ap_block_state6_pp0_stage0_iter1() {
    ap_block_state6_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_aximm::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(icmp_ln29_reg_332_pp0_iter1_reg.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_WREADY.read()));
}

void axis_to_aximm::thread_ap_block_state7_pp0_stage0_iter2() {
    ap_block_state7_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_aximm::thread_ap_condition_pp0_exit_iter0_state5() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_271_p2.read())) {
        ap_condition_pp0_exit_iter0_state5 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state5 = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_216_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void axis_to_aximm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_216_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_to_aximm::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln29_reg_332_pp0_iter1_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void axis_to_aximm::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void axis_to_aximm::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln29_reg_332_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void axis_to_aximm::thread_i_fu_221_p2() {
    i_fu_221_p2 = (!i_0_reg_158.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg_158.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void axis_to_aximm::thread_icmp_ln15_fu_216_p2() {
    icmp_ln15_fu_216_p2 = (!zext_ln15_fu_212_p1.read().is_01() || !vsize_in.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln15_fu_212_p1.read()) < sc_bigint<32>(vsize_in.read()));
}

void axis_to_aximm::thread_icmp_ln18_fu_231_p2() {
    icmp_ln18_fu_231_p2 = (!zext_ln18_fu_227_p1.read().is_01() || !hsize_in.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln18_fu_227_p1.read()) < sc_bigint<32>(hsize_in.read()));
}

void axis_to_aximm::thread_icmp_ln29_fu_271_p2() {
    icmp_ln29_fu_271_p2 = (!phi_ln29_reg_192.read().is_01() || !hsize_in.read().is_01())? sc_lv<1>(): sc_lv<1>(phi_ln29_reg_192.read() == hsize_in.read());
}

void axis_to_aximm::thread_j_fu_236_p2() {
    j_fu_236_p2 = (!j_0_reg_181.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_181.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void axis_to_aximm::thread_mem_locale_V_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        mem_locale_V_address0 =  (sc_lv<10>) (sext_ln29_1_fu_282_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mem_locale_V_address0 =  (sc_lv<10>) (zext_ln22_fu_247_p1.read());
    } else {
        mem_locale_V_address0 = "XXXXXXXXXX";
    }
}

void axis_to_aximm::thread_mem_locale_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()))))) {
        mem_locale_V_ce0 = ap_const_logic_1;
    } else {
        mem_locale_V_ce0 = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_mem_locale_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
        mem_locale_V_we0 = ap_const_logic_1;
    } else {
        mem_locale_V_we0 = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_p_cast_fu_203_p1() {
    p_cast_fu_203_p1 = esl_sext<33,32>(mem_ddr_V.read());
}

void axis_to_aximm::thread_s_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1))) {
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int.read();
    } else {
        s_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_to_aximm::thread_s_axis_video_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_s_axis_video_V_data_V_U_ack_in.read()))) {
        s_axis_video_TREADY = ap_const_logic_1;
    } else {
        s_axis_video_TREADY = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_s_axis_video_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
        s_axis_video_TREADY_int = ap_const_logic_1;
    } else {
        s_axis_video_TREADY_int = ap_const_logic_0;
    }
}

void axis_to_aximm::thread_sext_ln29_1_fu_282_p1() {
    sext_ln29_1_fu_282_p1 = esl_sext<64,32>(phi_ln29_reg_192.read());
}

void axis_to_aximm::thread_sext_ln29_2_fu_261_p1() {
    sext_ln29_2_fu_261_p1 = esl_sext<64,33>(add_ln29_1_fu_256_p2.read());
}

void axis_to_aximm::thread_sext_ln29_fu_252_p1() {
    sext_ln29_fu_252_p1 = esl_sext<33,32>(phi_mul_reg_169.read());
}

void axis_to_aximm::thread_zext_ln15_fu_212_p1() {
    zext_ln15_fu_212_p1 = esl_zext<32,31>(i_0_reg_158.read());
}

void axis_to_aximm::thread_zext_ln18_fu_227_p1() {
    zext_ln18_fu_227_p1 = esl_zext<32,31>(j_0_reg_181.read());
}

void axis_to_aximm::thread_zext_ln22_fu_247_p1() {
    zext_ln22_fu_247_p1 = esl_zext<64,31>(j_0_reg_181.read());
}

void axis_to_aximm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_216_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_231_p2.read()) && !(esl_seteq<1,1,1>(icmp_ln18_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_271_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void axis_to_aximm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDATA\" :  \"" << s_axis_video_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TVALID\" :  \"" << s_axis_video_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axis_video_TREADY\" :  \"" << s_axis_video_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TKEEP\" :  \"" << s_axis_video_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TSTRB\" :  \"" << s_axis_video_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TUSER\" :  \"" << s_axis_video_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TLAST\" :  \"" << s_axis_video_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TID\" :  \"" << s_axis_video_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDEST\" :  \"" << s_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_ddr_V\" :  \"" << mem_ddr_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hsize_in\" :  \"" << hsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsize_in\" :  \"" << vsize_in.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

