

================================================================
== Vivado HLS Report for 'axis_to_aximm'
================================================================
* Date:           Mon Feb 21 15:14:48 2022

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        axis-to-aximm
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.750 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                                       |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |               Loop Name               |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1                               |        ?|        ?|         ?|          -|          -|     ?|    no    |
        | + Loop 1.1                            |        ?|        ?|         1|          -|          -|     ?|    no    |
        | + memcpy.mem_ddr.V.mem_locale.V.addr  |        ?|        ?|         3|          1|          1|     ?|    yes   |
        +---------------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 12
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 5 6 7 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 3 
4 --> 5 
5 --> 8 6 
6 --> 7 
7 --> 5 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 2 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%vsize_in_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %vsize_in)"   --->   Operation 13 'read' 'vsize_in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%hsize_in_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %hsize_in)"   --->   Operation 14 'read' 'hsize_in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%mem_ddr_V_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %mem_ddr_V)"   --->   Operation 15 'read' 'mem_ddr_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%p_cast = sext i32 %mem_ddr_V_read to i33"   --->   Operation 16 'sext' 'p_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %gmem), !map !37"   --->   Operation 17 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %s_axis_video_V_data_V), !map !41"   --->   Operation 18 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_keep_V), !map !45"   --->   Operation 19 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_strb_V), !map !49"   --->   Operation 20 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_user_V), !map !53"   --->   Operation 21 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_last_V), !map !57"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_id_V), !map !61"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %s_axis_video_V_dest_V), !map !65"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %hsize_in), !map !69"   --->   Operation 25 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %vsize_in), !map !75"   --->   Operation 26 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([14 x i8]* @axis_to_aximm_str) nounwind"   --->   Operation 27 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%mem_locale_V = alloca [640 x i8], align 1" [axis-to-aximm/axis_to_aximm.cpp:11]   --->   Operation 28 'alloca' 'mem_locale_V' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 640> <RAM>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %s_axis_video_V_data_V, i1* %s_axis_video_V_keep_V, i1* %s_axis_video_V_strb_V, i1* %s_axis_video_V_user_V, i1* %s_axis_video_V_last_V, i1* %s_axis_video_V_id_V, i1* %s_axis_video_V_dest_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [axis-to-aximm/axis_to_aximm.cpp:9]   --->   Operation 29 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %gmem, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [7 x i8]* @p_str4, [1 x i8]* @p_str2, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [axis-to-aximm/axis_to_aximm.cpp:10]   --->   Operation 30 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (1.76ns)   --->   "br label %1" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 31 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 3.45>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%i_0 = phi i31 [ 0, %0 ], [ %i, %hls_label_0_end ]"   --->   Operation 32 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%phi_mul = phi i32 [ 0, %0 ], [ %add_ln15, %hls_label_0_end ]" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 33 'phi' 'phi_mul' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (2.55ns)   --->   "%add_ln15 = add i32 %phi_mul, %hsize_in_read" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 34 'add' 'add_ln15' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%zext_ln15 = zext i31 %i_0 to i32" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 35 'zext' 'zext_ln15' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (2.47ns)   --->   "%icmp_ln15 = icmp slt i32 %zext_ln15, %vsize_in_read" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 36 'icmp' 'icmp_ln15' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (2.52ns)   --->   "%i = add i31 %i_0, 1" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 37 'add' 'i' <Predicate = true> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "br i1 %icmp_ln15, label %hls_label_0_begin, label %5" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 38 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str5)" [axis-to-aximm/axis_to_aximm.cpp:16]   --->   Operation 39 'specregionbegin' 'tmp' <Predicate = (icmp_ln15)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind" [axis-to-aximm/axis_to_aximm.cpp:17]   --->   Operation 40 'specpipeline' <Predicate = (icmp_ln15)> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (1.76ns)   --->   "br label %2" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 41 'br' <Predicate = (icmp_ln15)> <Delay = 1.76>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "ret void" [axis-to-aximm/axis_to_aximm.cpp:36]   --->   Operation 42 'ret' <Predicate = (!icmp_ln15)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 3.45>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%j_0 = phi i31 [ 0, %hls_label_0_begin ], [ %j, %3 ]"   --->   Operation 43 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln18 = zext i31 %j_0 to i32" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 44 'zext' 'zext_ln18' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (2.47ns)   --->   "%icmp_ln18 = icmp slt i32 %zext_ln18, %hsize_in_read" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 45 'icmp' 'icmp_ln18' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 46 [1/1] (2.52ns)   --->   "%j = add i31 %j_0, 1" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 46 'add' 'j' <Predicate = true> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "br i1 %icmp_ln18, label %3, label %4" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 47 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%empty = call { i8, i1, i1, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i8P.i1P.i1P.i1P.i1P.i1P.i1P(i8* %s_axis_video_V_data_V, i1* %s_axis_video_V_keep_V, i1* %s_axis_video_V_strb_V, i1* %s_axis_video_V_user_V, i1* %s_axis_video_V_last_V, i1* %s_axis_video_V_id_V, i1* %s_axis_video_V_dest_V)" [axis-to-aximm/axis_to_aximm.cpp:20]   --->   Operation 48 'read' 'empty' <Predicate = (icmp_ln18)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue { i8, i1, i1, i1, i1, i1, i1 } %empty, 0" [axis-to-aximm/axis_to_aximm.cpp:20]   --->   Operation 49 'extractvalue' 'tmp_data_V' <Predicate = (icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%zext_ln22 = zext i31 %j_0 to i64" [axis-to-aximm/axis_to_aximm.cpp:22]   --->   Operation 50 'zext' 'zext_ln22' <Predicate = (icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "%mem_locale_V_addr = getelementptr [640 x i8]* %mem_locale_V, i64 0, i64 %zext_ln22" [axis-to-aximm/axis_to_aximm.cpp:22]   --->   Operation 51 'getelementptr' 'mem_locale_V_addr' <Predicate = (icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 52 [1/1] (3.25ns)   --->   "store i8 %tmp_data_V, i8* %mem_locale_V_addr, align 1" [axis-to-aximm/axis_to_aximm.cpp:22]   --->   Operation 52 'store' <Predicate = (icmp_ln18)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 640> <RAM>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "br label %2" [axis-to-aximm/axis_to_aximm.cpp:18]   --->   Operation 53 'br' <Predicate = (icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "%sext_ln29 = sext i32 %phi_mul to i33" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 54 'sext' 'sext_ln29' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (2.55ns)   --->   "%add_ln29_1 = add i33 %sext_ln29, %p_cast" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 55 'add' 'add_ln29_1' <Predicate = (!icmp_ln18)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "%sext_ln29_2 = sext i33 %add_ln29_1 to i64" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 56 'sext' 'sext_ln29_2' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.00ns)   --->   "%gmem_addr = getelementptr i8* %gmem, i64 %sext_ln29_2" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 57 'getelementptr' 'gmem_addr' <Predicate = (!icmp_ln18)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 58 [1/1] (8.75ns)   --->   "%gmem_addr_wr_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %gmem_addr, i32 %hsize_in_read)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 58 'writereq' 'gmem_addr_wr_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 59 [1/1] (1.76ns)   --->   "br label %burst.wr.header" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 59 'br' <Predicate = true> <Delay = 1.76>

State 5 <SV = 4> <Delay = 3.45>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%phi_ln29 = phi i32 [ 0, %4 ], [ %add_ln29, %burstwrite.region ]" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 60 'phi' 'phi_ln29' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (2.47ns)   --->   "%icmp_ln29 = icmp eq i32 %phi_ln29, %hsize_in_read" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 61 'icmp' 'icmp_ln29' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 62 [1/1] (2.55ns)   --->   "%add_ln29 = add i32 %phi_ln29, 1" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 62 'add' 'add_ln29' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 63 [1/1] (0.00ns)   --->   "br i1 %icmp_ln29, label %hls_label_0_end, label %burstwrite.region" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 63 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%sext_ln29_1 = sext i32 %phi_ln29 to i64" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 64 'sext' 'sext_ln29_1' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_5 : Operation 65 [1/1] (0.00ns)   --->   "%mem_locale_V_addr_1 = getelementptr [640 x i8]* %mem_locale_V, i64 0, i64 %sext_ln29_1" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 65 'getelementptr' 'mem_locale_V_addr_1' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_5 : Operation 66 [2/2] (3.25ns)   --->   "%mem_locale_V_load = load i8* %mem_locale_V_addr_1, align 1" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 66 'load' 'mem_locale_V_load' <Predicate = (!icmp_ln29)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 640> <RAM>

State 6 <SV = 5> <Delay = 3.25>
ST_6 : Operation 67 [1/2] (3.25ns)   --->   "%mem_locale_V_load = load i8* %mem_locale_V_addr_1, align 1" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 67 'load' 'mem_locale_V_load' <Predicate = (!icmp_ln29)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 640> <RAM>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 68 [1/1] (0.00ns)   --->   "%burstwrite_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([18 x i8]* @burstwrite_OC_region)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 68 'specregionbegin' 'burstwrite_rbegin' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_7 : Operation 69 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str15)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 69 'specpipeline' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_7 : Operation 70 [1/1] (0.00ns)   --->   "%empty_3 = call i32 (...)* @_ssdm_op_SpecLoopName([35 x i8]* @memcpy_OC_mem_ddr_OC)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 70 'specloopname' 'empty_3' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_7 : Operation 71 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %gmem_addr, i8 %mem_locale_V_load, i1 true)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 71 'write' <Predicate = (!icmp_ln29)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 72 [1/1] (0.00ns)   --->   "%burstwrite_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([18 x i8]* @burstwrite_OC_region, i32 %burstwrite_rbegin)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 72 'specregionend' 'burstwrite_rend' <Predicate = (!icmp_ln29)> <Delay = 0.00>
ST_7 : Operation 73 [1/1] (0.00ns)   --->   "br label %burst.wr.header" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 73 'br' <Predicate = (!icmp_ln29)> <Delay = 0.00>

State 8 <SV = 5> <Delay = 8.75>
ST_8 : Operation 74 [5/5] (8.75ns)   --->   "%gmem_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %gmem_addr)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 74 'writeresp' 'gmem_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 6> <Delay = 8.75>
ST_9 : Operation 75 [4/5] (8.75ns)   --->   "%gmem_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %gmem_addr)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 75 'writeresp' 'gmem_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 7> <Delay = 8.75>
ST_10 : Operation 76 [3/5] (8.75ns)   --->   "%gmem_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %gmem_addr)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 76 'writeresp' 'gmem_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 8> <Delay = 8.75>
ST_11 : Operation 77 [2/5] (8.75ns)   --->   "%gmem_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %gmem_addr)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 77 'writeresp' 'gmem_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 9> <Delay = 8.75>
ST_12 : Operation 78 [1/5] (8.75ns)   --->   "%gmem_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %gmem_addr)" [axis-to-aximm/axis_to_aximm.cpp:29]   --->   Operation 78 'writeresp' 'gmem_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 79 [1/1] (0.00ns)   --->   "%empty_4 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str5, i32 %tmp)" [axis-to-aximm/axis_to_aximm.cpp:32]   --->   Operation 79 'specregionend' 'empty_4' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 80 [1/1] (0.00ns)   --->   "br label %1" [axis-to-aximm/axis_to_aximm.cpp:15]   --->   Operation 80 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', axis-to-aximm/axis_to_aximm.cpp:15) [32]  (1.77 ns)

 <State 2>: 3.45ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln15', axis-to-aximm/axis_to_aximm.cpp:15) [36]  (2.47 ns)
	blocking operation 0.978 ns on control path)

 <State 3>: 3.45ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln18', axis-to-aximm/axis_to_aximm.cpp:18) [46]  (2.47 ns)
	blocking operation 0.978 ns on control path)

 <State 4>: 8.75ns
The critical path consists of the following:
	bus request on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [61]  (8.75 ns)

 <State 5>: 3.45ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln29', axis-to-aximm/axis_to_aximm.cpp:29) [65]  (2.47 ns)
	blocking operation 0.978 ns on control path)

 <State 6>: 3.25ns
The critical path consists of the following:
	'load' operation ('mem_locale_V_load', axis-to-aximm/axis_to_aximm.cpp:29) on array 'mem_locale.V', axis-to-aximm/axis_to_aximm.cpp:11 [74]  (3.25 ns)

 <State 7>: 8.75ns
The critical path consists of the following:
	bus write on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [75]  (8.75 ns)

 <State 8>: 8.75ns
The critical path consists of the following:
	bus access on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [79]  (8.75 ns)

 <State 9>: 8.75ns
The critical path consists of the following:
	bus access on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [79]  (8.75 ns)

 <State 10>: 8.75ns
The critical path consists of the following:
	bus access on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [79]  (8.75 ns)

 <State 11>: 8.75ns
The critical path consists of the following:
	bus access on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [79]  (8.75 ns)

 <State 12>: 8.75ns
The critical path consists of the following:
	bus access on port 'gmem' (axis-to-aximm/axis_to_aximm.cpp:29) [79]  (8.75 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
