// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "im_load_mm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic im_load_mm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic im_load_mm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> im_load_mm::ap_ST_fsm_state1 = "1";
const sc_lv<14> im_load_mm::ap_ST_fsm_state2 = "10";
const sc_lv<14> im_load_mm::ap_ST_fsm_state3 = "100";
const sc_lv<14> im_load_mm::ap_ST_fsm_state4 = "1000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state5 = "10000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state6 = "100000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_pp0_stage0 = "1000000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state13 = "10000000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state14 = "100000000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<14> im_load_mm::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<32> im_load_mm::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool im_load_mm::ap_const_boolean_1 = true;
const sc_lv<32> im_load_mm::ap_const_lv32_2 = "10";
const sc_lv<32> im_load_mm::ap_const_lv32_9 = "1001";
const bool im_load_mm::ap_const_boolean_0 = false;
const sc_lv<1> im_load_mm::ap_const_lv1_0 = "0";
const sc_lv<32> im_load_mm::ap_const_lv32_C = "1100";
const sc_lv<32> im_load_mm::ap_const_lv32_D = "1101";
const int im_load_mm::C_S_AXI_DATA_WIDTH = "100000";
const int im_load_mm::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int im_load_mm::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int im_load_mm::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int im_load_mm::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> im_load_mm::ap_const_lv32_1 = "1";
const sc_lv<32> im_load_mm::ap_const_lv32_B = "1011";
const sc_lv<32> im_load_mm::ap_const_lv32_8 = "1000";
const sc_lv<1> im_load_mm::ap_const_lv1_1 = "1";
const sc_lv<9> im_load_mm::ap_const_lv9_0 = "000000000";
const sc_lv<10> im_load_mm::ap_const_lv10_0 = "0000000000";
const sc_lv<32> im_load_mm::ap_const_lv32_A = "1010";
const sc_lv<32> im_load_mm::ap_const_lv32_280 = "1010000000";
const sc_lv<3> im_load_mm::ap_const_lv3_0 = "000";
const sc_lv<2> im_load_mm::ap_const_lv2_0 = "00";
const sc_lv<4> im_load_mm::ap_const_lv4_0 = "0000";
const sc_lv<9> im_load_mm::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> im_load_mm::ap_const_lv9_1 = "1";
const sc_lv<7> im_load_mm::ap_const_lv7_0 = "0000000";
const sc_lv<10> im_load_mm::ap_const_lv10_280 = "1010000000";
const sc_lv<10> im_load_mm::ap_const_lv10_1 = "1";
const sc_lv<10> im_load_mm::ap_const_lv10_27F = "1001111111";
const sc_lv<8> im_load_mm::ap_const_lv8_0 = "00000000";

im_load_mm::im_load_mm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    im_load_mm_AXILiteS_s_axi_U = new im_load_mm_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("im_load_mm_AXILiteS_s_axi_U");
    im_load_mm_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    im_load_mm_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    im_load_mm_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    im_load_mm_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    im_load_mm_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    im_load_mm_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    im_load_mm_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    im_load_mm_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    im_load_mm_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    im_load_mm_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    im_load_mm_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    im_load_mm_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    im_load_mm_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    im_load_mm_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    im_load_mm_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    im_load_mm_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    im_load_mm_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    im_load_mm_AXILiteS_s_axi_U->ACLK(ap_clk);
    im_load_mm_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    im_load_mm_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    im_load_mm_AXILiteS_s_axi_U->mem_ddr_V(mem_ddr_V);
    im_load_mm_gmem_m_axi_U = new im_load_mm_gmem_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("im_load_mm_gmem_m_axi_U");
    im_load_mm_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    im_load_mm_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    im_load_mm_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    im_load_mm_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    im_load_mm_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    im_load_mm_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    im_load_mm_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    im_load_mm_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    im_load_mm_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    im_load_mm_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    im_load_mm_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    im_load_mm_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    im_load_mm_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    im_load_mm_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    im_load_mm_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    im_load_mm_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    im_load_mm_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    im_load_mm_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    im_load_mm_gmem_m_axi_U->WID(m_axi_gmem_WID);
    im_load_mm_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    im_load_mm_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    im_load_mm_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    im_load_mm_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    im_load_mm_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    im_load_mm_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    im_load_mm_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    im_load_mm_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    im_load_mm_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    im_load_mm_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    im_load_mm_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    im_load_mm_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    im_load_mm_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    im_load_mm_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    im_load_mm_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    im_load_mm_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    im_load_mm_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    im_load_mm_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    im_load_mm_gmem_m_axi_U->RID(m_axi_gmem_RID);
    im_load_mm_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    im_load_mm_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    im_load_mm_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    im_load_mm_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    im_load_mm_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    im_load_mm_gmem_m_axi_U->BID(m_axi_gmem_BID);
    im_load_mm_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    im_load_mm_gmem_m_axi_U->ACLK(ap_clk);
    im_load_mm_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    im_load_mm_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    im_load_mm_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    im_load_mm_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    im_load_mm_gmem_m_axi_U->I_ARADDR(gmem_addr_reg_366);
    im_load_mm_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    im_load_mm_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    im_load_mm_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    im_load_mm_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    im_load_mm_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    im_load_mm_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    im_load_mm_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    im_load_mm_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    im_load_mm_gmem_m_axi_U->I_RID(gmem_RID);
    im_load_mm_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    im_load_mm_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    im_load_mm_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    im_load_mm_gmem_m_axi_U->I_AWVALID(ap_var_for_const6);
    im_load_mm_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    im_load_mm_gmem_m_axi_U->I_AWADDR(ap_var_for_const7);
    im_load_mm_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_AWLEN(ap_var_for_const7);
    im_load_mm_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    im_load_mm_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    im_load_mm_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    im_load_mm_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    im_load_mm_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    im_load_mm_gmem_m_axi_U->I_WVALID(ap_var_for_const6);
    im_load_mm_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    im_load_mm_gmem_m_axi_U->I_WDATA(ap_var_for_const8);
    im_load_mm_gmem_m_axi_U->I_WID(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    im_load_mm_gmem_m_axi_U->I_WSTRB(ap_var_for_const1);
    im_load_mm_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    im_load_mm_gmem_m_axi_U->I_BREADY(ap_var_for_const6);
    im_load_mm_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    im_load_mm_gmem_m_axi_U->I_BID(gmem_BID);
    im_load_mm_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    mem_locale_U = new im_load_mm_mem_lobkb("mem_locale_U");
    mem_locale_U->clk(ap_clk);
    mem_locale_U->reset(ap_rst_n_inv);
    mem_locale_U->address0(mem_locale_address0);
    mem_locale_U->ce0(mem_locale_ce0);
    mem_locale_U->we0(mem_locale_we0);
    mem_locale_U->d0(gmem_addr_read_reg_381);
    mem_locale_U->q0(mem_locale_q0);
    regslice_both_m_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_m_axis_video_V_data_V_U");
    regslice_both_m_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_data_V_U->data_in(mem_locale_q0);
    regslice_both_m_axis_video_V_data_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_data_V_U->ack_in(m_axis_video_TREADY_int);
    regslice_both_m_axis_video_V_data_V_U->data_out(m_axis_video_TDATA);
    regslice_both_m_axis_video_V_data_V_U->vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out);
    regslice_both_m_axis_video_V_data_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_data_V_U->apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk);
    regslice_both_m_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_keep_V_U");
    regslice_both_m_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_keep_V_U->data_in(ap_var_for_const1);
    regslice_both_m_axis_video_V_keep_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_keep_V_U->ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_keep_V_U->data_out(m_axis_video_TKEEP);
    regslice_both_m_axis_video_V_keep_V_U->vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out);
    regslice_both_m_axis_video_V_keep_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_keep_V_U->apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_m_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_strb_V_U");
    regslice_both_m_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_strb_V_U->data_in(ap_var_for_const1);
    regslice_both_m_axis_video_V_strb_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_strb_V_U->ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_strb_V_U->data_out(m_axis_video_TSTRB);
    regslice_both_m_axis_video_V_strb_V_U->vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out);
    regslice_both_m_axis_video_V_strb_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_strb_V_U->apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_m_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_user_V_U");
    regslice_both_m_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_user_V_U->data_in(tmp_user_V_reg_394);
    regslice_both_m_axis_video_V_user_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_user_V_U->ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_user_V_U->data_out(m_axis_video_TUSER);
    regslice_both_m_axis_video_V_user_V_U->vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out);
    regslice_both_m_axis_video_V_user_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_user_V_U->apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk);
    regslice_both_m_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_last_V_U");
    regslice_both_m_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_last_V_U->data_in(tmp_last_V_reg_399);
    regslice_both_m_axis_video_V_last_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_last_V_U->ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_last_V_U->data_out(m_axis_video_TLAST);
    regslice_both_m_axis_video_V_last_V_U->vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out);
    regslice_both_m_axis_video_V_last_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_last_V_U->apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk);
    regslice_both_m_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_id_V_U");
    regslice_both_m_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_id_V_U->data_in(ap_var_for_const1);
    regslice_both_m_axis_video_V_id_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_id_V_U->ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_id_V_U->data_out(m_axis_video_TID);
    regslice_both_m_axis_video_V_id_V_U->vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out);
    regslice_both_m_axis_video_V_id_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_id_V_U->apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk);
    regslice_both_m_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_dest_V_U");
    regslice_both_m_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_dest_V_U->data_in(ap_var_for_const1);
    regslice_both_m_axis_video_V_dest_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_dest_V_U->ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_dest_V_U->data_out(m_axis_video_TDEST);
    regslice_both_m_axis_video_V_dest_V_U->vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out);
    regslice_both_m_axis_video_V_dest_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_dest_V_U->apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln18_1_fu_287_p2);
    sensitive << ( ap_phi_mux_phi_ln18_phi_fu_197_p4 );

    SC_METHOD(thread_add_ln18_2_fu_266_p2);
    sensitive << ( p_cast_reg_353 );
    sensitive << ( zext_ln18_3_fu_262_p1 );

    SC_METHOD(thread_add_ln18_fu_256_p2);
    sensitive << ( zext_ln18_fu_240_p1 );
    sensitive << ( zext_ln18_2_fu_252_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln18_reg_372 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln18_reg_372 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);
    sensitive << ( icmp_ln18_reg_372 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state10);
    sensitive << ( icmp_ln18_fu_281_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln16_fu_220_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_phi_ln18_phi_fu_197_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln18_reg_372 );
    sensitive << ( phi_ln18_reg_193 );
    sensitive << ( add_ln18_1_reg_376 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln16_fu_220_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( gmem_ARREADY );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln18_reg_372 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln18_reg_372 );

    SC_METHOD(thread_i_fu_226_p2);
    sensitive << ( i_0_reg_181 );

    SC_METHOD(thread_icmp_ln16_fu_220_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( i_0_reg_181 );

    SC_METHOD(thread_icmp_ln18_fu_281_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_phi_ln18_phi_fu_197_p4 );

    SC_METHOD(thread_icmp_ln20_fu_298_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_j_fu_304_p2);
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_vld_out );

    SC_METHOD(thread_m_axis_video_TVALID_int);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_mem_locale_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( zext_ln18_1_fu_293_p1 );
    sensitive << ( zext_ln31_fu_348_p1 );

    SC_METHOD(thread_mem_locale_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_mem_locale_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln18_reg_372_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_or_ln22_fu_314_p2);
    sensitive << ( i_0_reg_181 );
    sensitive << ( trunc_ln22_fu_310_p1 );

    SC_METHOD(thread_or_ln_fu_328_p3);
    sensitive << ( tmp_fu_320_p3 );
    sensitive << ( or_ln22_fu_314_p2 );

    SC_METHOD(thread_p_cast_fu_216_p1);
    sensitive << ( mem_ddr_V );

    SC_METHOD(thread_sext_ln18_fu_271_p1);
    sensitive << ( add_ln18_2_fu_266_p2 );

    SC_METHOD(thread_shl_ln18_1_fu_244_p3);
    sensitive << ( i_0_reg_181 );

    SC_METHOD(thread_shl_ln_fu_232_p3);
    sensitive << ( i_0_reg_181 );

    SC_METHOD(thread_tmp_fu_320_p3);
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_tmp_last_V_fu_342_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( icmp_ln20_fu_298_p2 );
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_tmp_user_V_fu_336_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( icmp_ln20_fu_298_p2 );
    sensitive << ( or_ln_fu_328_p3 );

    SC_METHOD(thread_trunc_ln22_fu_310_p1);
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_zext_ln18_1_fu_293_p1);
    sensitive << ( phi_ln18_reg_193_pp0_iter1_reg );

    SC_METHOD(thread_zext_ln18_2_fu_252_p1);
    sensitive << ( shl_ln18_1_fu_244_p3 );

    SC_METHOD(thread_zext_ln18_3_fu_262_p1);
    sensitive << ( add_ln18_fu_256_p2 );

    SC_METHOD(thread_zext_ln18_fu_240_p1);
    sensitive << ( shl_ln_fu_232_p3 );

    SC_METHOD(thread_zext_ln31_fu_348_p1);
    sensitive << ( j_0_reg_205 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln16_fu_220_p2 );
    sensitive << ( icmp_ln18_fu_281_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( icmp_ln20_fu_298_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "im_load_mm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mem_ddr_V, "mem_ddr_V");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln18_reg_372, "icmp_ln18_reg_372");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, phi_ln18_reg_193, "phi_ln18_reg_193");
    sc_trace(mVcdFile, phi_ln18_reg_193_pp0_iter1_reg, "phi_ln18_reg_193_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter0, "ap_block_state10_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter2, "ap_block_state12_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, p_cast_fu_216_p1, "p_cast_fu_216_p1");
    sc_trace(mVcdFile, p_cast_reg_353, "p_cast_reg_353");
    sc_trace(mVcdFile, i_fu_226_p2, "i_fu_226_p2");
    sc_trace(mVcdFile, i_reg_361, "i_reg_361");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_apdone_blk, "regslice_both_m_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, gmem_addr_reg_366, "gmem_addr_reg_366");
    sc_trace(mVcdFile, icmp_ln16_fu_220_p2, "icmp_ln16_fu_220_p2");
    sc_trace(mVcdFile, icmp_ln18_fu_281_p2, "icmp_ln18_fu_281_p2");
    sc_trace(mVcdFile, icmp_ln18_reg_372_pp0_iter1_reg, "icmp_ln18_reg_372_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln18_1_fu_287_p2, "add_ln18_1_fu_287_p2");
    sc_trace(mVcdFile, add_ln18_1_reg_376, "add_ln18_1_reg_376");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, gmem_addr_read_reg_381, "gmem_addr_read_reg_381");
    sc_trace(mVcdFile, j_fu_304_p2, "j_fu_304_p2");
    sc_trace(mVcdFile, j_reg_389, "j_reg_389");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_user_V_fu_336_p2, "tmp_user_V_fu_336_p2");
    sc_trace(mVcdFile, tmp_user_V_reg_394, "tmp_user_V_reg_394");
    sc_trace(mVcdFile, icmp_ln20_fu_298_p2, "icmp_ln20_fu_298_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_342_p2, "tmp_last_V_fu_342_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_399, "tmp_last_V_reg_399");
    sc_trace(mVcdFile, mem_locale_q0, "mem_locale_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state10, "ap_condition_pp0_exit_iter0_state10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, mem_locale_address0, "mem_locale_address0");
    sc_trace(mVcdFile, mem_locale_ce0, "mem_locale_ce0");
    sc_trace(mVcdFile, mem_locale_we0, "mem_locale_we0");
    sc_trace(mVcdFile, i_0_reg_181, "i_0_reg_181");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln18_phi_fu_197_p4, "ap_phi_mux_phi_ln18_phi_fu_197_p4");
    sc_trace(mVcdFile, j_0_reg_205, "j_0_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, zext_ln18_1_fu_293_p1, "zext_ln18_1_fu_293_p1");
    sc_trace(mVcdFile, zext_ln31_fu_348_p1, "zext_ln31_fu_348_p1");
    sc_trace(mVcdFile, sext_ln18_fu_271_p1, "sext_ln18_fu_271_p1");
    sc_trace(mVcdFile, shl_ln_fu_232_p3, "shl_ln_fu_232_p3");
    sc_trace(mVcdFile, shl_ln18_1_fu_244_p3, "shl_ln18_1_fu_244_p3");
    sc_trace(mVcdFile, zext_ln18_fu_240_p1, "zext_ln18_fu_240_p1");
    sc_trace(mVcdFile, zext_ln18_2_fu_252_p1, "zext_ln18_2_fu_252_p1");
    sc_trace(mVcdFile, add_ln18_fu_256_p2, "add_ln18_fu_256_p2");
    sc_trace(mVcdFile, zext_ln18_3_fu_262_p1, "zext_ln18_3_fu_262_p1");
    sc_trace(mVcdFile, add_ln18_2_fu_266_p2, "add_ln18_2_fu_266_p2");
    sc_trace(mVcdFile, trunc_ln22_fu_310_p1, "trunc_ln22_fu_310_p1");
    sc_trace(mVcdFile, tmp_fu_320_p3, "tmp_fu_320_p3");
    sc_trace(mVcdFile, or_ln22_fu_314_p2, "or_ln22_fu_314_p2");
    sc_trace(mVcdFile, or_ln_fu_328_p3, "or_ln_fu_328_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, m_axis_video_TVALID_int, "m_axis_video_TVALID_int");
    sc_trace(mVcdFile, m_axis_video_TREADY_int, "m_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_vld_out, "regslice_both_m_axis_video_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_apdone_blk, "regslice_both_m_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_vld_out, "regslice_both_m_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_apdone_blk, "regslice_both_m_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_vld_out, "regslice_both_m_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_apdone_blk, "regslice_both_m_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_vld_out, "regslice_both_m_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_apdone_blk, "regslice_both_m_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_vld_out, "regslice_both_m_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_apdone_blk, "regslice_both_m_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_vld_out, "regslice_both_m_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_apdone_blk, "regslice_both_m_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_vld_out, "regslice_both_m_axis_video_V_dest_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("im_load_mm.hdltvin.dat");
    mHdltvoutHandle.open("im_load_mm.hdltvout.dat");
}

im_load_mm::~im_load_mm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete im_load_mm_AXILiteS_s_axi_U;
    delete im_load_mm_gmem_m_axi_U;
    delete mem_locale_U;
    delete regslice_both_m_axis_video_V_data_V_U;
    delete regslice_both_m_axis_video_V_keep_V_U;
    delete regslice_both_m_axis_video_V_strb_V_U;
    delete regslice_both_m_axis_video_V_user_V_U;
    delete regslice_both_m_axis_video_V_last_V_U;
    delete regslice_both_m_axis_video_V_id_V_U;
    delete regslice_both_m_axis_video_V_dest_V_U;
}

void im_load_mm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void im_load_mm::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void im_load_mm::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void im_load_mm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void im_load_mm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_280;
}

void im_load_mm::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void im_load_mm::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void im_load_mm::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void im_load_mm::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void im_load_mm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state10.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_298_p2.read(), ap_const_lv1_1))) {
        i_0_reg_181 = i_reg_361.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_181 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j_0_reg_205 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
        j_0_reg_205 = j_reg_389.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        phi_ln18_reg_193 = add_ln18_1_reg_376.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        phi_ln18_reg_193 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln18_1_reg_376 = add_ln18_1_fu_287_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_read_reg_381 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_220_p2.read()))) {
        gmem_addr_reg_366 =  (sc_lv<32>) (sext_ln18_fu_271_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        i_reg_361 = i_fu_226_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln18_reg_372 = icmp_ln18_fu_281_p2.read();
        icmp_ln18_reg_372_pp0_iter1_reg = icmp_ln18_reg_372.read();
        phi_ln18_reg_193_pp0_iter1_reg = phi_ln18_reg_193.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        j_reg_389 = j_fu_304_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_cast_reg_353 = p_cast_fu_216_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_298_p2.read()))) {
        tmp_last_V_reg_399 = tmp_last_V_fu_342_p2.read();
        tmp_user_V_reg_394 = tmp_user_V_fu_336_p2.read();
    }
}

void im_load_mm::thread_add_ln18_1_fu_287_p2() {
    add_ln18_1_fu_287_p2 = (!ap_phi_mux_phi_ln18_phi_fu_197_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_phi_ln18_phi_fu_197_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void im_load_mm::thread_add_ln18_2_fu_266_p2() {
    add_ln18_2_fu_266_p2 = (!zext_ln18_3_fu_262_p1.read().is_01() || !p_cast_reg_353.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln18_3_fu_262_p1.read()) + sc_bigint<33>(p_cast_reg_353.read()));
}

void im_load_mm::thread_add_ln18_fu_256_p2() {
    add_ln18_fu_256_p2 = (!zext_ln18_fu_240_p1.read().is_01() || !zext_ln18_2_fu_252_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(zext_ln18_fu_240_p1.read()) + sc_biguint<19>(zext_ln18_2_fu_252_p1.read()));
}

void im_load_mm::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[9];
}

void im_load_mm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void im_load_mm::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[10];
}

void im_load_mm::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[11];
}

void im_load_mm::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[12];
}

void im_load_mm::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[13];
}

void im_load_mm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void im_load_mm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void im_load_mm::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void im_load_mm::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void im_load_mm::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void im_load_mm::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void im_load_mm::thread_ap_block_state10_pp0_stage0_iter0() {
    ap_block_state10_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void im_load_mm::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void im_load_mm::thread_ap_block_state12_pp0_stage0_iter2() {
    ap_block_state12_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void im_load_mm::thread_ap_condition_pp0_exit_iter0_state10() {
    if (esl_seteq<1,1,1>(icmp_ln18_fu_281_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_0;
    }
}

void im_load_mm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_220_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void im_load_mm::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void im_load_mm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void im_load_mm::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void im_load_mm::thread_ap_phi_mux_phi_ln18_phi_fu_197_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0))) {
        ap_phi_mux_phi_ln18_phi_fu_197_p4 = add_ln18_1_reg_376.read();
    } else {
        ap_phi_mux_phi_ln18_phi_fu_197_p4 = phi_ln18_reg_193.read();
    }
}

void im_load_mm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_220_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void im_load_mm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void im_load_mm::thread_gmem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void im_load_mm::thread_gmem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void im_load_mm::thread_gmem_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void im_load_mm::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_372.read(), ap_const_lv1_0))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void im_load_mm::thread_i_fu_226_p2() {
    i_fu_226_p2 = (!i_0_reg_181.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_181.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void im_load_mm::thread_icmp_ln16_fu_220_p2() {
    icmp_ln16_fu_220_p2 = (!i_0_reg_181.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_181.read() == ap_const_lv9_1E0);
}

void im_load_mm::thread_icmp_ln18_fu_281_p2() {
    icmp_ln18_fu_281_p2 = (!ap_phi_mux_phi_ln18_phi_fu_197_p4.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_phi_ln18_phi_fu_197_p4.read() == ap_const_lv10_280);
}

void im_load_mm::thread_icmp_ln20_fu_298_p2() {
    icmp_ln20_fu_298_p2 = (!j_0_reg_205.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_205.read() == ap_const_lv10_280);
}

void im_load_mm::thread_j_fu_304_p2() {
    j_fu_304_p2 = (!j_0_reg_205.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_0_reg_205.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void im_load_mm::thread_m_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int.read();
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void im_load_mm::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out.read();
}

void im_load_mm::thread_m_axis_video_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
        m_axis_video_TVALID_int = ap_const_logic_1;
    } else {
        m_axis_video_TVALID_int = ap_const_logic_0;
    }
}

void im_load_mm::thread_mem_locale_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        mem_locale_address0 =  (sc_lv<10>) (zext_ln31_fu_348_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        mem_locale_address0 =  (sc_lv<10>) (zext_ln18_1_fu_293_p1.read());
    } else {
        mem_locale_address0 = "XXXXXXXXXX";
    }
}

void im_load_mm::thread_mem_locale_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        mem_locale_ce0 = ap_const_logic_1;
    } else {
        mem_locale_ce0 = ap_const_logic_0;
    }
}

void im_load_mm::thread_mem_locale_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_reg_372_pp0_iter1_reg.read()))) {
        mem_locale_we0 = ap_const_logic_1;
    } else {
        mem_locale_we0 = ap_const_logic_0;
    }
}

void im_load_mm::thread_or_ln22_fu_314_p2() {
    or_ln22_fu_314_p2 = (trunc_ln22_fu_310_p1.read() | i_0_reg_181.read());
}

void im_load_mm::thread_or_ln_fu_328_p3() {
    or_ln_fu_328_p3 = esl_concat<1,9>(tmp_fu_320_p3.read(), or_ln22_fu_314_p2.read());
}

void im_load_mm::thread_p_cast_fu_216_p1() {
    p_cast_fu_216_p1 = esl_sext<33,32>(mem_ddr_V.read());
}

void im_load_mm::thread_sext_ln18_fu_271_p1() {
    sext_ln18_fu_271_p1 = esl_sext<64,33>(add_ln18_2_fu_266_p2.read());
}

void im_load_mm::thread_shl_ln18_1_fu_244_p3() {
    shl_ln18_1_fu_244_p3 = esl_concat<9,7>(i_0_reg_181.read(), ap_const_lv7_0);
}

void im_load_mm::thread_shl_ln_fu_232_p3() {
    shl_ln_fu_232_p3 = esl_concat<9,9>(i_0_reg_181.read(), ap_const_lv9_0);
}

void im_load_mm::thread_tmp_fu_320_p3() {
    tmp_fu_320_p3 = j_0_reg_205.read().range(9, 9);
}

void im_load_mm::thread_tmp_last_V_fu_342_p2() {
    tmp_last_V_fu_342_p2 = (!j_0_reg_205.read().is_01() || !ap_const_lv10_27F.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_205.read() == ap_const_lv10_27F);
}

void im_load_mm::thread_tmp_user_V_fu_336_p2() {
    tmp_user_V_fu_336_p2 = (!or_ln_fu_328_p3.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln_fu_328_p3.read() == ap_const_lv10_0);
}

void im_load_mm::thread_trunc_ln22_fu_310_p1() {
    trunc_ln22_fu_310_p1 = j_0_reg_205.read().range(9-1, 0);
}

void im_load_mm::thread_zext_ln18_1_fu_293_p1() {
    zext_ln18_1_fu_293_p1 = esl_zext<64,10>(phi_ln18_reg_193_pp0_iter1_reg.read());
}

void im_load_mm::thread_zext_ln18_2_fu_252_p1() {
    zext_ln18_2_fu_252_p1 = esl_zext<19,16>(shl_ln18_1_fu_244_p3.read());
}

void im_load_mm::thread_zext_ln18_3_fu_262_p1() {
    zext_ln18_3_fu_262_p1 = esl_zext<33,19>(add_ln18_fu_256_p2.read());
}

void im_load_mm::thread_zext_ln18_fu_240_p1() {
    zext_ln18_fu_240_p1 = esl_zext<19,18>(shl_ln_fu_232_p3.read());
}

void im_load_mm::thread_zext_ln31_fu_348_p1() {
    zext_ln31_fu_348_p1 = esl_zext<64,10>(j_0_reg_205.read());
}

void im_load_mm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln16_fu_220_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_220_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln18_fu_281_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln18_fu_281_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_298_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

void im_load_mm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

