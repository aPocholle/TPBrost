-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity incrust is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hsize_in : IN STD_LOGIC_VECTOR (31 downto 0);
    vsize_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of incrust is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "incrust,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=6,HLS_SYN_FF=915,HLS_SYN_LUT=931,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_C8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000011001000";
    constant ap_const_lv31_10E : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100001110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_12C : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100101100";
    constant ap_const_lv31_1C2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000111000010";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_FFFF8A9F : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111000101010011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal im_incrust_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal im_incrust_V_ce0 : STD_LOGIC;
    signal im_incrust_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln13_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_399_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln13_reg_399_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_150 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_161 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_0_reg_172 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln16_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_399_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_229_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln13_1_fu_261_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln13_1_reg_408 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_414_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_414_pp0_iter1_reg_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_414_pp0_iter2_reg_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_419_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_424_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_424_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_434_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_439_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_444_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_444_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_2_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_2_reg_449_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_2_reg_449_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_331_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln13_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_165_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln21_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_1_fu_243_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln21_4_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_5_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_3_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_235_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln21_2_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_2_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln13_fu_340_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln21_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_1_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal s_axis_video_TVALID_int : STD_LOGIC;
    signal s_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_video_TVALID_int : STD_LOGIC;
    signal m_axis_video_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal bound_fu_191_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_191_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln13_fu_340_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component incrust_im_incrusbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    im_incrust_V_U : component incrust_im_incrusbkb
    generic map (
        DataWidth => 8,
        AddressRange => 10064,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => im_incrust_V_address0,
        ce0 => im_incrust_V_ce0,
        q0 => im_incrust_V_q0);

    regslice_both_s_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int,
        vld_out => s_axis_video_TVALID_int,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_video_TDATA_int,
        vld_in => m_axis_video_TVALID_int,
        ack_in => m_axis_video_TREADY_int,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_419_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_424_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_429_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_434_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_439_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_444_pp0_iter2_reg,
        vld_in => m_axis_video_TVALID_int,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_161 <= select_ln13_1_reg_408;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_161 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_150 <= add_ln13_fu_229_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_150 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_172 <= j_fu_331_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_172 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln21_2_reg_449 <= and_ln21_2_fu_325_p2;
                empty_reg_414_0 <= s_axis_video_TDATA_int;
                tmp_dest_V_reg_444 <= s_axis_video_TDEST_int;
                tmp_id_V_reg_439 <= s_axis_video_TID_int;
                tmp_keep_V_reg_419 <= s_axis_video_TKEEP_int;
                tmp_last_V_reg_434 <= s_axis_video_TLAST_int;
                tmp_strb_V_reg_424 <= s_axis_video_TSTRB_int;
                tmp_user_V_reg_429 <= s_axis_video_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln21_2_reg_449_pp0_iter1_reg <= and_ln21_2_reg_449;
                empty_reg_414_pp0_iter1_reg_0 <= empty_reg_414_0;
                icmp_ln13_reg_399 <= icmp_ln13_fu_224_p2;
                icmp_ln13_reg_399_pp0_iter1_reg <= icmp_ln13_reg_399;
                icmp_ln16_reg_394 <= icmp_ln16_fu_219_p2;
                icmp_ln16_reg_394_pp0_iter1_reg <= icmp_ln16_reg_394;
                tmp_dest_V_reg_444_pp0_iter1_reg <= tmp_dest_V_reg_444;
                tmp_id_V_reg_439_pp0_iter1_reg <= tmp_id_V_reg_439;
                tmp_keep_V_reg_419_pp0_iter1_reg <= tmp_keep_V_reg_419;
                tmp_last_V_reg_434_pp0_iter1_reg <= tmp_last_V_reg_434;
                tmp_strb_V_reg_424_pp0_iter1_reg <= tmp_strb_V_reg_424;
                tmp_user_V_reg_429_pp0_iter1_reg <= tmp_user_V_reg_429;
                    zext_ln16_reg_389(30 downto 0) <= zext_ln16_fu_215_p1(30 downto 0);
                    zext_ln16_reg_389_pp0_iter1_reg(30 downto 0) <= zext_ln16_reg_389(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln21_2_reg_449_pp0_iter2_reg <= and_ln21_2_reg_449_pp0_iter1_reg;
                empty_reg_414_pp0_iter2_reg_0 <= empty_reg_414_pp0_iter1_reg_0;
                icmp_ln13_reg_399_pp0_iter2_reg <= icmp_ln13_reg_399_pp0_iter1_reg;
                icmp_ln13_reg_399_pp0_iter3_reg <= icmp_ln13_reg_399_pp0_iter2_reg;
                tmp_dest_V_reg_444_pp0_iter2_reg <= tmp_dest_V_reg_444_pp0_iter1_reg;
                tmp_id_V_reg_439_pp0_iter2_reg <= tmp_id_V_reg_439_pp0_iter1_reg;
                tmp_keep_V_reg_419_pp0_iter2_reg <= tmp_keep_V_reg_419_pp0_iter1_reg;
                tmp_last_V_reg_434_pp0_iter2_reg <= tmp_last_V_reg_434_pp0_iter1_reg;
                tmp_strb_V_reg_424_pp0_iter2_reg <= tmp_strb_V_reg_424_pp0_iter1_reg;
                tmp_user_V_reg_429_pp0_iter2_reg <= tmp_user_V_reg_429_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_384 <= bound_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_399 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln21_2_reg_449) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    mul_ln13_reg_459(31 downto 2) <= mul_ln13_fu_340_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln13_1_reg_408 <= select_ln13_1_fu_261_p3;
            end if;
        end if;
    end process;
    zext_ln16_reg_389(31) <= '0';
    zext_ln16_reg_389_pp0_iter1_reg(31) <= '0';
    mul_ln13_reg_459(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln13_fu_224_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln13_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln13_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln13_1_fu_243_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_165_p4) + unsigned(ap_const_lv31_1));
    add_ln13_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_150) + unsigned(ap_const_lv64_1));
    add_ln21_1_fu_358_p2 <= std_logic_vector(unsigned(select_ln21_fu_351_p3) + unsigned(mul_ln13_reg_459));
    add_ln21_fu_346_p2 <= std_logic_vector(unsigned(zext_ln16_reg_389_pp0_iter1_reg) + unsigned(ap_const_lv32_FFFF8A9F));
    and_ln21_1_fu_319_p2 <= (icmp_ln21_3_fu_313_p2 and icmp_ln21_2_fu_307_p2);
    and_ln21_2_fu_325_p2 <= (select_ln13_2_fu_275_p3 and and_ln21_1_fu_319_p2);
    and_ln21_3_fu_269_p2 <= (icmp_ln21_5_fu_255_p2 and icmp_ln21_4_fu_249_p2);
    and_ln21_fu_209_p2 <= (icmp_ln21_fu_197_p2 and icmp_ln21_1_fu_203_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln13_fu_224_p2, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln13_fu_224_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_state5_io, ap_block_state6_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln13_fu_224_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_state5_io, ap_block_state6_io, s_axis_video_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln13_fu_224_p2, s_axis_video_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (s_axis_video_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln13_reg_399_pp0_iter2_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state5_io <= ((icmp_ln13_reg_399_pp0_iter2_reg = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(icmp_ln13_reg_399_pp0_iter3_reg, m_axis_video_TREADY_int)
    begin
                ap_block_state6_io <= ((icmp_ln13_reg_399_pp0_iter3_reg = ap_const_lv1_0) and (m_axis_video_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln13_fu_224_p2)
    begin
        if ((icmp_ln13_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_165_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln13_reg_399, i_0_reg_161, select_ln13_1_reg_408, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln13_reg_399 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_165_p4 <= select_ln13_1_reg_408;
        else 
            ap_phi_mux_i_0_phi_fu_165_p4 <= i_0_reg_161;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_191_p0 <= bound_fu_191_p00(32 - 1 downto 0);
    bound_fu_191_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hsize_in),64));
    bound_fu_191_p1 <= bound_fu_191_p10(32 - 1 downto 0);
    bound_fu_191_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vsize_in),64));
    bound_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_191_p0) * unsigned(bound_fu_191_p1), 64));
    icmp_ln13_fu_224_p2 <= "1" when (indvar_flatten_reg_150 = bound_reg_384) else "0";
    icmp_ln16_fu_219_p2 <= "1" when (signed(zext_ln16_fu_215_p1) < signed(hsize_in)) else "0";
    icmp_ln21_1_fu_203_p2 <= "1" when (unsigned(ap_phi_mux_i_0_phi_fu_165_p4) < unsigned(ap_const_lv31_10E)) else "0";
    icmp_ln21_2_fu_307_p2 <= "1" when (unsigned(select_ln13_fu_235_p3) > unsigned(ap_const_lv31_12C)) else "0";
    icmp_ln21_3_fu_313_p2 <= "1" when (unsigned(select_ln13_fu_235_p3) < unsigned(ap_const_lv31_1C2)) else "0";
    icmp_ln21_4_fu_249_p2 <= "1" when (unsigned(add_ln13_1_fu_243_p2) > unsigned(ap_const_lv31_C8)) else "0";
    icmp_ln21_5_fu_255_p2 <= "1" when (unsigned(add_ln13_1_fu_243_p2) < unsigned(ap_const_lv31_10E)) else "0";
    icmp_ln21_fu_197_p2 <= "1" when (unsigned(ap_phi_mux_i_0_phi_fu_165_p4) > unsigned(ap_const_lv31_C8)) else "0";
    im_incrust_V_address0 <= zext_ln21_fu_363_p1(14 - 1 downto 0);

    im_incrust_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            im_incrust_V_ce0 <= ap_const_logic_1;
        else 
            im_incrust_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_331_p2 <= std_logic_vector(unsigned(select_ln13_fu_235_p3) + unsigned(ap_const_lv31_1));

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln13_reg_399_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln13_reg_399_pp0_iter3_reg, m_axis_video_TREADY_int)
    begin
        if ((((icmp_ln13_reg_399_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln13_reg_399_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDATA_int <= 
        im_incrust_V_q0 when (and_ln21_2_reg_449_pp0_iter2_reg(0) = '1') else 
        empty_reg_414_pp0_iter2_reg_0;
    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln13_reg_399_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_reg_399_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axis_video_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_fu_340_p0 <= mul_ln13_fu_340_p00(31 - 1 downto 0);
    mul_ln13_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_408),32));
    mul_ln13_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_340_p0) * unsigned(ap_const_lv32_94), 32));

    s_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln13_fu_224_p2, s_axis_video_TVALID_int)
    begin
        if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_TVALID_int;
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_video_TREADY_assign_proc : process(s_axis_video_TVALID, regslice_both_s_axis_video_V_data_V_U_ack_in)
    begin
        if (((regslice_both_s_axis_video_V_data_V_U_ack_in = ap_const_logic_1) and (s_axis_video_TVALID = ap_const_logic_1))) then 
            s_axis_video_TREADY <= ap_const_logic_1;
        else 
            s_axis_video_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln13_fu_224_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_axis_video_TREADY_int <= ap_const_logic_1;
        else 
            s_axis_video_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln13_1_fu_261_p3 <= 
        ap_phi_mux_i_0_phi_fu_165_p4 when (icmp_ln16_fu_219_p2(0) = '1') else 
        add_ln13_1_fu_243_p2;
    select_ln13_2_fu_275_p3 <= 
        and_ln21_fu_209_p2 when (icmp_ln16_fu_219_p2(0) = '1') else 
        and_ln21_3_fu_269_p2;
    select_ln13_fu_235_p3 <= 
        j_0_reg_172 when (icmp_ln16_fu_219_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln21_fu_351_p3 <= 
        add_ln21_fu_346_p2 when (icmp_ln16_reg_394_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_FFFF8A9F;
    zext_ln16_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_172),32));
    zext_ln21_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_fu_358_p2),64));
end behav;
