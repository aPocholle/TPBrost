// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="incrust,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=6,HLS_SYN_FF=915,HLS_SYN_LUT=931,HLS_VERSION=2019_2}" *)

module incrust (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [0:0] s_axis_video_TKEEP;
input  [0:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [0:0] m_axis_video_TKEEP;
output  [0:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] im_incrust_V_address0;
reg    im_incrust_V_ce0;
wire   [7:0] im_incrust_V_q0;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln13_fu_224_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln13_reg_399;
reg   [0:0] icmp_ln13_reg_399_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln13_reg_399_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_150;
reg   [30:0] i_0_reg_161;
reg   [30:0] j_0_reg_172;
wire   [63:0] bound_fu_191_p2;
reg   [63:0] bound_reg_384;
wire   [31:0] zext_ln16_fu_215_p1;
reg   [31:0] zext_ln16_reg_389;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] zext_ln16_reg_389_pp0_iter1_reg;
wire   [0:0] icmp_ln16_fu_219_p2;
reg   [0:0] icmp_ln16_reg_394;
reg   [0:0] icmp_ln16_reg_394_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_399_pp0_iter1_reg;
wire   [63:0] add_ln13_fu_229_p2;
wire   [30:0] select_ln13_1_fu_261_p3;
reg   [30:0] select_ln13_1_reg_408;
reg   [7:0] empty_reg_414_0;
reg   [7:0] empty_reg_414_pp0_iter1_reg_0;
reg   [7:0] empty_reg_414_pp0_iter2_reg_0;
reg   [0:0] tmp_keep_V_reg_419;
reg   [0:0] tmp_keep_V_reg_419_pp0_iter1_reg;
reg   [0:0] tmp_keep_V_reg_419_pp0_iter2_reg;
reg   [0:0] tmp_strb_V_reg_424;
reg   [0:0] tmp_strb_V_reg_424_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_424_pp0_iter2_reg;
reg   [0:0] tmp_user_V_reg_429;
reg   [0:0] tmp_user_V_reg_429_pp0_iter1_reg;
reg   [0:0] tmp_user_V_reg_429_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_434;
reg   [0:0] tmp_last_V_reg_434_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_434_pp0_iter2_reg;
reg   [0:0] tmp_id_V_reg_439;
reg   [0:0] tmp_id_V_reg_439_pp0_iter1_reg;
reg   [0:0] tmp_id_V_reg_439_pp0_iter2_reg;
reg   [0:0] tmp_dest_V_reg_444;
reg   [0:0] tmp_dest_V_reg_444_pp0_iter1_reg;
reg   [0:0] tmp_dest_V_reg_444_pp0_iter2_reg;
wire   [0:0] and_ln21_2_fu_325_p2;
reg   [0:0] and_ln21_2_reg_449;
reg   [0:0] and_ln21_2_reg_449_pp0_iter1_reg;
reg   [0:0] and_ln21_2_reg_449_pp0_iter2_reg;
wire   [30:0] j_fu_331_p2;
wire   [31:0] mul_ln13_fu_340_p2;
reg   [31:0] mul_ln13_reg_459;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [30:0] ap_phi_mux_i_0_phi_fu_165_p4;
wire   [63:0] zext_ln21_fu_363_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_191_p0;
wire   [31:0] bound_fu_191_p1;
wire   [0:0] icmp_ln21_fu_197_p2;
wire   [0:0] icmp_ln21_1_fu_203_p2;
wire   [30:0] add_ln13_1_fu_243_p2;
wire   [0:0] icmp_ln21_4_fu_249_p2;
wire   [0:0] icmp_ln21_5_fu_255_p2;
wire   [0:0] and_ln21_fu_209_p2;
wire   [0:0] and_ln21_3_fu_269_p2;
wire   [30:0] select_ln13_fu_235_p3;
wire   [0:0] icmp_ln21_2_fu_307_p2;
wire   [0:0] icmp_ln21_3_fu_313_p2;
wire   [0:0] and_ln21_1_fu_319_p2;
wire   [0:0] select_ln13_2_fu_275_p3;
wire   [30:0] mul_ln13_fu_340_p0;
wire   [31:0] add_ln21_fu_346_p2;
wire   [31:0] select_ln21_fu_351_p3;
wire   [31:0] add_ln21_1_fu_358_p2;
wire    ap_CS_fsm_state7;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [7:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [0:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [0:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire   [7:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_191_p00;
wire   [63:0] bound_fu_191_p10;
wire   [31:0] mul_ln13_fu_340_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

incrust_im_incrusbkb #(
    .DataWidth( 8 ),
    .AddressRange( 10064 ),
    .AddressWidth( 14 ))
im_incrust_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_incrust_V_address0),
    .ce0(im_incrust_V_ce0),
    .q0(im_incrust_V_q0)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_419_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_424_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_429_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_434_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_439_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_444_pp0_iter2_reg),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_399 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_161 <= select_ln13_1_reg_408;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_161 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_150 <= add_ln13_fu_229_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_150 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_172 <= j_fu_331_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_172 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln21_2_reg_449 <= and_ln21_2_fu_325_p2;
        empty_reg_414_0 <= s_axis_video_TDATA_int;
        tmp_dest_V_reg_444 <= s_axis_video_TDEST_int;
        tmp_id_V_reg_439 <= s_axis_video_TID_int;
        tmp_keep_V_reg_419 <= s_axis_video_TKEEP_int;
        tmp_last_V_reg_434 <= s_axis_video_TLAST_int;
        tmp_strb_V_reg_424 <= s_axis_video_TSTRB_int;
        tmp_user_V_reg_429 <= s_axis_video_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln21_2_reg_449_pp0_iter1_reg <= and_ln21_2_reg_449;
        empty_reg_414_pp0_iter1_reg_0 <= empty_reg_414_0;
        icmp_ln13_reg_399 <= icmp_ln13_fu_224_p2;
        icmp_ln13_reg_399_pp0_iter1_reg <= icmp_ln13_reg_399;
        icmp_ln16_reg_394 <= icmp_ln16_fu_219_p2;
        icmp_ln16_reg_394_pp0_iter1_reg <= icmp_ln16_reg_394;
        tmp_dest_V_reg_444_pp0_iter1_reg <= tmp_dest_V_reg_444;
        tmp_id_V_reg_439_pp0_iter1_reg <= tmp_id_V_reg_439;
        tmp_keep_V_reg_419_pp0_iter1_reg <= tmp_keep_V_reg_419;
        tmp_last_V_reg_434_pp0_iter1_reg <= tmp_last_V_reg_434;
        tmp_strb_V_reg_424_pp0_iter1_reg <= tmp_strb_V_reg_424;
        tmp_user_V_reg_429_pp0_iter1_reg <= tmp_user_V_reg_429;
        zext_ln16_reg_389[30 : 0] <= zext_ln16_fu_215_p1[30 : 0];
        zext_ln16_reg_389_pp0_iter1_reg[30 : 0] <= zext_ln16_reg_389[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln21_2_reg_449_pp0_iter2_reg <= and_ln21_2_reg_449_pp0_iter1_reg;
        empty_reg_414_pp0_iter2_reg_0 <= empty_reg_414_pp0_iter1_reg_0;
        icmp_ln13_reg_399_pp0_iter2_reg <= icmp_ln13_reg_399_pp0_iter1_reg;
        icmp_ln13_reg_399_pp0_iter3_reg <= icmp_ln13_reg_399_pp0_iter2_reg;
        tmp_dest_V_reg_444_pp0_iter2_reg <= tmp_dest_V_reg_444_pp0_iter1_reg;
        tmp_id_V_reg_439_pp0_iter2_reg <= tmp_id_V_reg_439_pp0_iter1_reg;
        tmp_keep_V_reg_419_pp0_iter2_reg <= tmp_keep_V_reg_419_pp0_iter1_reg;
        tmp_last_V_reg_434_pp0_iter2_reg <= tmp_last_V_reg_434_pp0_iter1_reg;
        tmp_strb_V_reg_424_pp0_iter2_reg <= tmp_strb_V_reg_424_pp0_iter1_reg;
        tmp_user_V_reg_429_pp0_iter2_reg <= tmp_user_V_reg_429_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_384 <= bound_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_399 == 1'd0) & (1'd1 == and_ln21_2_reg_449) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln13_reg_459[31 : 2] <= mul_ln13_fu_340_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln13_1_reg_408 <= select_ln13_1_fu_261_p3;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_224_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_399 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_165_p4 = select_ln13_1_reg_408;
    end else begin
        ap_phi_mux_i_0_phi_fu_165_p4 = i_0_reg_161;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_incrust_V_ce0 = 1'b1;
    end else begin
        im_incrust_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln13_reg_399_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln13_reg_399_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_399_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_224_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln13_fu_224_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln13_fu_224_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_243_p2 = (ap_phi_mux_i_0_phi_fu_165_p4 + 31'd1);

assign add_ln13_fu_229_p2 = (indvar_flatten_reg_150 + 64'd1);

assign add_ln21_1_fu_358_p2 = (select_ln21_fu_351_p3 + mul_ln13_reg_459);

assign add_ln21_fu_346_p2 = ($signed(zext_ln16_reg_389_pp0_iter1_reg) + $signed(32'd4294937247));

assign and_ln21_1_fu_319_p2 = (icmp_ln21_3_fu_313_p2 & icmp_ln21_2_fu_307_p2);

assign and_ln21_2_fu_325_p2 = (select_ln13_2_fu_275_p3 & and_ln21_1_fu_319_p2);

assign and_ln21_3_fu_269_p2 = (icmp_ln21_5_fu_255_p2 & icmp_ln21_4_fu_249_p2);

assign and_ln21_fu_209_p2 = (icmp_ln21_fu_197_p2 & icmp_ln21_1_fu_203_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln13_fu_224_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln13_fu_224_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln13_fu_224_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln13_fu_224_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln13_reg_399_pp0_iter2_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln13_reg_399_pp0_iter3_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_191_p0 = bound_fu_191_p00;

assign bound_fu_191_p00 = hsize_in;

assign bound_fu_191_p1 = bound_fu_191_p10;

assign bound_fu_191_p10 = vsize_in;

assign bound_fu_191_p2 = (bound_fu_191_p0 * bound_fu_191_p1);

assign icmp_ln13_fu_224_p2 = ((indvar_flatten_reg_150 == bound_reg_384) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_219_p2 = (($signed(zext_ln16_fu_215_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_203_p2 = ((ap_phi_mux_i_0_phi_fu_165_p4 < 31'd270) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_307_p2 = ((select_ln13_fu_235_p3 > 31'd300) ? 1'b1 : 1'b0);

assign icmp_ln21_3_fu_313_p2 = ((select_ln13_fu_235_p3 < 31'd450) ? 1'b1 : 1'b0);

assign icmp_ln21_4_fu_249_p2 = ((add_ln13_1_fu_243_p2 > 31'd200) ? 1'b1 : 1'b0);

assign icmp_ln21_5_fu_255_p2 = ((add_ln13_1_fu_243_p2 < 31'd270) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_197_p2 = ((ap_phi_mux_i_0_phi_fu_165_p4 > 31'd200) ? 1'b1 : 1'b0);

assign im_incrust_V_address0 = zext_ln21_fu_363_p1;

assign j_fu_331_p2 = (select_ln13_fu_235_p3 + 31'd1);

assign m_axis_video_TDATA_int = ((and_ln21_2_reg_449_pp0_iter2_reg[0:0] === 1'b1) ? im_incrust_V_q0 : empty_reg_414_pp0_iter2_reg_0);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign mul_ln13_fu_340_p0 = mul_ln13_fu_340_p00;

assign mul_ln13_fu_340_p00 = select_ln13_1_reg_408;

assign mul_ln13_fu_340_p2 = (mul_ln13_fu_340_p0 * $signed('h94));

assign select_ln13_1_fu_261_p3 = ((icmp_ln16_fu_219_p2[0:0] === 1'b1) ? ap_phi_mux_i_0_phi_fu_165_p4 : add_ln13_1_fu_243_p2);

assign select_ln13_2_fu_275_p3 = ((icmp_ln16_fu_219_p2[0:0] === 1'b1) ? and_ln21_fu_209_p2 : and_ln21_3_fu_269_p2);

assign select_ln13_fu_235_p3 = ((icmp_ln16_fu_219_p2[0:0] === 1'b1) ? j_0_reg_172 : 31'd0);

assign select_ln21_fu_351_p3 = ((icmp_ln16_reg_394_pp0_iter1_reg[0:0] === 1'b1) ? add_ln21_fu_346_p2 : 32'd4294937247);

assign zext_ln16_fu_215_p1 = j_0_reg_172;

assign zext_ln21_fu_363_p1 = add_ln21_1_fu_358_p2;

always @ (posedge ap_clk) begin
    zext_ln16_reg_389[31] <= 1'b0;
    zext_ln16_reg_389_pp0_iter1_reg[31] <= 1'b0;
    mul_ln13_reg_459[1:0] <= 2'b00;
end

endmodule //incrust
