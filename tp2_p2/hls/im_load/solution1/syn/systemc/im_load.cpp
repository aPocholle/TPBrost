// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "im_load.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic im_load::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic im_load::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> im_load::ap_ST_fsm_state1 = "1";
const sc_lv<5> im_load::ap_ST_fsm_state2 = "10";
const sc_lv<5> im_load::ap_ST_fsm_state3 = "100";
const sc_lv<5> im_load::ap_ST_fsm_state4 = "1000";
const sc_lv<5> im_load::ap_ST_fsm_state5 = "10000";
const sc_lv<32> im_load::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> im_load::ap_const_lv32_3 = "11";
const sc_lv<32> im_load::ap_const_lv32_4 = "100";
const sc_lv<32> im_load::ap_const_lv32_1 = "1";
const sc_lv<1> im_load::ap_const_lv1_0 = "0";
const sc_lv<32> im_load::ap_const_lv32_2 = "10";
const sc_lv<9> im_load::ap_const_lv9_0 = "000000000";
const sc_lv<1> im_load::ap_const_lv1_1 = "1";
const sc_lv<10> im_load::ap_const_lv10_0 = "0000000000";
const sc_lv<9> im_load::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> im_load::ap_const_lv9_1 = "1";
const sc_lv<7> im_load::ap_const_lv7_0 = "0000000";
const sc_lv<10> im_load::ap_const_lv10_280 = "1010000000";
const sc_lv<10> im_load::ap_const_lv10_1 = "1";
const sc_lv<32> im_load::ap_const_lv32_9 = "1001";
const sc_lv<10> im_load::ap_const_lv10_27F = "1001111111";
const bool im_load::ap_const_boolean_1 = true;

im_load::im_load(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_video_data_p_V_U = new regslice_both<8>("regslice_both_video_data_p_V_U");
    regslice_both_video_data_p_V_U->ap_clk(ap_clk);
    regslice_both_video_data_p_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_video_data_p_V_U->data_in(mem_V_q0);
    regslice_both_video_data_p_V_U->vld_in(video_TVALID_int);
    regslice_both_video_data_p_V_U->ack_in(video_TREADY_int);
    regslice_both_video_data_p_V_U->data_out(video_TDATA);
    regslice_both_video_data_p_V_U->vld_out(regslice_both_video_data_p_V_U_vld_out);
    regslice_both_video_data_p_V_U->ack_out(video_TREADY);
    regslice_both_video_data_p_V_U->apdone_blk(regslice_both_video_data_p_V_U_apdone_blk);
    regslice_both_video_user_V_U = new regslice_both<1>("regslice_both_video_user_V_U");
    regslice_both_video_user_V_U->ap_clk(ap_clk);
    regslice_both_video_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_video_user_V_U->data_in(icmp_ln29_reg_243);
    regslice_both_video_user_V_U->vld_in(video_TVALID_int);
    regslice_both_video_user_V_U->ack_in(regslice_both_video_user_V_U_ack_in_dummy);
    regslice_both_video_user_V_U->data_out(video_TUSER);
    regslice_both_video_user_V_U->vld_out(regslice_both_video_user_V_U_vld_out);
    regslice_both_video_user_V_U->ack_out(video_TREADY);
    regslice_both_video_user_V_U->apdone_blk(regslice_both_video_user_V_U_apdone_blk);
    regslice_both_video_last_V_U = new regslice_both<1>("regslice_both_video_last_V_U");
    regslice_both_video_last_V_U->ap_clk(ap_clk);
    regslice_both_video_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_video_last_V_U->data_in(icmp_ln34_reg_248);
    regslice_both_video_last_V_U->vld_in(video_TVALID_int);
    regslice_both_video_last_V_U->ack_in(regslice_both_video_last_V_U_ack_in_dummy);
    regslice_both_video_last_V_U->data_out(video_TLAST);
    regslice_both_video_last_V_U->vld_out(regslice_both_video_last_V_U_vld_out);
    regslice_both_video_last_V_U->ack_out(video_TREADY);
    regslice_both_video_last_V_U->apdone_blk(regslice_both_video_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln42_1_fu_198_p2);
    sensitive << ( shl_ln42_1_reg_230 );
    sensitive << ( zext_ln25_fu_144_p1 );

    SC_METHOD(thread_add_ln42_fu_207_p2);
    sensitive << ( zext_ln42_1_reg_225 );
    sensitive << ( zext_ln42_2_fu_203_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_video_data_p_V_U_apdone_blk );
    sensitive << ( icmp_ln23_fu_112_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_video_data_p_V_U_apdone_blk );
    sensitive << ( icmp_ln23_fu_112_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_i_fu_118_p2);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_icmp_ln23_fu_112_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_video_data_p_V_U_apdone_blk );
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_icmp_ln25_fu_148_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_icmp_ln29_fu_186_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln25_fu_148_p2 );
    sensitive << ( or_ln_fu_178_p3 );

    SC_METHOD(thread_icmp_ln34_fu_192_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln25_fu_148_p2 );
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_j_fu_154_p2);
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_mem_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln42_fu_212_p1 );

    SC_METHOD(thread_mem_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_or_ln29_fu_164_p2);
    sensitive << ( i_0_reg_89 );
    sensitive << ( trunc_ln29_fu_160_p1 );

    SC_METHOD(thread_or_ln_fu_178_p3);
    sensitive << ( tmp_fu_170_p3 );
    sensitive << ( or_ln29_fu_164_p2 );

    SC_METHOD(thread_shl_ln42_1_fu_136_p3);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_shl_ln_fu_124_p3);
    sensitive << ( i_0_reg_89 );

    SC_METHOD(thread_tmp_fu_170_p3);
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_trunc_ln29_fu_160_p1);
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( video_TREADY_int );

    SC_METHOD(thread_video_TVALID);
    sensitive << ( regslice_both_video_data_p_V_U_vld_out );

    SC_METHOD(thread_video_TVALID_int);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( video_TREADY_int );

    SC_METHOD(thread_zext_ln25_fu_144_p1);
    sensitive << ( j_0_reg_101 );

    SC_METHOD(thread_zext_ln42_1_fu_132_p1);
    sensitive << ( shl_ln_fu_124_p3 );

    SC_METHOD(thread_zext_ln42_2_fu_203_p1);
    sensitive << ( add_ln42_1_fu_198_p2 );

    SC_METHOD(thread_zext_ln42_fu_212_p1);
    sensitive << ( add_ln42_fu_207_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_video_data_p_V_U_apdone_blk );
    sensitive << ( icmp_ln23_fu_112_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln25_fu_148_p2 );
    sensitive << ( video_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "im_load_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, video_TDATA, "(port)video_TDATA");
    sc_trace(mVcdFile, video_TVALID, "(port)video_TVALID");
    sc_trace(mVcdFile, video_TREADY, "(port)video_TREADY");
    sc_trace(mVcdFile, video_TUSER, "(port)video_TUSER");
    sc_trace(mVcdFile, video_TLAST, "(port)video_TLAST");
    sc_trace(mVcdFile, mem_V_address0, "(port)mem_V_address0");
    sc_trace(mVcdFile, mem_V_ce0, "(port)mem_V_ce0");
    sc_trace(mVcdFile, mem_V_q0, "(port)mem_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, video_TDATA_blk_n, "video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_fu_118_p2, "i_fu_118_p2");
    sc_trace(mVcdFile, i_reg_220, "i_reg_220");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, regslice_both_video_data_p_V_U_apdone_blk, "regslice_both_video_data_p_V_U_apdone_blk");
    sc_trace(mVcdFile, zext_ln42_1_fu_132_p1, "zext_ln42_1_fu_132_p1");
    sc_trace(mVcdFile, zext_ln42_1_reg_225, "zext_ln42_1_reg_225");
    sc_trace(mVcdFile, icmp_ln23_fu_112_p2, "icmp_ln23_fu_112_p2");
    sc_trace(mVcdFile, shl_ln42_1_fu_136_p3, "shl_ln42_1_fu_136_p3");
    sc_trace(mVcdFile, shl_ln42_1_reg_230, "shl_ln42_1_reg_230");
    sc_trace(mVcdFile, j_fu_154_p2, "j_fu_154_p2");
    sc_trace(mVcdFile, j_reg_238, "j_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln29_fu_186_p2, "icmp_ln29_fu_186_p2");
    sc_trace(mVcdFile, icmp_ln29_reg_243, "icmp_ln29_reg_243");
    sc_trace(mVcdFile, icmp_ln25_fu_148_p2, "icmp_ln25_fu_148_p2");
    sc_trace(mVcdFile, icmp_ln34_fu_192_p2, "icmp_ln34_fu_192_p2");
    sc_trace(mVcdFile, icmp_ln34_reg_248, "icmp_ln34_reg_248");
    sc_trace(mVcdFile, i_0_reg_89, "i_0_reg_89");
    sc_trace(mVcdFile, j_0_reg_101, "j_0_reg_101");
    sc_trace(mVcdFile, zext_ln42_fu_212_p1, "zext_ln42_fu_212_p1");
    sc_trace(mVcdFile, shl_ln_fu_124_p3, "shl_ln_fu_124_p3");
    sc_trace(mVcdFile, trunc_ln29_fu_160_p1, "trunc_ln29_fu_160_p1");
    sc_trace(mVcdFile, tmp_fu_170_p3, "tmp_fu_170_p3");
    sc_trace(mVcdFile, or_ln29_fu_164_p2, "or_ln29_fu_164_p2");
    sc_trace(mVcdFile, or_ln_fu_178_p3, "or_ln_fu_178_p3");
    sc_trace(mVcdFile, zext_ln25_fu_144_p1, "zext_ln25_fu_144_p1");
    sc_trace(mVcdFile, add_ln42_1_fu_198_p2, "add_ln42_1_fu_198_p2");
    sc_trace(mVcdFile, zext_ln42_2_fu_203_p1, "zext_ln42_2_fu_203_p1");
    sc_trace(mVcdFile, add_ln42_fu_207_p2, "add_ln42_fu_207_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, video_TVALID_int, "video_TVALID_int");
    sc_trace(mVcdFile, video_TREADY_int, "video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_video_data_p_V_U_vld_out, "regslice_both_video_data_p_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_video_user_V_U_apdone_blk, "regslice_both_video_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_video_user_V_U_ack_in_dummy, "regslice_both_video_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_video_user_V_U_vld_out, "regslice_both_video_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_video_last_V_U_apdone_blk, "regslice_both_video_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_video_last_V_U_ack_in_dummy, "regslice_both_video_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_video_last_V_U_vld_out, "regslice_both_video_last_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("im_load.hdltvin.dat");
    mHdltvoutHandle.open("im_load.hdltvout.dat");
}

im_load::~im_load() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete regslice_both_video_data_p_V_U;
    delete regslice_both_video_user_V_U;
    delete regslice_both_video_last_V_U;
}

void im_load::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_148_p2.read(), ap_const_lv1_1))) {
        i_0_reg_89 = i_reg_220.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_89 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_0))) {
        j_0_reg_101 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(video_TREADY_int.read(), ap_const_logic_1))) {
        j_0_reg_101 = j_reg_238.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0))) {
        i_reg_220 = i_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_148_p2.read()))) {
        icmp_ln29_reg_243 = icmp_ln29_fu_186_p2.read();
        icmp_ln34_reg_248 = icmp_ln34_fu_192_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_238 = j_fu_154_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_0))) {
        shl_ln42_1_reg_230 = shl_ln42_1_fu_136_p3.read();
        zext_ln42_1_reg_225 = zext_ln42_1_fu_132_p1.read();
    }
}

void im_load::thread_add_ln42_1_fu_198_p2() {
    add_ln42_1_fu_198_p2 = (!zext_ln25_fu_144_p1.read().is_01() || !shl_ln42_1_reg_230.read().is_01())? sc_lv<16>(): (sc_biguint<16>(zext_ln25_fu_144_p1.read()) + sc_biguint<16>(shl_ln42_1_reg_230.read()));
}

void im_load::thread_add_ln42_fu_207_p2() {
    add_ln42_fu_207_p2 = (!zext_ln42_1_reg_225.read().is_01() || !zext_ln42_2_fu_203_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(zext_ln42_1_reg_225.read()) + sc_biguint<19>(zext_ln42_2_fu_203_p1.read()));
}

void im_load::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void im_load::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void im_load::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void im_load::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void im_load::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void im_load::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void im_load::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void im_load::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void im_load::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void im_load::thread_i_fu_118_p2() {
    i_fu_118_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_89.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void im_load::thread_icmp_ln23_fu_112_p2() {
    icmp_ln23_fu_112_p2 = (!i_0_reg_89.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_89.read() == ap_const_lv9_1E0);
}

void im_load::thread_icmp_ln25_fu_148_p2() {
    icmp_ln25_fu_148_p2 = (!j_0_reg_101.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_101.read() == ap_const_lv10_280);
}

void im_load::thread_icmp_ln29_fu_186_p2() {
    icmp_ln29_fu_186_p2 = (!or_ln_fu_178_p3.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln_fu_178_p3.read() == ap_const_lv10_0);
}

void im_load::thread_icmp_ln34_fu_192_p2() {
    icmp_ln34_fu_192_p2 = (!j_0_reg_101.read().is_01() || !ap_const_lv10_27F.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_101.read() == ap_const_lv10_27F);
}

void im_load::thread_j_fu_154_p2() {
    j_fu_154_p2 = (!j_0_reg_101.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_0_reg_101.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void im_load::thread_mem_V_address0() {
    mem_V_address0 =  (sc_lv<19>) (zext_ln42_fu_212_p1.read());
}

void im_load::thread_mem_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mem_V_ce0 = ap_const_logic_1;
    } else {
        mem_V_ce0 = ap_const_logic_0;
    }
}

void im_load::thread_or_ln29_fu_164_p2() {
    or_ln29_fu_164_p2 = (trunc_ln29_fu_160_p1.read() | i_0_reg_89.read());
}

void im_load::thread_or_ln_fu_178_p3() {
    or_ln_fu_178_p3 = esl_concat<1,9>(tmp_fu_170_p3.read(), or_ln29_fu_164_p2.read());
}

void im_load::thread_shl_ln42_1_fu_136_p3() {
    shl_ln42_1_fu_136_p3 = esl_concat<9,7>(i_0_reg_89.read(), ap_const_lv7_0);
}

void im_load::thread_shl_ln_fu_124_p3() {
    shl_ln_fu_124_p3 = esl_concat<9,9>(i_0_reg_89.read(), ap_const_lv9_0);
}

void im_load::thread_tmp_fu_170_p3() {
    tmp_fu_170_p3 = j_0_reg_101.read().range(9, 9);
}

void im_load::thread_trunc_ln29_fu_160_p1() {
    trunc_ln29_fu_160_p1 = j_0_reg_101.read().range(9-1, 0);
}

void im_load::thread_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        video_TDATA_blk_n = video_TREADY_int.read();
    } else {
        video_TDATA_blk_n = ap_const_logic_1;
    }
}

void im_load::thread_video_TVALID() {
    video_TVALID = regslice_both_video_data_p_V_U_vld_out.read();
}

void im_load::thread_video_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(video_TREADY_int.read(), ap_const_logic_1))) {
        video_TVALID_int = ap_const_logic_1;
    } else {
        video_TVALID_int = ap_const_logic_0;
    }
}

void im_load::thread_zext_ln25_fu_144_p1() {
    zext_ln25_fu_144_p1 = esl_zext<16,10>(j_0_reg_101.read());
}

void im_load::thread_zext_ln42_1_fu_132_p1() {
    zext_ln42_1_fu_132_p1 = esl_zext<19,18>(shl_ln_fu_124_p3.read());
}

void im_load::thread_zext_ln42_2_fu_203_p1() {
    zext_ln42_2_fu_203_p1 = esl_zext<19,16>(add_ln42_1_fu_198_p2.read());
}

void im_load::thread_zext_ln42_fu_212_p1() {
    zext_ln42_fu_212_p1 = esl_zext<64,19>(add_ln42_fu_207_p2.read());
}

void im_load::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_video_data_p_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln23_fu_112_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_148_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(video_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(video_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void im_load::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_TDATA\" :  \"" << video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_TVALID\" :  \"" << video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_TREADY\" :  \"" << video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_TUSER\" :  \"" << video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_TLAST\" :  \"" << video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_V_address0\" :  \"" << mem_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_V_ce0\" :  \"" << mem_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_V_q0\" :  \"" << mem_V_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

