// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filter_Convolution,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.739000,HLS_SYN_LAT=308344,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1027,HLS_SYN_LUT=1035,HLS_VERSION=2019_2}" *)

module Filter_Convolution (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        id_filter_V,
        in_img_V_TDATA,
        in_img_V_TVALID,
        in_img_V_TREADY,
        out_img_V_TDATA,
        out_img_V_TVALID,
        out_img_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state25 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] id_filter_V;
input  [7:0] in_img_V_TDATA;
input   in_img_V_TVALID;
output   in_img_V_TREADY;
output  [7:0] out_img_V_TDATA;
output   out_img_V_TVALID;
input   out_img_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_img_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] window_V_0_2;
reg   [7:0] window_V_1_2;
reg   [7:0] window_V_2_2;
wire   [2:0] M_0_0_address0;
reg    M_0_0_ce0;
wire   [1:0] M_0_0_q0;
wire   [2:0] M_0_1_address0;
reg    M_0_1_ce0;
wire   [2:0] M_0_1_q0;
wire   [2:0] M_0_2_address0;
reg    M_0_2_ce0;
wire   [1:0] M_0_2_q0;
wire   [2:0] M_1_0_address0;
reg    M_1_0_ce0;
wire   [2:0] M_1_0_q0;
wire   [2:0] M_1_1_address0;
reg    M_1_1_ce0;
wire   [3:0] M_1_1_q0;
wire   [2:0] M_1_2_address0;
reg    M_1_2_ce0;
wire   [2:0] M_1_2_q0;
wire   [2:0] M_2_0_address0;
reg    M_2_0_ce0;
wire   [1:0] M_2_0_q0;
wire   [2:0] M_2_1_address0;
reg    M_2_1_ce0;
wire   [2:0] M_2_1_q0;
wire   [2:0] M_2_2_address0;
reg    M_2_2_ce0;
wire   [2:0] M_2_2_q0;
wire   [2:0] SumF_address0;
reg    SumF_ce0;
wire   [4:0] SumF_q0;
wire   [2:0] Offset_address0;
reg    Offset_ce0;
wire   [7:0] Offset_q0;
wire   [9:0] line_buffer_V_0_address0;
reg    line_buffer_V_0_ce0;
wire   [7:0] line_buffer_V_0_q0;
reg    line_buffer_V_0_ce1;
reg    line_buffer_V_0_we1;
wire   [9:0] line_buffer_V_1_address0;
reg    line_buffer_V_1_ce0;
wire   [7:0] line_buffer_V_1_q0;
wire   [9:0] line_buffer_V_1_address1;
reg    line_buffer_V_1_ce1;
reg    line_buffer_V_1_we1;
reg   [7:0] window_V_0_1;
reg   [7:0] window_V_1_1;
reg   [7:0] window_V_2_1;
reg    in_img_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln42_fu_450_p2;
wire   [0:0] and_ln73_fu_542_p2;
reg    out_img_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter20;
reg   [0:0] and_ln81_reg_968;
reg   [0:0] and_ln81_reg_968_pp0_iter19_reg;
reg    ap_enable_reg_pp0_iter21;
reg   [0:0] and_ln81_reg_968_pp0_iter20_reg;
reg   [18:0] indvar_flatten_reg_326;
reg   [8:0] row_0_reg_337;
reg   [9:0] col_0_reg_348;
wire  signed [9:0] sext_ln12_fu_386_p1;
reg  signed [9:0] sext_ln12_reg_863;
wire    ap_CS_fsm_state2;
wire  signed [10:0] sext_ln1371_fu_390_p1;
reg  signed [10:0] sext_ln1371_reg_868;
wire  signed [9:0] sext_ln12_1_fu_394_p1;
reg  signed [9:0] sext_ln12_1_reg_873;
wire  signed [10:0] sext_ln1371_1_fu_398_p1;
reg  signed [10:0] sext_ln1371_1_reg_878;
wire   [11:0] zext_ln12_1_fu_402_p1;
reg   [11:0] zext_ln12_1_reg_883;
wire  signed [10:0] sext_ln12_2_fu_406_p1;
reg  signed [10:0] sext_ln12_2_reg_888;
wire  signed [9:0] sext_ln12_3_fu_410_p1;
reg  signed [9:0] sext_ln12_3_reg_893;
wire  signed [10:0] sext_ln1371_2_fu_414_p1;
reg  signed [10:0] sext_ln1371_2_reg_898;
wire  signed [10:0] sext_ln1371_3_fu_418_p1;
reg  signed [10:0] sext_ln1371_3_reg_903;
wire   [13:0] zext_ln14_fu_422_p1;
reg   [13:0] zext_ln14_reg_908;
reg   [7:0] Offset_load_reg_913;
reg   [7:0] in_temp_V_1_load_reg_918;
reg    ap_predicate_op116_read_state3;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
reg    ap_block_state23_io;
wire    ap_block_state24_pp0_stage0_iter21;
reg    ap_block_state24_io;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] in_temp_V_1_load_reg_918_pp0_iter1_reg;
reg   [7:0] window_V_1_2_loc_1_l_reg_924;
reg   [7:0] window_V_0_2_loc_1_l_reg_930;
reg   [0:0] icmp_ln42_reg_936;
reg   [0:0] icmp_ln42_reg_936_pp0_iter1_reg;
wire   [18:0] add_ln42_fu_456_p2;
wire   [8:0] select_ln42_fu_522_p3;
wire   [0:0] icmp_ln54_fu_530_p2;
reg   [0:0] icmp_ln54_reg_950;
reg   [9:0] line_buffer_V_0_addr_reg_954;
wire   [0:0] and_ln81_fu_570_p2;
reg   [0:0] and_ln81_reg_968_pp0_iter1_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter2_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter3_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter4_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter5_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter6_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter7_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter8_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter9_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter10_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter11_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter12_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter13_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter14_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter15_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter16_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter17_reg;
reg   [0:0] and_ln81_reg_968_pp0_iter18_reg;
wire   [9:0] col_fu_576_p2;
wire   [10:0] mul_ln1371_3_fu_641_p2;
reg   [10:0] mul_ln1371_3_reg_977;
wire   [11:0] mul_ln1371_4_fu_649_p2;
reg   [11:0] mul_ln1371_4_reg_982;
wire  signed [10:0] grp_fu_747_p3;
reg  signed [10:0] add_ln1371_reg_987;
reg    ap_enable_reg_pp0_iter1;
wire  signed [10:0] grp_fu_754_p3;
reg  signed [10:0] add_ln1371_4_reg_992;
wire   [13:0] add_ln1371_7_fu_727_p2;
reg   [13:0] add_ln1371_7_reg_997;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
wire   [63:0] zext_ln12_fu_359_p1;
wire   [63:0] zext_ln56_fu_536_p1;
wire   [63:0] zext_ln77_fu_554_p1;
reg   [7:0] in_temp_V_1_fu_108;
reg   [7:0] window_V_1_2_loc_1_fu_112;
reg   [7:0] ap_sig_allocacmp_window_V_1_2_loc_1_l;
reg   [7:0] window_V_0_2_loc_1_fu_116;
reg   [7:0] ap_sig_allocacmp_window_V_0_2_loc_1_l;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_462_p2;
wire   [8:0] add_ln42_1_fu_476_p2;
wire   [0:0] icmp_ln73_fu_482_p2;
wire   [0:0] icmp_ln73_1_fu_488_p2;
wire   [0:0] icmp_ln81_fu_502_p2;
wire   [0:0] icmp_ln81_2_fu_508_p2;
wire   [9:0] select_ln73_fu_468_p3;
wire   [0:0] select_ln73_1_fu_494_p3;
wire   [0:0] select_ln73_2_fu_514_p3;
wire   [0:0] icmp_ln81_1_fu_564_p2;
wire   [7:0] mul_ln1371_1_fu_632_p0;
wire  signed [2:0] mul_ln1371_1_fu_632_p1;
wire   [7:0] mul_ln1371_3_fu_641_p0;
wire  signed [2:0] mul_ln1371_3_fu_641_p1;
wire   [7:0] mul_ln1371_4_fu_649_p0;
wire   [3:0] mul_ln1371_4_fu_649_p1;
wire   [7:0] mul_ln1371_8_fu_661_p0;
wire  signed [2:0] mul_ln1371_8_fu_661_p1;
wire  signed [10:0] grp_fu_761_p3;
wire  signed [11:0] sext_ln1371_8_fu_696_p1;
wire  signed [11:0] sext_ln1371_9_fu_699_p1;
wire   [11:0] add_ln1371_2_fu_702_p2;
wire  signed [11:0] grp_fu_776_p3;
wire  signed [12:0] grp_fu_768_p3;
wire  signed [12:0] sext_ln1371_12_fu_715_p1;
(* use_dsp48 = "no" *) wire   [12:0] add_ln1371_6_fu_718_p2;
wire  signed [13:0] sext_ln1371_10_fu_708_p1;
wire  signed [13:0] sext_ln1371_13_fu_723_p1;
wire   [5:0] grp_fu_733_p1;
wire   [7:0] grp_fu_733_p2;
wire   [7:0] trunc_ln68_fu_737_p1;
wire   [7:0] grp_fu_747_p0;
wire  signed [1:0] grp_fu_747_p1;
wire   [10:0] grp_fu_747_p2;
wire   [7:0] grp_fu_754_p0;
wire  signed [2:0] grp_fu_754_p1;
wire   [10:0] grp_fu_754_p2;
wire   [7:0] grp_fu_761_p0;
wire  signed [1:0] grp_fu_761_p1;
wire   [7:0] grp_fu_768_p0;
wire  signed [2:0] grp_fu_768_p1;
wire   [11:0] grp_fu_768_p2;
wire   [7:0] grp_fu_776_p0;
wire  signed [1:0] grp_fu_776_p1;
reg    grp_fu_733_ce;
wire    ap_CS_fsm_state25;
wire    regslice_both_out_img_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_img_V_U_apdone_blk;
wire   [7:0] in_img_V_TDATA_int;
wire    in_img_V_TVALID_int;
reg    in_img_V_TREADY_int;
wire    regslice_both_in_img_V_U_ack_in;
wire   [7:0] out_img_V_TDATA_int;
reg    out_img_V_TVALID_int;
wire    out_img_V_TREADY_int;
wire    regslice_both_out_img_V_U_vld_out;
wire   [9:0] grp_fu_747_p00;
wire   [10:0] grp_fu_754_p00;
wire   [9:0] grp_fu_761_p00;
wire   [10:0] grp_fu_768_p00;
wire   [12:0] grp_fu_768_p20;
wire   [9:0] grp_fu_776_p00;
wire   [10:0] mul_ln1371_1_fu_632_p00;
wire   [10:0] mul_ln1371_3_fu_641_p00;
wire   [11:0] mul_ln1371_4_fu_649_p00;
wire   [10:0] mul_ln1371_8_fu_661_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 window_V_0_2 = 8'd0;
#0 window_V_1_2 = 8'd0;
#0 window_V_2_2 = 8'd0;
#0 window_V_0_1 = 8'd0;
#0 window_V_1_1 = 8'd0;
#0 window_V_2_1 = 8'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

Filter_Convolutiobkb #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_0_address0),
    .ce0(M_0_0_ce0),
    .q0(M_0_0_q0)
);

Filter_Convolutiocud #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_1_address0),
    .ce0(M_0_1_ce0),
    .q0(M_0_1_q0)
);

Filter_ConvolutiodEe #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_0_2_address0),
    .ce0(M_0_2_ce0),
    .q0(M_0_2_q0)
);

Filter_ConvolutioeOg #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_0_address0),
    .ce0(M_1_0_ce0),
    .q0(M_1_0_q0)
);

Filter_ConvolutiofYi #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_1_address0),
    .ce0(M_1_1_ce0),
    .q0(M_1_1_q0)
);

Filter_Convolutiog8j #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_1_2_address0),
    .ce0(M_1_2_ce0),
    .q0(M_1_2_q0)
);

Filter_Convolutiohbi #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_0_address0),
    .ce0(M_2_0_ce0),
    .q0(M_2_0_q0)
);

Filter_Convolutioibs #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_1_address0),
    .ce0(M_2_1_ce0),
    .q0(M_2_1_q0)
);

Filter_ConvolutiojbC #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
M_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(M_2_2_address0),
    .ce0(M_2_2_ce0),
    .q0(M_2_2_q0)
);

Filter_ConvolutiokbM #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SumF_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SumF_address0),
    .ce0(SumF_ce0),
    .q0(SumF_q0)
);

Filter_ConvolutiolbW #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Offset_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Offset_address0),
    .ce0(Offset_ce0),
    .q0(Offset_q0)
);

Filter_Convolutiomb6 #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
line_buffer_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_V_0_address0),
    .ce0(line_buffer_V_0_ce0),
    .q0(line_buffer_V_0_q0),
    .address1(line_buffer_V_0_addr_reg_954),
    .ce1(line_buffer_V_0_ce1),
    .we1(line_buffer_V_0_we1),
    .d1(line_buffer_V_1_q0)
);

Filter_Convolutiomb6 #(
    .DataWidth( 8 ),
    .AddressRange( 640 ),
    .AddressWidth( 10 ))
line_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_V_1_address0),
    .ce0(line_buffer_V_1_ce0),
    .q0(line_buffer_V_1_q0),
    .address1(line_buffer_V_1_address1),
    .ce1(line_buffer_V_1_ce1),
    .we1(line_buffer_V_1_we1),
    .d1(in_img_V_TDATA_int)
);

Filter_Convolutioocq #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
Filter_Convolutioocq_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_ln1371_7_reg_997),
    .din1(grp_fu_733_p1),
    .ce(grp_fu_733_ce),
    .dout(grp_fu_733_p2)
);

Filter_ConvolutiopcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_ConvolutiopcA_U2(
    .din0(grp_fu_747_p0),
    .din1(grp_fu_747_p1),
    .din2(grp_fu_747_p2),
    .dout(grp_fu_747_p3)
);

Filter_ConvolutioqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_ConvolutioqcK_U3(
    .din0(grp_fu_754_p0),
    .din1(grp_fu_754_p1),
    .din2(grp_fu_754_p2),
    .dout(grp_fu_754_p3)
);

Filter_ConvolutiopcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
Filter_ConvolutiopcA_U4(
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .din2(mul_ln1371_3_reg_977),
    .dout(grp_fu_761_p3)
);

Filter_ConvolutiorcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
Filter_ConvolutiorcU_U5(
    .din0(grp_fu_768_p0),
    .din1(grp_fu_768_p1),
    .din2(grp_fu_768_p2),
    .dout(grp_fu_768_p3)
);

Filter_Convolutiosc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
Filter_Convolutiosc4_U6(
    .din0(grp_fu_776_p0),
    .din1(grp_fu_776_p1),
    .din2(add_ln1371_4_reg_992),
    .dout(grp_fu_776_p3)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_img_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_img_V_TDATA),
    .vld_in(in_img_V_TVALID),
    .ack_in(regslice_both_in_img_V_U_ack_in),
    .data_out(in_img_V_TDATA_int),
    .vld_out(in_img_V_TVALID_int),
    .ack_out(in_img_V_TREADY_int),
    .apdone_blk(regslice_both_in_img_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_img_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_img_V_TDATA_int),
    .vld_in(out_img_V_TVALID_int),
    .ack_in(out_img_V_TREADY_int),
    .data_out(out_img_V_TDATA),
    .vld_out(regslice_both_out_img_V_U_vld_out),
    .ack_out(out_img_V_TREADY),
    .apdone_blk(regslice_both_out_img_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        col_0_reg_348 <= col_fu_576_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        col_0_reg_348 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln73_fu_542_p2) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        in_temp_V_1_fu_108 <= in_img_V_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_temp_V_1_fu_108 <= window_V_2_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        indvar_flatten_reg_326 <= add_ln42_fu_456_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_326 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        row_0_reg_337 <= select_ln42_fu_522_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_0_reg_337 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1))) begin
        window_V_0_2_loc_1_fu_116 <= line_buffer_V_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_V_0_2_loc_1_fu_116 <= window_V_0_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1))) begin
        window_V_1_2_loc_1_fu_112 <= line_buffer_V_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_V_1_2_loc_1_fu_112 <= window_V_1_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Offset_load_reg_913 <= Offset_q0;
        sext_ln12_1_reg_873 <= sext_ln12_1_fu_394_p1;
        sext_ln12_2_reg_888 <= sext_ln12_2_fu_406_p1;
        sext_ln12_3_reg_893 <= sext_ln12_3_fu_410_p1;
        sext_ln12_reg_863 <= sext_ln12_fu_386_p1;
        sext_ln1371_1_reg_878 <= sext_ln1371_1_fu_398_p1;
        sext_ln1371_2_reg_898 <= sext_ln1371_2_fu_414_p1;
        sext_ln1371_3_reg_903 <= sext_ln1371_3_fu_418_p1;
        sext_ln1371_reg_868 <= sext_ln1371_fu_390_p1;
        zext_ln12_1_reg_883[3 : 0] <= zext_ln12_1_fu_402_p1[3 : 0];
        zext_ln14_reg_908[4 : 0] <= zext_ln14_fu_422_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln81_reg_968))) begin
        add_ln1371_4_reg_992 <= grp_fu_754_p3;
        add_ln1371_reg_987 <= grp_fu_747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln81_reg_968_pp0_iter1_reg))) begin
        add_ln1371_7_reg_997 <= add_ln1371_7_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        and_ln81_reg_968 <= and_ln81_fu_570_p2;
        icmp_ln54_reg_950 <= icmp_ln54_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln81_reg_968_pp0_iter10_reg <= and_ln81_reg_968_pp0_iter9_reg;
        and_ln81_reg_968_pp0_iter11_reg <= and_ln81_reg_968_pp0_iter10_reg;
        and_ln81_reg_968_pp0_iter12_reg <= and_ln81_reg_968_pp0_iter11_reg;
        and_ln81_reg_968_pp0_iter13_reg <= and_ln81_reg_968_pp0_iter12_reg;
        and_ln81_reg_968_pp0_iter14_reg <= and_ln81_reg_968_pp0_iter13_reg;
        and_ln81_reg_968_pp0_iter15_reg <= and_ln81_reg_968_pp0_iter14_reg;
        and_ln81_reg_968_pp0_iter16_reg <= and_ln81_reg_968_pp0_iter15_reg;
        and_ln81_reg_968_pp0_iter17_reg <= and_ln81_reg_968_pp0_iter16_reg;
        and_ln81_reg_968_pp0_iter18_reg <= and_ln81_reg_968_pp0_iter17_reg;
        and_ln81_reg_968_pp0_iter19_reg <= and_ln81_reg_968_pp0_iter18_reg;
        and_ln81_reg_968_pp0_iter20_reg <= and_ln81_reg_968_pp0_iter19_reg;
        and_ln81_reg_968_pp0_iter2_reg <= and_ln81_reg_968_pp0_iter1_reg;
        and_ln81_reg_968_pp0_iter3_reg <= and_ln81_reg_968_pp0_iter2_reg;
        and_ln81_reg_968_pp0_iter4_reg <= and_ln81_reg_968_pp0_iter3_reg;
        and_ln81_reg_968_pp0_iter5_reg <= and_ln81_reg_968_pp0_iter4_reg;
        and_ln81_reg_968_pp0_iter6_reg <= and_ln81_reg_968_pp0_iter5_reg;
        and_ln81_reg_968_pp0_iter7_reg <= and_ln81_reg_968_pp0_iter6_reg;
        and_ln81_reg_968_pp0_iter8_reg <= and_ln81_reg_968_pp0_iter7_reg;
        and_ln81_reg_968_pp0_iter9_reg <= and_ln81_reg_968_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln81_reg_968_pp0_iter1_reg <= and_ln81_reg_968;
        icmp_ln42_reg_936 <= icmp_ln42_fu_450_p2;
        icmp_ln42_reg_936_pp0_iter1_reg <= icmp_ln42_reg_936;
        in_temp_V_1_load_reg_918 <= in_temp_V_1_fu_108;
        in_temp_V_1_load_reg_918_pp0_iter1_reg <= in_temp_V_1_load_reg_918;
        window_V_0_2_loc_1_l_reg_930 <= ap_sig_allocacmp_window_V_0_2_loc_1_l;
        window_V_1_2_loc_1_l_reg_924 <= ap_sig_allocacmp_window_V_1_2_loc_1_l;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_530_p2 == 1'd1) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        line_buffer_V_0_addr_reg_954 <= zext_ln56_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln81_reg_968))) begin
        mul_ln1371_3_reg_977 <= mul_ln1371_3_fu_641_p2;
        mul_ln1371_4_reg_982 <= mul_ln1371_4_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_reg_936 == 1'd0))) begin
        window_V_0_1 <= window_V_0_2_loc_1_l_reg_930;
        window_V_1_1 <= window_V_1_2_loc_1_l_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1))) begin
        window_V_0_2 <= line_buffer_V_0_q0;
        window_V_1_2 <= line_buffer_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln42_reg_936_pp0_iter1_reg == 1'd0))) begin
        window_V_2_1 <= in_temp_V_1_load_reg_918_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln73_fu_542_p2) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        window_V_2_2 <= in_img_V_TDATA_int;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_0_ce0 = 1'b1;
    end else begin
        M_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_1_ce0 = 1'b1;
    end else begin
        M_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_0_2_ce0 = 1'b1;
    end else begin
        M_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_0_ce0 = 1'b1;
    end else begin
        M_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_1_ce0 = 1'b1;
    end else begin
        M_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_1_2_ce0 = 1'b1;
    end else begin
        M_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_0_ce0 = 1'b1;
    end else begin
        M_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_1_ce0 = 1'b1;
    end else begin
        M_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        M_2_2_ce0 = 1'b1;
    end else begin
        M_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Offset_ce0 = 1'b1;
    end else begin
        Offset_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        SumF_ce0 = 1'b1;
    end else begin
        SumF_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_img_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_img_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_window_V_0_2_loc_1_l = line_buffer_V_0_q0;
    end else begin
        ap_sig_allocacmp_window_V_0_2_loc_1_l = window_V_0_2_loc_1_fu_116;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_window_V_1_2_loc_1_l = line_buffer_V_1_q0;
    end else begin
        ap_sig_allocacmp_window_V_1_2_loc_1_l = window_V_1_2_loc_1_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_733_ce = 1'b1;
    end else begin
        grp_fu_733_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln73_fu_542_p2) & (icmp_ln42_fu_450_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_img_V_TDATA_blk_n = in_img_V_TVALID_int;
    end else begin
        in_img_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_img_V_U_ack_in == 1'b1) & (in_img_V_TVALID == 1'b1))) begin
        in_img_V_TREADY = 1'b1;
    end else begin
        in_img_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op116_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_img_V_TREADY_int = 1'b1;
    end else begin
        in_img_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce0 = 1'b1;
    end else begin
        line_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce1 = 1'b1;
    end else begin
        line_buffer_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_reg_950 == 1'd1))) begin
        line_buffer_V_0_we1 = 1'b1;
    end else begin
        line_buffer_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce0 = 1'b1;
    end else begin
        line_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce1 = 1'b1;
    end else begin
        line_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln73_fu_542_p2) & (icmp_ln42_fu_450_p2 == 1'd0))) begin
        line_buffer_V_1_we1 = 1'b1;
    end else begin
        line_buffer_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter21 == 1'b1) & (1'd1 == and_ln81_reg_968_pp0_iter20_reg) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter20 == 1'b1) & (1'd1 == and_ln81_reg_968_pp0_iter19_reg) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_img_V_TDATA_blk_n = out_img_V_TREADY_int;
    end else begin
        out_img_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'd1 == and_ln81_reg_968_pp0_iter19_reg))) begin
        out_img_V_TVALID_int = 1'b1;
    end else begin
        out_img_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln42_fu_450_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter21 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter21 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln42_fu_450_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((regslice_both_out_img_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_0_address0 = zext_ln12_fu_359_p1;

assign M_0_1_address0 = zext_ln12_fu_359_p1;

assign M_0_2_address0 = zext_ln12_fu_359_p1;

assign M_1_0_address0 = zext_ln12_fu_359_p1;

assign M_1_1_address0 = zext_ln12_fu_359_p1;

assign M_1_2_address0 = zext_ln12_fu_359_p1;

assign M_2_0_address0 = zext_ln12_fu_359_p1;

assign M_2_1_address0 = zext_ln12_fu_359_p1;

assign M_2_2_address0 = zext_ln12_fu_359_p1;

assign Offset_address0 = zext_ln12_fu_359_p1;

assign SumF_address0 = zext_ln12_fu_359_p1;

assign add_ln1371_2_fu_702_p2 = ($signed(sext_ln1371_8_fu_696_p1) + $signed(sext_ln1371_9_fu_699_p1));

assign add_ln1371_6_fu_718_p2 = ($signed(grp_fu_768_p3) + $signed(sext_ln1371_12_fu_715_p1));

assign add_ln1371_7_fu_727_p2 = ($signed(sext_ln1371_10_fu_708_p1) + $signed(sext_ln1371_13_fu_723_p1));

assign add_ln42_1_fu_476_p2 = (row_0_reg_337 + 9'd1);

assign add_ln42_fu_456_p2 = (indvar_flatten_reg_326 + 19'd1);

assign and_ln73_fu_542_p2 = (select_ln73_1_fu_494_p3 & icmp_ln54_fu_530_p2);

assign and_ln81_fu_570_p2 = (select_ln73_2_fu_514_p3 & icmp_ln81_1_fu_564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((in_img_V_TVALID_int == 1'b0) & (ap_predicate_op116_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((in_img_V_TVALID_int == 1'b0) & (ap_predicate_op116_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((in_img_V_TVALID_int == 1'b0) & (ap_predicate_op116_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((out_img_V_TREADY_int == 1'b0) & (1'd1 == and_ln81_reg_968_pp0_iter19_reg));
end

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((out_img_V_TREADY_int == 1'b0) & (1'd1 == and_ln81_reg_968_pp0_iter20_reg));
end

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((in_img_V_TVALID_int == 1'b0) & (ap_predicate_op116_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op116_read_state3 = ((1'd1 == and_ln73_fu_542_p2) & (icmp_ln42_fu_450_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_576_p2 = (select_ln73_fu_468_p3 + 10'd1);

assign grp_fu_733_p1 = zext_ln14_reg_908;

assign grp_fu_747_p0 = grp_fu_747_p00;

assign grp_fu_747_p00 = window_V_0_1;

assign grp_fu_747_p1 = sext_ln12_reg_863;

assign grp_fu_747_p2 = ($signed({{1'b0}, {mul_ln1371_1_fu_632_p0}}) * $signed(mul_ln1371_1_fu_632_p1));

assign grp_fu_754_p0 = grp_fu_754_p00;

assign grp_fu_754_p00 = in_temp_V_1_load_reg_918;

assign grp_fu_754_p1 = sext_ln1371_2_reg_898;

assign grp_fu_754_p2 = ($signed({{1'b0}, {mul_ln1371_8_fu_661_p0}}) * $signed(mul_ln1371_8_fu_661_p1));

assign grp_fu_761_p0 = grp_fu_761_p00;

assign grp_fu_761_p00 = window_V_0_2_loc_1_fu_116;

assign grp_fu_761_p1 = sext_ln12_1_reg_873;

assign grp_fu_768_p0 = grp_fu_768_p00;

assign grp_fu_768_p00 = window_V_1_2_loc_1_fu_112;

assign grp_fu_768_p1 = sext_ln12_2_reg_888;

assign grp_fu_768_p2 = grp_fu_768_p20;

assign grp_fu_768_p20 = mul_ln1371_4_reg_982;

assign grp_fu_776_p0 = grp_fu_776_p00;

assign grp_fu_776_p00 = window_V_2_1;

assign grp_fu_776_p1 = sext_ln12_3_reg_893;

assign icmp_ln42_fu_450_p2 = ((indvar_flatten_reg_326 == 19'd308321) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_462_p2 = ((col_0_reg_348 == 10'd641) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_530_p2 = ((select_ln73_fu_468_p3 < 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_488_p2 = ((row_0_reg_337 < 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_482_p2 = ((add_ln42_1_fu_476_p2 < 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_564_p2 = ((select_ln73_fu_468_p3 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_2_fu_508_p2 = ((row_0_reg_337 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_502_p2 = ((add_ln42_1_fu_476_p2 != 9'd0) ? 1'b1 : 1'b0);

assign line_buffer_V_0_address0 = zext_ln56_fu_536_p1;

assign line_buffer_V_1_address0 = zext_ln56_fu_536_p1;

assign line_buffer_V_1_address1 = zext_ln77_fu_554_p1;

assign mul_ln1371_1_fu_632_p0 = mul_ln1371_1_fu_632_p00;

assign mul_ln1371_1_fu_632_p00 = window_V_0_2_loc_1_l_reg_930;

assign mul_ln1371_1_fu_632_p1 = sext_ln1371_reg_868;

assign mul_ln1371_3_fu_641_p0 = mul_ln1371_3_fu_641_p00;

assign mul_ln1371_3_fu_641_p00 = window_V_1_1;

assign mul_ln1371_3_fu_641_p1 = sext_ln1371_1_reg_878;

assign mul_ln1371_3_fu_641_p2 = ($signed({{1'b0}, {mul_ln1371_3_fu_641_p0}}) * $signed(mul_ln1371_3_fu_641_p1));

assign mul_ln1371_4_fu_649_p0 = mul_ln1371_4_fu_649_p00;

assign mul_ln1371_4_fu_649_p00 = window_V_1_2_loc_1_l_reg_924;

assign mul_ln1371_4_fu_649_p1 = zext_ln12_1_reg_883;

assign mul_ln1371_4_fu_649_p2 = (mul_ln1371_4_fu_649_p0 * mul_ln1371_4_fu_649_p1);

assign mul_ln1371_8_fu_661_p0 = mul_ln1371_8_fu_661_p00;

assign mul_ln1371_8_fu_661_p00 = in_temp_V_1_fu_108;

assign mul_ln1371_8_fu_661_p1 = sext_ln1371_3_reg_903;

assign out_img_V_TDATA_int = (trunc_ln68_fu_737_p1 + Offset_load_reg_913);

assign out_img_V_TVALID = regslice_both_out_img_V_U_vld_out;

assign select_ln42_fu_522_p3 = ((icmp_ln43_fu_462_p2[0:0] === 1'b1) ? add_ln42_1_fu_476_p2 : row_0_reg_337);

assign select_ln73_1_fu_494_p3 = ((icmp_ln43_fu_462_p2[0:0] === 1'b1) ? icmp_ln73_fu_482_p2 : icmp_ln73_1_fu_488_p2);

assign select_ln73_2_fu_514_p3 = ((icmp_ln43_fu_462_p2[0:0] === 1'b1) ? icmp_ln81_fu_502_p2 : icmp_ln81_2_fu_508_p2);

assign select_ln73_fu_468_p3 = ((icmp_ln43_fu_462_p2[0:0] === 1'b1) ? 10'd0 : col_0_reg_348);

assign sext_ln12_1_fu_394_p1 = $signed(M_0_2_q0);

assign sext_ln12_2_fu_406_p1 = $signed(M_1_2_q0);

assign sext_ln12_3_fu_410_p1 = $signed(M_2_0_q0);

assign sext_ln12_fu_386_p1 = $signed(M_0_0_q0);

assign sext_ln1371_10_fu_708_p1 = $signed(add_ln1371_2_fu_702_p2);

assign sext_ln1371_12_fu_715_p1 = grp_fu_776_p3;

assign sext_ln1371_13_fu_723_p1 = $signed(add_ln1371_6_fu_718_p2);

assign sext_ln1371_1_fu_398_p1 = $signed(M_1_0_q0);

assign sext_ln1371_2_fu_414_p1 = $signed(M_2_1_q0);

assign sext_ln1371_3_fu_418_p1 = $signed(M_2_2_q0);

assign sext_ln1371_8_fu_696_p1 = add_ln1371_reg_987;

assign sext_ln1371_9_fu_699_p1 = grp_fu_761_p3;

assign sext_ln1371_fu_390_p1 = $signed(M_0_1_q0);

assign trunc_ln68_fu_737_p1 = grp_fu_733_p2[7:0];

assign zext_ln12_1_fu_402_p1 = M_1_1_q0;

assign zext_ln12_fu_359_p1 = id_filter_V;

assign zext_ln14_fu_422_p1 = SumF_q0;

assign zext_ln56_fu_536_p1 = select_ln73_fu_468_p3;

assign zext_ln77_fu_554_p1 = select_ln73_fu_468_p3;

always @ (posedge ap_clk) begin
    zext_ln12_1_reg_883[11:4] <= 8'b00000000;
    zext_ln14_reg_908[13:5] <= 9'b000000000;
end

endmodule //Filter_Convolution
