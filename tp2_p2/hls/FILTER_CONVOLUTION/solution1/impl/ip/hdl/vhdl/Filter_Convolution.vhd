-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter_Convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    id_filter_V : IN STD_LOGIC_VECTOR (2 downto 0);
    in_img_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_img_V_TVALID : IN STD_LOGIC;
    in_img_V_TREADY : OUT STD_LOGIC;
    out_img_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_img_V_TVALID : OUT STD_LOGIC;
    out_img_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Filter_Convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter_Convolution,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.739000,HLS_SYN_LAT=308344,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1027,HLS_SYN_LUT=1035,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_4B461 : STD_LOGIC_VECTOR (18 downto 0) := "1001011010001100001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_281 : STD_LOGIC_VECTOR (9 downto 0) := "1010000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal window_V_0_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_1_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_2_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal M_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_0_ce0 : STD_LOGIC;
    signal M_0_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_1_ce0 : STD_LOGIC;
    signal M_0_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_0_2_ce0 : STD_LOGIC;
    signal M_0_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_0_ce0 : STD_LOGIC;
    signal M_1_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_1_ce0 : STD_LOGIC;
    signal M_1_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal M_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_1_2_ce0 : STD_LOGIC;
    signal M_1_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_0_ce0 : STD_LOGIC;
    signal M_2_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal M_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_1_ce0 : STD_LOGIC;
    signal M_2_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal M_2_2_ce0 : STD_LOGIC;
    signal M_2_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SumF_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SumF_ce0 : STD_LOGIC;
    signal SumF_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Offset_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Offset_ce0 : STD_LOGIC;
    signal Offset_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_0_ce0 : STD_LOGIC;
    signal line_buffer_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_0_ce1 : STD_LOGIC;
    signal line_buffer_V_0_we1 : STD_LOGIC;
    signal line_buffer_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_1_ce0 : STD_LOGIC;
    signal line_buffer_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_V_1_ce1 : STD_LOGIC;
    signal line_buffer_V_1_we1 : STD_LOGIC;
    signal window_V_0_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_1_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal window_V_2_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal in_img_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln42_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_img_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal and_ln81_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal and_ln81_reg_968_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_326 : STD_LOGIC_VECTOR (18 downto 0);
    signal row_0_reg_337 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_0_reg_348 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_reg_863 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln1371_fu_390_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_reg_868 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln12_1_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_1_reg_873 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1371_1_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_1_reg_878 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln12_1_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln12_1_reg_883 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln12_2_fu_406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln12_2_reg_888 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln12_3_fu_410_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_3_reg_893 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1371_2_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_2_reg_898 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_3_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_3_reg_903 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_fu_422_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln14_reg_908 : STD_LOGIC_VECTOR (13 downto 0);
    signal Offset_load_reg_913 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_temp_V_1_load_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op116_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_temp_V_1_load_reg_918_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_1_2_loc_1_l_reg_924 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_0_2_loc_1_l_reg_930 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln42_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_936_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_456_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln42_fu_522_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln54_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_V_0_addr_reg_954 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln81_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_reg_968_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_576_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1371_3_fu_641_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1371_3_reg_977 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1371_4_fu_649_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1371_4_reg_982 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_747_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1371_reg_987 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_754_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1371_4_reg_992 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1371_7_fu_727_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1371_7_reg_997 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal zext_ln12_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_temp_V_1_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_1_2_loc_1_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_window_V_1_2_loc_1_l : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_0_2_loc_1_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_window_V_0_2_loc_1_l : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln43_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_1_fu_476_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln73_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_2_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln73_1_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_2_fu_514_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_1_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1371_1_fu_632_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1371_1_fu_632_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln1371_3_fu_641_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1371_3_fu_641_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln1371_4_fu_649_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1371_4_fu_649_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1371_8_fu_661_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1371_8_fu_661_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1371_8_fu_696_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1371_9_fu_699_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1371_2_fu_702_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_776_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_768_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1371_12_fu_715_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1371_6_fu_718_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1371_6_fu_718_p2 : signal is "no";
    signal sext_ln1371_10_fu_708_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1371_13_fu_723_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_733_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_747_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_747_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_754_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_754_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_754_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_768_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_768_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_776_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_733_ce : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal regslice_both_out_img_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in_img_V_U_apdone_blk : STD_LOGIC;
    signal in_img_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal in_img_V_TVALID_int : STD_LOGIC;
    signal in_img_V_TREADY_int : STD_LOGIC;
    signal regslice_both_in_img_V_U_ack_in : STD_LOGIC;
    signal out_img_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal out_img_V_TVALID_int : STD_LOGIC;
    signal out_img_V_TREADY_int : STD_LOGIC;
    signal regslice_both_out_img_V_U_vld_out : STD_LOGIC;
    signal grp_fu_747_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_754_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_761_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_768_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_768_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_776_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1371_1_fu_632_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1371_3_fu_641_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1371_4_fu_649_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1371_8_fu_661_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component Filter_Convolutioocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter_ConvolutiopcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Filter_ConvolutioqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component Filter_ConvolutiorcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component Filter_Convolutiosc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Filter_Convolutiobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_Convolutiocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_ConvolutioeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Filter_Convolutiog8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_Convolutiohbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component Filter_Convolutioibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiojbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Filter_ConvolutiokbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Filter_ConvolutiolbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter_Convolutiomb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    M_0_0_U : component Filter_Convolutiobkb
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_0_address0,
        ce0 => M_0_0_ce0,
        q0 => M_0_0_q0);

    M_0_1_U : component Filter_Convolutiocud
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_1_address0,
        ce0 => M_0_1_ce0,
        q0 => M_0_1_q0);

    M_0_2_U : component Filter_ConvolutiodEe
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_0_2_address0,
        ce0 => M_0_2_ce0,
        q0 => M_0_2_q0);

    M_1_0_U : component Filter_ConvolutioeOg
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_0_address0,
        ce0 => M_1_0_ce0,
        q0 => M_1_0_q0);

    M_1_1_U : component Filter_ConvolutiofYi
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_1_address0,
        ce0 => M_1_1_ce0,
        q0 => M_1_1_q0);

    M_1_2_U : component Filter_Convolutiog8j
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_1_2_address0,
        ce0 => M_1_2_ce0,
        q0 => M_1_2_q0);

    M_2_0_U : component Filter_Convolutiohbi
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_0_address0,
        ce0 => M_2_0_ce0,
        q0 => M_2_0_q0);

    M_2_1_U : component Filter_Convolutioibs
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_1_address0,
        ce0 => M_2_1_ce0,
        q0 => M_2_1_q0);

    M_2_2_U : component Filter_ConvolutiojbC
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => M_2_2_address0,
        ce0 => M_2_2_ce0,
        q0 => M_2_2_q0);

    SumF_U : component Filter_ConvolutiokbM
    generic map (
        DataWidth => 5,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SumF_address0,
        ce0 => SumF_ce0,
        q0 => SumF_q0);

    Offset_U : component Filter_ConvolutiolbW
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Offset_address0,
        ce0 => Offset_ce0,
        q0 => Offset_q0);

    line_buffer_V_0_U : component Filter_Convolutiomb6
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_V_0_address0,
        ce0 => line_buffer_V_0_ce0,
        q0 => line_buffer_V_0_q0,
        address1 => line_buffer_V_0_addr_reg_954,
        ce1 => line_buffer_V_0_ce1,
        we1 => line_buffer_V_0_we1,
        d1 => line_buffer_V_1_q0);

    line_buffer_V_1_U : component Filter_Convolutiomb6
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_V_1_address0,
        ce0 => line_buffer_V_1_ce0,
        q0 => line_buffer_V_1_q0,
        address1 => line_buffer_V_1_address1,
        ce1 => line_buffer_V_1_ce1,
        we1 => line_buffer_V_1_we1,
        d1 => in_img_V_TDATA_int);

    Filter_Convolutioocq_U1 : component Filter_Convolutioocq
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_ln1371_7_reg_997,
        din1 => grp_fu_733_p1,
        ce => grp_fu_733_ce,
        dout => grp_fu_733_p2);

    Filter_ConvolutiopcA_U2 : component Filter_ConvolutiopcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_747_p0,
        din1 => grp_fu_747_p1,
        din2 => grp_fu_747_p2,
        dout => grp_fu_747_p3);

    Filter_ConvolutioqcK_U3 : component Filter_ConvolutioqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_754_p0,
        din1 => grp_fu_754_p1,
        din2 => grp_fu_754_p2,
        dout => grp_fu_754_p3);

    Filter_ConvolutiopcA_U4 : component Filter_ConvolutiopcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => mul_ln1371_3_reg_977,
        dout => grp_fu_761_p3);

    Filter_ConvolutiorcU_U5 : component Filter_ConvolutiorcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_768_p0,
        din1 => grp_fu_768_p1,
        din2 => grp_fu_768_p2,
        dout => grp_fu_768_p3);

    Filter_Convolutiosc4_U6 : component Filter_Convolutiosc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_776_p0,
        din1 => grp_fu_776_p1,
        din2 => add_ln1371_4_reg_992,
        dout => grp_fu_776_p3);

    regslice_both_in_img_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_img_V_TDATA,
        vld_in => in_img_V_TVALID,
        ack_in => regslice_both_in_img_V_U_ack_in,
        data_out => in_img_V_TDATA_int,
        vld_out => in_img_V_TVALID_int,
        ack_out => in_img_V_TREADY_int,
        apdone_blk => regslice_both_in_img_V_U_apdone_blk);

    regslice_both_out_img_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_img_V_TDATA_int,
        vld_in => out_img_V_TVALID_int,
        ack_in => out_img_V_TREADY_int,
        data_out => out_img_V_TDATA,
        vld_out => regslice_both_out_img_V_U_vld_out,
        ack_out => out_img_V_TREADY,
        apdone_blk => regslice_both_out_img_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then 
                col_0_reg_348 <= col_fu_576_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                col_0_reg_348 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    in_temp_V_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln73_fu_542_p2) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then 
                in_temp_V_1_fu_108 <= in_img_V_TDATA_int;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                in_temp_V_1_fu_108 <= window_V_2_2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_326 <= add_ln42_fu_456_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_326 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    row_0_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then 
                row_0_reg_337 <= select_ln42_fu_522_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                row_0_reg_337 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    window_V_0_2_loc_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1))) then 
                window_V_0_2_loc_1_fu_116 <= line_buffer_V_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                window_V_0_2_loc_1_fu_116 <= window_V_0_2;
            end if; 
        end if;
    end process;

    window_V_1_2_loc_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1))) then 
                window_V_1_2_loc_1_fu_112 <= line_buffer_V_1_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                window_V_1_2_loc_1_fu_112 <= window_V_1_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Offset_load_reg_913 <= Offset_q0;
                sext_ln12_1_reg_873 <= sext_ln12_1_fu_394_p1;
                sext_ln12_2_reg_888 <= sext_ln12_2_fu_406_p1;
                sext_ln12_3_reg_893 <= sext_ln12_3_fu_410_p1;
                sext_ln12_reg_863 <= sext_ln12_fu_386_p1;
                sext_ln1371_1_reg_878 <= sext_ln1371_1_fu_398_p1;
                sext_ln1371_2_reg_898 <= sext_ln1371_2_fu_414_p1;
                sext_ln1371_3_reg_903 <= sext_ln1371_3_fu_418_p1;
                sext_ln1371_reg_868 <= sext_ln1371_fu_390_p1;
                    zext_ln12_1_reg_883(3 downto 0) <= zext_ln12_1_fu_402_p1(3 downto 0);
                    zext_ln14_reg_908(4 downto 0) <= zext_ln14_fu_422_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln81_reg_968))) then
                add_ln1371_4_reg_992 <= grp_fu_754_p3;
                add_ln1371_reg_987 <= grp_fu_747_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter1_reg))) then
                add_ln1371_7_reg_997 <= add_ln1371_7_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then
                and_ln81_reg_968 <= and_ln81_fu_570_p2;
                icmp_ln54_reg_950 <= icmp_ln54_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln81_reg_968_pp0_iter10_reg <= and_ln81_reg_968_pp0_iter9_reg;
                and_ln81_reg_968_pp0_iter11_reg <= and_ln81_reg_968_pp0_iter10_reg;
                and_ln81_reg_968_pp0_iter12_reg <= and_ln81_reg_968_pp0_iter11_reg;
                and_ln81_reg_968_pp0_iter13_reg <= and_ln81_reg_968_pp0_iter12_reg;
                and_ln81_reg_968_pp0_iter14_reg <= and_ln81_reg_968_pp0_iter13_reg;
                and_ln81_reg_968_pp0_iter15_reg <= and_ln81_reg_968_pp0_iter14_reg;
                and_ln81_reg_968_pp0_iter16_reg <= and_ln81_reg_968_pp0_iter15_reg;
                and_ln81_reg_968_pp0_iter17_reg <= and_ln81_reg_968_pp0_iter16_reg;
                and_ln81_reg_968_pp0_iter18_reg <= and_ln81_reg_968_pp0_iter17_reg;
                and_ln81_reg_968_pp0_iter19_reg <= and_ln81_reg_968_pp0_iter18_reg;
                and_ln81_reg_968_pp0_iter20_reg <= and_ln81_reg_968_pp0_iter19_reg;
                and_ln81_reg_968_pp0_iter2_reg <= and_ln81_reg_968_pp0_iter1_reg;
                and_ln81_reg_968_pp0_iter3_reg <= and_ln81_reg_968_pp0_iter2_reg;
                and_ln81_reg_968_pp0_iter4_reg <= and_ln81_reg_968_pp0_iter3_reg;
                and_ln81_reg_968_pp0_iter5_reg <= and_ln81_reg_968_pp0_iter4_reg;
                and_ln81_reg_968_pp0_iter6_reg <= and_ln81_reg_968_pp0_iter5_reg;
                and_ln81_reg_968_pp0_iter7_reg <= and_ln81_reg_968_pp0_iter6_reg;
                and_ln81_reg_968_pp0_iter8_reg <= and_ln81_reg_968_pp0_iter7_reg;
                and_ln81_reg_968_pp0_iter9_reg <= and_ln81_reg_968_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln81_reg_968_pp0_iter1_reg <= and_ln81_reg_968;
                icmp_ln42_reg_936 <= icmp_ln42_fu_450_p2;
                icmp_ln42_reg_936_pp0_iter1_reg <= icmp_ln42_reg_936;
                in_temp_V_1_load_reg_918 <= in_temp_V_1_fu_108;
                in_temp_V_1_load_reg_918_pp0_iter1_reg <= in_temp_V_1_load_reg_918;
                window_V_0_2_loc_1_l_reg_930 <= ap_sig_allocacmp_window_V_0_2_loc_1_l;
                window_V_1_2_loc_1_l_reg_924 <= ap_sig_allocacmp_window_V_1_2_loc_1_l;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_530_p2 = ap_const_lv1_1) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then
                line_buffer_V_0_addr_reg_954 <= zext_ln56_fu_536_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln81_reg_968))) then
                mul_ln1371_3_reg_977 <= mul_ln1371_3_fu_641_p2;
                mul_ln1371_4_reg_982 <= mul_ln1371_4_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_reg_936 = ap_const_lv1_0))) then
                window_V_0_1 <= window_V_0_2_loc_1_l_reg_930;
                window_V_1_1 <= window_V_1_2_loc_1_l_reg_924;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1))) then
                window_V_0_2 <= line_buffer_V_0_q0;
                window_V_1_2 <= line_buffer_V_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln42_reg_936_pp0_iter1_reg = ap_const_lv1_0))) then
                window_V_2_1 <= in_temp_V_1_load_reg_918_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln73_fu_542_p2) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then
                window_V_2_2 <= in_img_V_TDATA_int;
            end if;
        end if;
    end process;
    zext_ln12_1_reg_883(11 downto 4) <= "00000000";
    zext_ln14_reg_908(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln42_fu_450_p2, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_CS_fsm_state25, regslice_both_out_img_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_450_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_450_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if (((regslice_both_out_img_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    M_0_0_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_0_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_0_ce0 <= ap_const_logic_1;
        else 
            M_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_1_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_0_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_1_ce0 <= ap_const_logic_1;
        else 
            M_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_0_2_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_0_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_0_2_ce0 <= ap_const_logic_1;
        else 
            M_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_0_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_1_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_0_ce0 <= ap_const_logic_1;
        else 
            M_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_1_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_1_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_1_ce0 <= ap_const_logic_1;
        else 
            M_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_1_2_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_1_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_1_2_ce0 <= ap_const_logic_1;
        else 
            M_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_0_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_2_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_0_ce0 <= ap_const_logic_1;
        else 
            M_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_1_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_2_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_1_ce0 <= ap_const_logic_1;
        else 
            M_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    M_2_2_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    M_2_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            M_2_2_ce0 <= ap_const_logic_1;
        else 
            M_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Offset_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    Offset_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            Offset_ce0 <= ap_const_logic_1;
        else 
            Offset_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SumF_address0 <= zext_ln12_fu_359_p1(3 - 1 downto 0);

    SumF_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            SumF_ce0 <= ap_const_logic_1;
        else 
            SumF_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1371_2_fu_702_p2 <= std_logic_vector(signed(sext_ln1371_8_fu_696_p1) + signed(sext_ln1371_9_fu_699_p1));
    add_ln1371_6_fu_718_p2 <= std_logic_vector(signed(grp_fu_768_p3) + signed(sext_ln1371_12_fu_715_p1));
    add_ln1371_7_fu_727_p2 <= std_logic_vector(signed(sext_ln1371_10_fu_708_p1) + signed(sext_ln1371_13_fu_723_p1));
    add_ln42_1_fu_476_p2 <= std_logic_vector(unsigned(row_0_reg_337) + unsigned(ap_const_lv9_1));
    add_ln42_fu_456_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_326) + unsigned(ap_const_lv19_1));
    and_ln73_fu_542_p2 <= (select_ln73_1_fu_494_p3 and icmp_ln54_fu_530_p2);
    and_ln81_fu_570_p2 <= (select_ln73_2_fu_514_p3 and icmp_ln81_1_fu_564_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_predicate_op116_read_state3, in_img_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((in_img_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op116_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_predicate_op116_read_state3, ap_block_state23_io, ap_block_state24_io, in_img_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((in_img_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op116_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_predicate_op116_read_state3, ap_block_state23_io, ap_block_state24_io, in_img_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1)) or ((in_img_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op116_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(and_ln81_reg_968_pp0_iter19_reg, out_img_V_TREADY_int)
    begin
                ap_block_state23_io <= ((out_img_V_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter19_reg));
    end process;

        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(and_ln81_reg_968_pp0_iter20_reg, out_img_V_TREADY_int)
    begin
                ap_block_state24_io <= ((out_img_V_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter20_reg));
    end process;

        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter0_assign_proc : process(ap_predicate_op116_read_state3, in_img_V_TVALID_int)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((in_img_V_TVALID_int = ap_const_logic_0) and (ap_predicate_op116_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln42_fu_450_p2)
    begin
        if ((icmp_ln42_fu_450_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, regslice_both_out_img_V_U_apdone_blk)
    begin
        if (((regslice_both_out_img_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op116_read_state3_assign_proc : process(icmp_ln42_fu_450_p2, and_ln73_fu_542_p2)
    begin
                ap_predicate_op116_read_state3 <= ((ap_const_lv1_1 = and_ln73_fu_542_p2) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, regslice_both_out_img_V_U_apdone_blk)
    begin
        if (((regslice_both_out_img_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_window_V_0_2_loc_1_l_assign_proc : process(line_buffer_V_0_q0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln54_reg_950, ap_enable_reg_pp0_iter1, window_V_0_2_loc_1_fu_116)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_window_V_0_2_loc_1_l <= line_buffer_V_0_q0;
        else 
            ap_sig_allocacmp_window_V_0_2_loc_1_l <= window_V_0_2_loc_1_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_window_V_1_2_loc_1_l_assign_proc : process(line_buffer_V_1_q0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln54_reg_950, ap_enable_reg_pp0_iter1, window_V_1_2_loc_1_fu_112)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_window_V_1_2_loc_1_l <= line_buffer_V_1_q0;
        else 
            ap_sig_allocacmp_window_V_1_2_loc_1_l <= window_V_1_2_loc_1_fu_112;
        end if; 
    end process;

    col_fu_576_p2 <= std_logic_vector(unsigned(select_ln73_fu_468_p3) + unsigned(ap_const_lv10_1));

    grp_fu_733_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_733_ce <= ap_const_logic_1;
        else 
            grp_fu_733_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_733_p1 <= zext_ln14_reg_908(6 - 1 downto 0);
    grp_fu_747_p0 <= grp_fu_747_p00(8 - 1 downto 0);
    grp_fu_747_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_1),10));
    grp_fu_747_p1 <= sext_ln12_reg_863(2 - 1 downto 0);
    grp_fu_747_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1371_1_fu_632_p0) * signed(mul_ln1371_1_fu_632_p1))), 11));
    grp_fu_754_p0 <= grp_fu_754_p00(8 - 1 downto 0);
    grp_fu_754_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_temp_V_1_load_reg_918),11));
    grp_fu_754_p1 <= sext_ln1371_2_reg_898(3 - 1 downto 0);
    grp_fu_754_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1371_8_fu_661_p0) * signed(mul_ln1371_8_fu_661_p1))), 11));
    grp_fu_761_p0 <= grp_fu_761_p00(8 - 1 downto 0);
    grp_fu_761_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_2_loc_1_fu_116),10));
    grp_fu_761_p1 <= sext_ln12_1_reg_873(2 - 1 downto 0);
    grp_fu_768_p0 <= grp_fu_768_p00(8 - 1 downto 0);
    grp_fu_768_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_2_loc_1_fu_112),11));
    grp_fu_768_p1 <= sext_ln12_2_reg_888(3 - 1 downto 0);
    grp_fu_768_p2 <= grp_fu_768_p20(12 - 1 downto 0);
    grp_fu_768_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1371_4_reg_982),13));
    grp_fu_776_p0 <= grp_fu_776_p00(8 - 1 downto 0);
    grp_fu_776_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_2_1),10));
    grp_fu_776_p1 <= sext_ln12_3_reg_893(2 - 1 downto 0);
    icmp_ln42_fu_450_p2 <= "1" when (indvar_flatten_reg_326 = ap_const_lv19_4B461) else "0";
    icmp_ln43_fu_462_p2 <= "1" when (col_0_reg_348 = ap_const_lv10_281) else "0";
    icmp_ln54_fu_530_p2 <= "1" when (unsigned(select_ln73_fu_468_p3) < unsigned(ap_const_lv10_280)) else "0";
    icmp_ln73_1_fu_488_p2 <= "1" when (unsigned(row_0_reg_337) < unsigned(ap_const_lv9_1E0)) else "0";
    icmp_ln73_fu_482_p2 <= "1" when (unsigned(add_ln42_1_fu_476_p2) < unsigned(ap_const_lv9_1E0)) else "0";
    icmp_ln81_1_fu_564_p2 <= "0" when (select_ln73_fu_468_p3 = ap_const_lv10_0) else "1";
    icmp_ln81_2_fu_508_p2 <= "0" when (row_0_reg_337 = ap_const_lv9_0) else "1";
    icmp_ln81_fu_502_p2 <= "0" when (add_ln42_1_fu_476_p2 = ap_const_lv9_0) else "1";

    in_img_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln42_fu_450_p2, and_ln73_fu_542_p2, in_img_V_TVALID_int)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln73_fu_542_p2) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_img_V_TDATA_blk_n <= in_img_V_TVALID_int;
        else 
            in_img_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_img_V_TREADY_assign_proc : process(in_img_V_TVALID, regslice_both_in_img_V_U_ack_in)
    begin
        if (((regslice_both_in_img_V_U_ack_in = ap_const_logic_1) and (in_img_V_TVALID = ap_const_logic_1))) then 
            in_img_V_TREADY <= ap_const_logic_1;
        else 
            in_img_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_img_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op116_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op116_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_img_V_TREADY_int <= ap_const_logic_1;
        else 
            in_img_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_0_address0 <= zext_ln56_fu_536_p1(10 - 1 downto 0);

    line_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln54_reg_950, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_950 = ap_const_lv1_1))) then 
            line_buffer_V_0_we1 <= ap_const_logic_1;
        else 
            line_buffer_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_1_address0 <= zext_ln56_fu_536_p1(10 - 1 downto 0);
    line_buffer_V_1_address1 <= zext_ln77_fu_554_p1(10 - 1 downto 0);

    line_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln42_fu_450_p2, and_ln73_fu_542_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln73_fu_542_p2) and (icmp_ln42_fu_450_p2 = ap_const_lv1_0))) then 
            line_buffer_V_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1371_1_fu_632_p0 <= mul_ln1371_1_fu_632_p00(8 - 1 downto 0);
    mul_ln1371_1_fu_632_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_0_2_loc_1_l_reg_930),11));
    mul_ln1371_1_fu_632_p1 <= sext_ln1371_reg_868(3 - 1 downto 0);
    mul_ln1371_3_fu_641_p0 <= mul_ln1371_3_fu_641_p00(8 - 1 downto 0);
    mul_ln1371_3_fu_641_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_1),11));
    mul_ln1371_3_fu_641_p1 <= sext_ln1371_1_reg_878(3 - 1 downto 0);
    mul_ln1371_3_fu_641_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1371_3_fu_641_p0) * signed(mul_ln1371_3_fu_641_p1))), 11));
    mul_ln1371_4_fu_649_p0 <= mul_ln1371_4_fu_649_p00(8 - 1 downto 0);
    mul_ln1371_4_fu_649_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_V_1_2_loc_1_l_reg_924),12));
    mul_ln1371_4_fu_649_p1 <= zext_ln12_1_reg_883(4 - 1 downto 0);
    mul_ln1371_4_fu_649_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1371_4_fu_649_p0) * unsigned(mul_ln1371_4_fu_649_p1), 12));
    mul_ln1371_8_fu_661_p0 <= mul_ln1371_8_fu_661_p00(8 - 1 downto 0);
    mul_ln1371_8_fu_661_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_temp_V_1_fu_108),11));
    mul_ln1371_8_fu_661_p1 <= sext_ln1371_3_reg_903(3 - 1 downto 0);

    out_img_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter20, and_ln81_reg_968_pp0_iter19_reg, ap_enable_reg_pp0_iter21, and_ln81_reg_968_pp0_iter20_reg, out_img_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter20_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter19_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_img_V_TDATA_blk_n <= out_img_V_TREADY_int;
        else 
            out_img_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_img_V_TDATA_int <= std_logic_vector(unsigned(trunc_ln68_fu_737_p1) + unsigned(Offset_load_reg_913));
    out_img_V_TVALID <= regslice_both_out_img_V_U_vld_out;

    out_img_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter20, and_ln81_reg_968_pp0_iter19_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln81_reg_968_pp0_iter19_reg))) then 
            out_img_V_TVALID_int <= ap_const_logic_1;
        else 
            out_img_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln42_fu_522_p3 <= 
        add_ln42_1_fu_476_p2 when (icmp_ln43_fu_462_p2(0) = '1') else 
        row_0_reg_337;
    select_ln73_1_fu_494_p3 <= 
        icmp_ln73_fu_482_p2 when (icmp_ln43_fu_462_p2(0) = '1') else 
        icmp_ln73_1_fu_488_p2;
    select_ln73_2_fu_514_p3 <= 
        icmp_ln81_fu_502_p2 when (icmp_ln43_fu_462_p2(0) = '1') else 
        icmp_ln81_2_fu_508_p2;
    select_ln73_fu_468_p3 <= 
        ap_const_lv10_0 when (icmp_ln43_fu_462_p2(0) = '1') else 
        col_0_reg_348;
        sext_ln12_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_2_q0),10));

        sext_ln12_2_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_1_2_q0),11));

        sext_ln12_3_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_0_q0),10));

        sext_ln12_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_0_q0),10));

        sext_ln1371_10_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1371_2_fu_702_p2),14));

        sext_ln1371_12_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_776_p3),13));

        sext_ln1371_13_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1371_6_fu_718_p2),14));

        sext_ln1371_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_1_0_q0),11));

        sext_ln1371_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_1_q0),11));

        sext_ln1371_3_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_2_2_q0),11));

        sext_ln1371_8_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1371_reg_987),12));

        sext_ln1371_9_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_761_p3),12));

        sext_ln1371_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(M_0_1_q0),11));

    trunc_ln68_fu_737_p1 <= grp_fu_733_p2(8 - 1 downto 0);
    zext_ln12_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M_1_1_q0),12));
    zext_ln12_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(id_filter_V),64));
    zext_ln14_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SumF_q0),14));
    zext_ln56_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_468_p3),64));
    zext_ln77_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_468_p3),64));
end behav;
