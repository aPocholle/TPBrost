// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "incrust.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic incrust::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic incrust::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> incrust::ap_ST_fsm_state1 = "1";
const sc_lv<5> incrust::ap_ST_fsm_state2 = "10";
const sc_lv<5> incrust::ap_ST_fsm_state3 = "100";
const sc_lv<5> incrust::ap_ST_fsm_state4 = "1000";
const sc_lv<5> incrust::ap_ST_fsm_state5 = "10000";
const sc_lv<32> incrust::ap_const_lv32_3 = "11";
const sc_lv<32> incrust::ap_const_lv32_4 = "100";
const int incrust::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> incrust::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> incrust::ap_const_lv32_1 = "1";
const sc_lv<1> incrust::ap_const_lv1_0 = "0";
const sc_lv<32> incrust::ap_const_lv32_2 = "10";
const sc_lv<9> incrust::ap_const_lv9_0 = "000000000";
const sc_lv<1> incrust::ap_const_lv1_1 = "1";
const sc_lv<10> incrust::ap_const_lv10_0 = "0000000000";
const sc_lv<32> incrust::ap_const_lv32_94 = "10010100";
const sc_lv<32> incrust::ap_const_lv32_45 = "1000101";
const sc_lv<9> incrust::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> incrust::ap_const_lv9_1 = "1";
const sc_lv<10> incrust::ap_const_lv10_280 = "1010000000";
const sc_lv<10> incrust::ap_const_lv10_1 = "1";
const bool incrust::ap_const_boolean_1 = true;

incrust::incrust(sc_module_name name) : sc_module(name), mVcdFile(0) {
    im_incrust_V_U = new incrust_im_incrusbkb("im_incrust_V_U");
    im_incrust_V_U->clk(ap_clk);
    im_incrust_V_U->reset(ap_rst_n_inv);
    im_incrust_V_U->address0(im_incrust_V_address0);
    im_incrust_V_U->ce0(im_incrust_V_ce0);
    im_incrust_V_U->q0(im_incrust_V_q0);
    incrust_AXILiteS_s_axi_U = new incrust_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("incrust_AXILiteS_s_axi_U");
    incrust_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    incrust_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    incrust_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    incrust_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    incrust_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    incrust_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    incrust_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    incrust_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    incrust_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    incrust_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    incrust_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    incrust_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    incrust_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    incrust_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    incrust_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    incrust_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    incrust_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    incrust_AXILiteS_s_axi_U->ACLK(ap_clk);
    incrust_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    incrust_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    incrust_AXILiteS_s_axi_U->start_x(start_x);
    incrust_AXILiteS_s_axi_U->start_y(start_y);
    regslice_both_s_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_s_axis_video_V_data_V_U");
    regslice_both_s_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_data_V_U->data_in(s_axis_video_TDATA);
    regslice_both_s_axis_video_V_data_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_data_V_U->ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in);
    regslice_both_s_axis_video_V_data_V_U->data_out(s_axis_video_TDATA_int);
    regslice_both_s_axis_video_V_data_V_U->vld_out(s_axis_video_TVALID_int);
    regslice_both_s_axis_video_V_data_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_data_V_U->apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk);
    regslice_both_s_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_keep_V_U");
    regslice_both_s_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_keep_V_U->data_in(s_axis_video_TKEEP);
    regslice_both_s_axis_video_V_keep_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_keep_V_U->ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in);
    regslice_both_s_axis_video_V_keep_V_U->data_out(s_axis_video_TKEEP_int);
    regslice_both_s_axis_video_V_keep_V_U->vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out);
    regslice_both_s_axis_video_V_keep_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_keep_V_U->apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_s_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_strb_V_U");
    regslice_both_s_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_strb_V_U->data_in(s_axis_video_TSTRB);
    regslice_both_s_axis_video_V_strb_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_strb_V_U->ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in);
    regslice_both_s_axis_video_V_strb_V_U->data_out(s_axis_video_TSTRB_int);
    regslice_both_s_axis_video_V_strb_V_U->vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out);
    regslice_both_s_axis_video_V_strb_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_strb_V_U->apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_s_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_user_V_U");
    regslice_both_s_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_user_V_U->data_in(s_axis_video_TUSER);
    regslice_both_s_axis_video_V_user_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_user_V_U->ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in);
    regslice_both_s_axis_video_V_user_V_U->data_out(s_axis_video_TUSER_int);
    regslice_both_s_axis_video_V_user_V_U->vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out);
    regslice_both_s_axis_video_V_user_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_user_V_U->apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk);
    regslice_both_s_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_last_V_U");
    regslice_both_s_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_last_V_U->data_in(s_axis_video_TLAST);
    regslice_both_s_axis_video_V_last_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_last_V_U->ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in);
    regslice_both_s_axis_video_V_last_V_U->data_out(s_axis_video_TLAST_int);
    regslice_both_s_axis_video_V_last_V_U->vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out);
    regslice_both_s_axis_video_V_last_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_last_V_U->apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk);
    regslice_both_s_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_id_V_U");
    regslice_both_s_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_id_V_U->data_in(s_axis_video_TID);
    regslice_both_s_axis_video_V_id_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_id_V_U->ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in);
    regslice_both_s_axis_video_V_id_V_U->data_out(s_axis_video_TID_int);
    regslice_both_s_axis_video_V_id_V_U->vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out);
    regslice_both_s_axis_video_V_id_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_id_V_U->apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk);
    regslice_both_s_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_dest_V_U");
    regslice_both_s_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_dest_V_U->data_in(s_axis_video_TDEST);
    regslice_both_s_axis_video_V_dest_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_dest_V_U->ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in);
    regslice_both_s_axis_video_V_dest_V_U->data_out(s_axis_video_TDEST_int);
    regslice_both_s_axis_video_V_dest_V_U->vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out);
    regslice_both_s_axis_video_V_dest_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_dest_V_U->apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk);
    regslice_both_m_axis_video_V_data_V_U = new regslice_both<8>("regslice_both_m_axis_video_V_data_V_U");
    regslice_both_m_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_data_V_U->data_in(m_axis_video_TDATA_int);
    regslice_both_m_axis_video_V_data_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_data_V_U->ack_in(m_axis_video_TREADY_int);
    regslice_both_m_axis_video_V_data_V_U->data_out(m_axis_video_TDATA);
    regslice_both_m_axis_video_V_data_V_U->vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out);
    regslice_both_m_axis_video_V_data_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_data_V_U->apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk);
    regslice_both_m_axis_video_V_keep_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_keep_V_U");
    regslice_both_m_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_keep_V_U->data_in(s_axis_video_TKEEP_int);
    regslice_both_m_axis_video_V_keep_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_keep_V_U->ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_keep_V_U->data_out(m_axis_video_TKEEP);
    regslice_both_m_axis_video_V_keep_V_U->vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out);
    regslice_both_m_axis_video_V_keep_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_keep_V_U->apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_m_axis_video_V_strb_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_strb_V_U");
    regslice_both_m_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_strb_V_U->data_in(s_axis_video_TSTRB_int);
    regslice_both_m_axis_video_V_strb_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_strb_V_U->ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_strb_V_U->data_out(m_axis_video_TSTRB);
    regslice_both_m_axis_video_V_strb_V_U->vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out);
    regslice_both_m_axis_video_V_strb_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_strb_V_U->apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_m_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_user_V_U");
    regslice_both_m_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_user_V_U->data_in(s_axis_video_TUSER_int);
    regslice_both_m_axis_video_V_user_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_user_V_U->ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_user_V_U->data_out(m_axis_video_TUSER);
    regslice_both_m_axis_video_V_user_V_U->vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out);
    regslice_both_m_axis_video_V_user_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_user_V_U->apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk);
    regslice_both_m_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_last_V_U");
    regslice_both_m_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_last_V_U->data_in(s_axis_video_TLAST_int);
    regslice_both_m_axis_video_V_last_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_last_V_U->ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_last_V_U->data_out(m_axis_video_TLAST);
    regslice_both_m_axis_video_V_last_V_U->vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out);
    regslice_both_m_axis_video_V_last_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_last_V_U->apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk);
    regslice_both_m_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_id_V_U");
    regslice_both_m_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_id_V_U->data_in(s_axis_video_TID_int);
    regslice_both_m_axis_video_V_id_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_id_V_U->ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_id_V_U->data_out(m_axis_video_TID);
    regslice_both_m_axis_video_V_id_V_U->vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out);
    regslice_both_m_axis_video_V_id_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_id_V_U->apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk);
    regslice_both_m_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_dest_V_U");
    regslice_both_m_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_dest_V_U->data_in(s_axis_video_TDEST_int);
    regslice_both_m_axis_video_V_dest_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_dest_V_U->ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_dest_V_U->data_out(m_axis_video_TDEST);
    regslice_both_m_axis_video_V_dest_V_U->vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out);
    regslice_both_m_axis_video_V_dest_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_dest_V_U->apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln24_1_fu_188_p2);
    sensitive << ( start_y );

    SC_METHOD(thread_add_ln24_fu_182_p2);
    sensitive << ( start_x );

    SC_METHOD(thread_and_ln24_fu_277_p2);
    sensitive << ( icmp_ln24_1_reg_388 );
    sensitive << ( xor_ln24_fu_271_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_i_fu_209_p2);
    sensitive << ( i_0_reg_160 );

    SC_METHOD(thread_icmp_ln18_fu_203_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( i_0_reg_160 );

    SC_METHOD(thread_icmp_ln20_fu_229_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_171 );

    SC_METHOD(thread_icmp_ln24_1_fu_220_p2);
    sensitive << ( add_ln24_1_reg_370 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln18_fu_203_p2 );
    sensitive << ( zext_ln18_fu_199_p1 );

    SC_METHOD(thread_icmp_ln24_2_fu_244_p2);
    sensitive << ( start_x_read_reg_360 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln20_fu_229_p2 );
    sensitive << ( zext_ln20_fu_225_p1 );

    SC_METHOD(thread_icmp_ln24_3_fu_249_p2);
    sensitive << ( add_ln24_reg_365 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln20_fu_229_p2 );
    sensitive << ( zext_ln20_fu_225_p1 );

    SC_METHOD(thread_icmp_ln24_fu_215_p2);
    sensitive << ( start_y_read_reg_355 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln18_fu_203_p2 );
    sensitive << ( zext_ln18_fu_199_p1 );

    SC_METHOD(thread_im_incrust_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln25_fu_282_p1 );

    SC_METHOD(thread_im_incrust_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_235_p2);
    sensitive << ( j_0_reg_171 );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_m_axis_video_TDATA_int);
    sensitive << ( im_incrust_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( and_ln24_reg_401 );
    sensitive << ( s_axis_video_TDATA_int );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_vld_out );

    SC_METHOD(thread_m_axis_video_TVALID_int);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( s_axis_video_TVALID_int );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_or_ln24_1_fu_265_p2);
    sensitive << ( or_ln24_fu_260_p2 );
    sensitive << ( xor_ln24_1_fu_254_p2 );

    SC_METHOD(thread_or_ln24_fu_260_p2);
    sensitive << ( icmp_ln24_reg_383 );
    sensitive << ( icmp_ln24_2_fu_244_p2 );

    SC_METHOD(thread_pixel_2_fu_293_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( pixel_1_fu_88 );

    SC_METHOD(thread_pixel_2_fu_293_p3);
    sensitive << ( and_ln24_fu_277_p2 );
    sensitive << ( pixel_fu_287_p2 );
    sensitive << ( pixel_2_fu_293_p2 );

    SC_METHOD(thread_pixel_fu_287_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( pixel_1_fu_88 );

    SC_METHOD(thread_pixel_fu_287_p2);
    sensitive << ( pixel_fu_287_p0 );

    SC_METHOD(thread_s_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_s_axis_video_TREADY);
    sensitive << ( s_axis_video_TVALID );
    sensitive << ( regslice_both_s_axis_video_V_data_V_U_ack_in );

    SC_METHOD(thread_s_axis_video_TREADY_int);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( s_axis_video_TVALID_int );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_sext_ln25_fu_282_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( pixel_1_fu_88 );

    SC_METHOD(thread_sext_ln25_fu_282_p1);
    sensitive << ( sext_ln25_fu_282_p0 );

    SC_METHOD(thread_xor_ln24_1_fu_254_p2);
    sensitive << ( icmp_ln24_3_fu_249_p2 );

    SC_METHOD(thread_xor_ln24_fu_271_p2);
    sensitive << ( or_ln24_1_fu_265_p2 );

    SC_METHOD(thread_zext_ln18_fu_199_p1);
    sensitive << ( i_0_reg_160 );

    SC_METHOD(thread_zext_ln20_fu_225_p1);
    sensitive << ( j_0_reg_171 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );
    sensitive << ( icmp_ln18_fu_203_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln20_fu_229_p2 );
    sensitive << ( s_axis_video_TVALID_int );
    sensitive << ( m_axis_video_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "incrust_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axis_video_TDATA, "(port)s_axis_video_TDATA");
    sc_trace(mVcdFile, s_axis_video_TVALID, "(port)s_axis_video_TVALID");
    sc_trace(mVcdFile, s_axis_video_TREADY, "(port)s_axis_video_TREADY");
    sc_trace(mVcdFile, s_axis_video_TKEEP, "(port)s_axis_video_TKEEP");
    sc_trace(mVcdFile, s_axis_video_TSTRB, "(port)s_axis_video_TSTRB");
    sc_trace(mVcdFile, s_axis_video_TUSER, "(port)s_axis_video_TUSER");
    sc_trace(mVcdFile, s_axis_video_TLAST, "(port)s_axis_video_TLAST");
    sc_trace(mVcdFile, s_axis_video_TID, "(port)s_axis_video_TID");
    sc_trace(mVcdFile, s_axis_video_TDEST, "(port)s_axis_video_TDEST");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, start_x, "start_x");
    sc_trace(mVcdFile, start_y, "start_y");
    sc_trace(mVcdFile, im_incrust_V_address0, "im_incrust_V_address0");
    sc_trace(mVcdFile, im_incrust_V_ce0, "im_incrust_V_ce0");
    sc_trace(mVcdFile, im_incrust_V_q0, "im_incrust_V_q0");
    sc_trace(mVcdFile, s_axis_video_TDATA_blk_n, "s_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, start_y_read_reg_355, "start_y_read_reg_355");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_x_read_reg_360, "start_x_read_reg_360");
    sc_trace(mVcdFile, add_ln24_fu_182_p2, "add_ln24_fu_182_p2");
    sc_trace(mVcdFile, add_ln24_reg_365, "add_ln24_reg_365");
    sc_trace(mVcdFile, add_ln24_1_fu_188_p2, "add_ln24_1_fu_188_p2");
    sc_trace(mVcdFile, add_ln24_1_reg_370, "add_ln24_1_reg_370");
    sc_trace(mVcdFile, i_fu_209_p2, "i_fu_209_p2");
    sc_trace(mVcdFile, i_reg_378, "i_reg_378");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_apdone_blk, "regslice_both_m_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, icmp_ln24_fu_215_p2, "icmp_ln24_fu_215_p2");
    sc_trace(mVcdFile, icmp_ln24_reg_383, "icmp_ln24_reg_383");
    sc_trace(mVcdFile, icmp_ln18_fu_203_p2, "icmp_ln18_fu_203_p2");
    sc_trace(mVcdFile, icmp_ln24_1_fu_220_p2, "icmp_ln24_1_fu_220_p2");
    sc_trace(mVcdFile, icmp_ln24_1_reg_388, "icmp_ln24_1_reg_388");
    sc_trace(mVcdFile, j_fu_235_p2, "j_fu_235_p2");
    sc_trace(mVcdFile, j_reg_396, "j_reg_396");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln24_fu_277_p2, "and_ln24_fu_277_p2");
    sc_trace(mVcdFile, and_ln24_reg_401, "and_ln24_reg_401");
    sc_trace(mVcdFile, icmp_ln20_fu_229_p2, "icmp_ln20_fu_229_p2");
    sc_trace(mVcdFile, i_0_reg_160, "i_0_reg_160");
    sc_trace(mVcdFile, j_0_reg_171, "j_0_reg_171");
    sc_trace(mVcdFile, sext_ln25_fu_282_p1, "sext_ln25_fu_282_p1");
    sc_trace(mVcdFile, pixel_1_fu_88, "pixel_1_fu_88");
    sc_trace(mVcdFile, pixel_2_fu_293_p3, "pixel_2_fu_293_p3");
    sc_trace(mVcdFile, zext_ln18_fu_199_p1, "zext_ln18_fu_199_p1");
    sc_trace(mVcdFile, zext_ln20_fu_225_p1, "zext_ln20_fu_225_p1");
    sc_trace(mVcdFile, icmp_ln24_3_fu_249_p2, "icmp_ln24_3_fu_249_p2");
    sc_trace(mVcdFile, icmp_ln24_2_fu_244_p2, "icmp_ln24_2_fu_244_p2");
    sc_trace(mVcdFile, or_ln24_fu_260_p2, "or_ln24_fu_260_p2");
    sc_trace(mVcdFile, xor_ln24_1_fu_254_p2, "xor_ln24_1_fu_254_p2");
    sc_trace(mVcdFile, or_ln24_1_fu_265_p2, "or_ln24_1_fu_265_p2");
    sc_trace(mVcdFile, xor_ln24_fu_271_p2, "xor_ln24_fu_271_p2");
    sc_trace(mVcdFile, sext_ln25_fu_282_p0, "sext_ln25_fu_282_p0");
    sc_trace(mVcdFile, pixel_fu_287_p0, "pixel_fu_287_p0");
    sc_trace(mVcdFile, pixel_fu_287_p2, "pixel_fu_287_p2");
    sc_trace(mVcdFile, pixel_2_fu_293_p2, "pixel_2_fu_293_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_apdone_blk, "regslice_both_s_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDATA_int, "s_axis_video_TDATA_int");
    sc_trace(mVcdFile, s_axis_video_TVALID_int, "s_axis_video_TVALID_int");
    sc_trace(mVcdFile, s_axis_video_TREADY_int, "s_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_ack_in, "regslice_both_s_axis_video_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_apdone_blk, "regslice_both_s_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TKEEP_int, "s_axis_video_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_vld_out, "regslice_both_s_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_ack_in, "regslice_both_s_axis_video_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_apdone_blk, "regslice_both_s_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TSTRB_int, "s_axis_video_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_vld_out, "regslice_both_s_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_ack_in, "regslice_both_s_axis_video_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_apdone_blk, "regslice_both_s_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TUSER_int, "s_axis_video_TUSER_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_vld_out, "regslice_both_s_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_ack_in, "regslice_both_s_axis_video_V_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_apdone_blk, "regslice_both_s_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TLAST_int, "s_axis_video_TLAST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_vld_out, "regslice_both_s_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_ack_in, "regslice_both_s_axis_video_V_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_apdone_blk, "regslice_both_s_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TID_int, "s_axis_video_TID_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_vld_out, "regslice_both_s_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_ack_in, "regslice_both_s_axis_video_V_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_apdone_blk, "regslice_both_s_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDEST_int, "s_axis_video_TDEST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_vld_out, "regslice_both_s_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_ack_in, "regslice_both_s_axis_video_V_dest_V_U_ack_in");
    sc_trace(mVcdFile, m_axis_video_TDATA_int, "m_axis_video_TDATA_int");
    sc_trace(mVcdFile, m_axis_video_TVALID_int, "m_axis_video_TVALID_int");
    sc_trace(mVcdFile, m_axis_video_TREADY_int, "m_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_vld_out, "regslice_both_m_axis_video_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_apdone_blk, "regslice_both_m_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_vld_out, "regslice_both_m_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_apdone_blk, "regslice_both_m_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_vld_out, "regslice_both_m_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_apdone_blk, "regslice_both_m_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_vld_out, "regslice_both_m_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_apdone_blk, "regslice_both_m_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_vld_out, "regslice_both_m_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_apdone_blk, "regslice_both_m_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_vld_out, "regslice_both_m_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_apdone_blk, "regslice_both_m_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_vld_out, "regslice_both_m_axis_video_V_dest_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("incrust.hdltvin.dat");
    mHdltvoutHandle.open("incrust.hdltvout.dat");
}

incrust::~incrust() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete im_incrust_V_U;
    delete incrust_AXILiteS_s_axi_U;
    delete regslice_both_s_axis_video_V_data_V_U;
    delete regslice_both_s_axis_video_V_keep_V_U;
    delete regslice_both_s_axis_video_V_strb_V_U;
    delete regslice_both_s_axis_video_V_user_V_U;
    delete regslice_both_s_axis_video_V_last_V_U;
    delete regslice_both_s_axis_video_V_id_V_U;
    delete regslice_both_s_axis_video_V_dest_V_U;
    delete regslice_both_m_axis_video_V_data_V_U;
    delete regslice_both_m_axis_video_V_keep_V_U;
    delete regslice_both_m_axis_video_V_strb_V_U;
    delete regslice_both_m_axis_video_V_user_V_U;
    delete regslice_both_m_axis_video_V_last_V_U;
    delete regslice_both_m_axis_video_V_id_V_U;
    delete regslice_both_m_axis_video_V_dest_V_U;
}

void incrust::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void incrust::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_229_p2.read(), ap_const_lv1_1))) {
        i_0_reg_160 = i_reg_378.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_0_reg_160 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_203_p2.read(), ap_const_lv1_0))) {
        j_0_reg_171 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
        j_0_reg_171 = j_reg_396.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_229_p2.read()))) {
        pixel_1_fu_88 = pixel_2_fu_293_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        pixel_1_fu_88 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        add_ln24_1_reg_370 = add_ln24_1_fu_188_p2.read();
        add_ln24_reg_365 = add_ln24_fu_182_p2.read();
        start_x_read_reg_360 = start_x.read();
        start_y_read_reg_355 = start_y.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_229_p2.read()))) {
        and_ln24_reg_401 = and_ln24_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        i_reg_378 = i_fu_209_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln18_fu_203_p2.read(), ap_const_lv1_0))) {
        icmp_ln24_1_reg_388 = icmp_ln24_1_fu_220_p2.read();
        icmp_ln24_reg_383 = icmp_ln24_fu_215_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_396 = j_fu_235_p2.read();
    }
}

void incrust::thread_add_ln24_1_fu_188_p2() {
    add_ln24_1_fu_188_p2 = (!start_y.read().is_01() || !ap_const_lv32_45.is_01())? sc_lv<32>(): (sc_biguint<32>(start_y.read()) + sc_biguint<32>(ap_const_lv32_45));
}

void incrust::thread_add_ln24_fu_182_p2() {
    add_ln24_fu_182_p2 = (!start_x.read().is_01() || !ap_const_lv32_94.is_01())? sc_lv<32>(): (sc_biguint<32>(start_x.read()) + sc_biguint<32>(ap_const_lv32_94));
}

void incrust::thread_and_ln24_fu_277_p2() {
    and_ln24_fu_277_p2 = (icmp_ln24_1_reg_388.read() & xor_ln24_fu_271_p2.read());
}

void incrust::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void incrust::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void incrust::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void incrust::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void incrust::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void incrust::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void incrust::thread_i_fu_209_p2() {
    i_fu_209_p2 = (!i_0_reg_160.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_160.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void incrust::thread_icmp_ln18_fu_203_p2() {
    icmp_ln18_fu_203_p2 = (!i_0_reg_160.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_160.read() == ap_const_lv9_1E0);
}

void incrust::thread_icmp_ln20_fu_229_p2() {
    icmp_ln20_fu_229_p2 = (!j_0_reg_171.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_171.read() == ap_const_lv10_280);
}

void incrust::thread_icmp_ln24_1_fu_220_p2() {
    icmp_ln24_1_fu_220_p2 = (!zext_ln18_fu_199_p1.read().is_01() || !add_ln24_1_reg_370.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln18_fu_199_p1.read()) < sc_bigint<32>(add_ln24_1_reg_370.read()));
}

void incrust::thread_icmp_ln24_2_fu_244_p2() {
    icmp_ln24_2_fu_244_p2 = (!zext_ln20_fu_225_p1.read().is_01() || !start_x_read_reg_360.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln20_fu_225_p1.read()) < sc_bigint<32>(start_x_read_reg_360.read()));
}

void incrust::thread_icmp_ln24_3_fu_249_p2() {
    icmp_ln24_3_fu_249_p2 = (!zext_ln20_fu_225_p1.read().is_01() || !add_ln24_reg_365.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln20_fu_225_p1.read()) < sc_bigint<32>(add_ln24_reg_365.read()));
}

void incrust::thread_icmp_ln24_fu_215_p2() {
    icmp_ln24_fu_215_p2 = (!zext_ln18_fu_199_p1.read().is_01() || !start_y_read_reg_355.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln18_fu_199_p1.read()) < sc_bigint<32>(start_y_read_reg_355.read()));
}

void incrust::thread_im_incrust_V_address0() {
    im_incrust_V_address0 =  (sc_lv<14>) (sext_ln25_fu_282_p1.read());
}

void incrust::thread_im_incrust_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        im_incrust_V_ce0 = ap_const_logic_1;
    } else {
        im_incrust_V_ce0 = ap_const_logic_0;
    }
}

void incrust::thread_j_fu_235_p2() {
    j_fu_235_p2 = (!j_0_reg_171.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_0_reg_171.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void incrust::thread_m_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int.read();
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void incrust::thread_m_axis_video_TDATA_int() {
    m_axis_video_TDATA_int = (!and_ln24_reg_401.read()[0].is_01())? sc_lv<8>(): ((and_ln24_reg_401.read()[0].to_bool())? im_incrust_V_q0.read(): s_axis_video_TDATA_int.read());
}

void incrust::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out.read();
}

void incrust::thread_m_axis_video_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read())))) {
        m_axis_video_TVALID_int = ap_const_logic_1;
    } else {
        m_axis_video_TVALID_int = ap_const_logic_0;
    }
}

void incrust::thread_or_ln24_1_fu_265_p2() {
    or_ln24_1_fu_265_p2 = (or_ln24_fu_260_p2.read() | xor_ln24_1_fu_254_p2.read());
}

void incrust::thread_or_ln24_fu_260_p2() {
    or_ln24_fu_260_p2 = (icmp_ln24_2_fu_244_p2.read() | icmp_ln24_reg_383.read());
}

void incrust::thread_pixel_2_fu_293_p2() {
    pixel_2_fu_293_p2 = pixel_1_fu_88.read();
}

void incrust::thread_pixel_2_fu_293_p3() {
    pixel_2_fu_293_p3 = (!and_ln24_fu_277_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln24_fu_277_p2.read()[0].to_bool())? pixel_fu_287_p2.read(): pixel_2_fu_293_p2.read());
}

void incrust::thread_pixel_fu_287_p0() {
    pixel_fu_287_p0 = pixel_1_fu_88.read();
}

void incrust::thread_pixel_fu_287_p2() {
    pixel_fu_287_p2 = (!pixel_fu_287_p0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(pixel_fu_287_p0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void incrust::thread_s_axis_video_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int.read();
    } else {
        s_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void incrust::thread_s_axis_video_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_s_axis_video_V_data_V_U_ack_in.read()))) {
        s_axis_video_TREADY = ap_const_logic_1;
    } else {
        s_axis_video_TREADY = ap_const_logic_0;
    }
}

void incrust::thread_s_axis_video_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read())))) {
        s_axis_video_TREADY_int = ap_const_logic_1;
    } else {
        s_axis_video_TREADY_int = ap_const_logic_0;
    }
}

void incrust::thread_sext_ln25_fu_282_p0() {
    sext_ln25_fu_282_p0 = pixel_1_fu_88.read();
}

void incrust::thread_sext_ln25_fu_282_p1() {
    sext_ln25_fu_282_p1 = esl_sext<64,32>(sext_ln25_fu_282_p0.read());
}

void incrust::thread_xor_ln24_1_fu_254_p2() {
    xor_ln24_1_fu_254_p2 = (icmp_ln24_3_fu_249_p2.read() ^ ap_const_lv1_1);
}

void incrust::thread_xor_ln24_fu_271_p2() {
    xor_ln24_fu_271_p2 = (or_ln24_1_fu_265_p2.read() ^ ap_const_lv1_1);
}

void incrust::thread_zext_ln18_fu_199_p1() {
    zext_ln18_fu_199_p1 = esl_zext<32,9>(i_0_reg_160.read());
}

void incrust::thread_zext_ln20_fu_225_p1() {
    zext_ln20_fu_225_p1 = esl_zext<32,10>(j_0_reg_171.read());
}

void incrust::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln18_fu_203_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln18_fu_203_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_229_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(m_axis_video_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void incrust::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDATA\" :  \"" << s_axis_video_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TVALID\" :  \"" << s_axis_video_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axis_video_TREADY\" :  \"" << s_axis_video_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TKEEP\" :  \"" << s_axis_video_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TSTRB\" :  \"" << s_axis_video_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TUSER\" :  \"" << s_axis_video_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TLAST\" :  \"" << s_axis_video_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TID\" :  \"" << s_axis_video_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDEST\" :  \"" << s_axis_video_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

