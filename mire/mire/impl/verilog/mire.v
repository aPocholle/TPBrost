// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mire,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.763500,HLS_SYN_LAT=615361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=171,HLS_VERSION=2019_2}" *)

module mire (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_red,
        p_red_ap_vld,
        p_red_ap_ack,
        p_green,
        p_green_ap_vld,
        p_green_ap_ack,
        p_blue,
        p_blue_ap_vld,
        p_blue_ap_ack
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] p_red;
output   p_red_ap_vld;
input   p_red_ap_ack;
output  [7:0] p_green;
output   p_green_ap_vld;
input   p_green_ap_ack;
output  [7:0] p_blue;
output   p_blue_ap_vld;
input   p_blue_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_red_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln12_fu_107_p2;
wire    ap_CS_fsm_state4;
reg    p_green_blk_n;
reg    p_blue_blk_n;
wire   [8:0] y_fu_101_p2;
reg   [8:0] y_reg_179;
wire    ap_CS_fsm_state2;
wire    regslice_forward_p_red_U_apdone_blk;
wire    regslice_forward_p_green_U_apdone_blk;
wire    regslice_forward_p_blue_U_apdone_blk;
reg    ap_block_state2;
wire   [9:0] x_fu_113_p2;
reg   [9:0] x_reg_187;
reg    ap_block_state3_io;
reg   [8:0] y_0_reg_73;
reg   [9:0] x_0_reg_84;
reg    ap_block_state4_io;
wire   [0:0] icmp_ln11_fu_95_p2;
wire   [0:0] icmp_ln20_fu_125_p2;
wire   [0:0] xor_ln15_fu_131_p2;
wire   [0:0] icmp_ln15_fu_119_p2;
wire   [0:0] xor_ln15_1_fu_146_p2;
wire   [0:0] and_ln15_fu_152_p2;
reg   [3:0] ap_NS_fsm;
wire   [7:0] p_red_int;
reg    p_red_ap_vld_int;
wire    p_red_ap_ack_int;
wire    regslice_forward_p_red_U_vld_out;
wire   [7:0] p_green_int;
reg    p_green_ap_vld_int;
wire    p_green_ap_ack_int;
wire    regslice_forward_p_green_U_vld_out;
wire   [7:0] p_blue_int;
reg    p_blue_ap_vld_int;
wire    p_blue_ap_ack_int;
wire    regslice_forward_p_blue_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

regslice_forward #(
    .DataWidth( 8 ))
regslice_forward_p_red_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_red_int),
    .vld_in(p_red_ap_vld_int),
    .ack_in(p_red_ap_ack_int),
    .data_out(p_red),
    .vld_out(regslice_forward_p_red_U_vld_out),
    .ack_out(p_red_ap_ack),
    .apdone_blk(regslice_forward_p_red_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 8 ))
regslice_forward_p_green_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_green_int),
    .vld_in(p_green_ap_vld_int),
    .ack_in(p_green_ap_ack_int),
    .data_out(p_green),
    .vld_out(regslice_forward_p_green_U_vld_out),
    .ack_out(p_green_ap_ack),
    .apdone_blk(regslice_forward_p_green_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 8 ))
regslice_forward_p_blue_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_blue_int),
    .vld_in(p_blue_ap_vld_int),
    .ack_in(p_blue_ap_ack_int),
    .data_out(p_blue),
    .vld_out(regslice_forward_p_blue_U_vld_out),
    .ack_out(p_blue_ap_ack),
    .apdone_blk(regslice_forward_p_blue_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (icmp_ln11_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_84 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
        x_0_reg_84 <= x_reg_187;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_73 <= y_reg_179;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_73 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_187 <= x_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_179 <= y_fu_101_p2;
    end
end

always @ (*) begin
    if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (icmp_ln11_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (icmp_ln11_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_blue_ap_vld_int = 1'b1;
    end else begin
        p_blue_ap_vld_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        p_blue_blk_n = p_blue_ap_ack_int;
    end else begin
        p_blue_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_green_ap_vld_int = 1'b1;
    end else begin
        p_green_ap_vld_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        p_green_blk_n = p_green_ap_ack_int;
    end else begin
        p_green_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_red_ap_vld_int = 1'b1;
    end else begin
        p_red_ap_vld_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        p_red_blk_n = p_red_ap_ack_int;
    end else begin
        p_red_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (icmp_ln11_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1)) & (icmp_ln11_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state3_io) & (icmp_ln12_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln15_fu_152_p2 = (xor_ln15_1_fu_146_p2 & icmp_ln20_fu_125_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((regslice_forward_p_blue_U_apdone_blk == 1'b1) | (regslice_forward_p_green_U_apdone_blk == 1'b1) | (regslice_forward_p_red_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = (((icmp_ln12_fu_107_p2 == 1'd0) & (p_blue_ap_ack_int == 1'b0)) | ((icmp_ln12_fu_107_p2 == 1'd0) & (p_green_ap_ack_int == 1'b0)) | ((icmp_ln12_fu_107_p2 == 1'd0) & (p_red_ap_ack_int == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((p_blue_ap_ack_int == 1'b0) | (p_green_ap_ack_int == 1'b0) | (p_red_ap_ack_int == 1'b0));
end

assign icmp_ln11_fu_95_p2 = ((y_0_reg_73 == 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_107_p2 = ((x_0_reg_84 == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_119_p2 = ((x_0_reg_84 < 10'd213) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_125_p2 = ((x_0_reg_84 < 10'd426) ? 1'b1 : 1'b0);

assign p_blue_ap_vld = regslice_forward_p_blue_U_vld_out;

assign p_blue_int = ((xor_ln15_fu_131_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_green_ap_vld = regslice_forward_p_green_U_vld_out;

assign p_green_int = ((and_ln15_fu_152_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_red_ap_vld = regslice_forward_p_red_U_vld_out;

assign p_red_int = ((icmp_ln15_fu_119_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign x_fu_113_p2 = (x_0_reg_84 + 10'd1);

assign xor_ln15_1_fu_146_p2 = (icmp_ln15_fu_119_p2 ^ 1'd1);

assign xor_ln15_fu_131_p2 = (icmp_ln20_fu_125_p2 ^ 1'd1);

assign y_fu_101_p2 = (y_0_reg_73 + 9'd1);

endmodule //mire
