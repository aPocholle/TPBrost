// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mire_HH_
#define _mire_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mire : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > p_red;
    sc_out< sc_logic > p_red_ap_vld;
    sc_in< sc_logic > p_red_ap_ack;
    sc_out< sc_lv<8> > p_green;
    sc_out< sc_logic > p_green_ap_vld;
    sc_in< sc_logic > p_green_ap_ack;
    sc_out< sc_lv<8> > p_blue;
    sc_out< sc_logic > p_blue_ap_vld;
    sc_in< sc_logic > p_blue_ap_ack;


    // Module declarations
    mire(sc_module_name name);
    SC_HAS_PROCESS(mire);

    ~mire();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_forward<8>* regslice_forward_p_red_U;
    regslice_forward<8>* regslice_forward_p_green_U;
    regslice_forward<8>* regslice_forward_p_blue_U;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_red_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln12_fu_107_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > p_green_blk_n;
    sc_signal< sc_logic > p_blue_blk_n;
    sc_signal< sc_lv<9> > y_fu_101_p2;
    sc_signal< sc_lv<9> > y_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > regslice_forward_p_red_U_apdone_blk;
    sc_signal< sc_logic > regslice_forward_p_green_U_apdone_blk;
    sc_signal< sc_logic > regslice_forward_p_blue_U_apdone_blk;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<10> > x_fu_113_p2;
    sc_signal< sc_lv<10> > x_reg_187;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<9> > y_0_reg_73;
    sc_signal< sc_lv<10> > x_0_reg_84;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< sc_lv<1> > icmp_ln11_fu_95_p2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_125_p2;
    sc_signal< sc_lv<1> > xor_ln15_fu_131_p2;
    sc_signal< sc_lv<1> > icmp_ln15_fu_119_p2;
    sc_signal< sc_lv<1> > xor_ln15_1_fu_146_p2;
    sc_signal< sc_lv<1> > and_ln15_fu_152_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_lv<8> > p_red_int;
    sc_signal< sc_logic > p_red_ap_vld_int;
    sc_signal< sc_logic > p_red_ap_ack_int;
    sc_signal< sc_logic > regslice_forward_p_red_U_vld_out;
    sc_signal< sc_lv<8> > p_green_int;
    sc_signal< sc_logic > p_green_ap_vld_int;
    sc_signal< sc_logic > p_green_ap_ack_int;
    sc_signal< sc_logic > regslice_forward_p_green_U_vld_out;
    sc_signal< sc_lv<8> > p_blue_int;
    sc_signal< sc_logic > p_blue_ap_vld_int;
    sc_signal< sc_logic > p_blue_ap_ack_int;
    sc_signal< sc_logic > regslice_forward_p_blue_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<9> ap_const_lv9_1E0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<10> ap_const_lv10_280;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_D5;
    static const sc_lv<10> ap_const_lv10_1AA;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln15_fu_152_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state2();
    void thread_ap_block_state3_io();
    void thread_ap_block_state4_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln11_fu_95_p2();
    void thread_icmp_ln12_fu_107_p2();
    void thread_icmp_ln15_fu_119_p2();
    void thread_icmp_ln20_fu_125_p2();
    void thread_p_blue_ap_vld();
    void thread_p_blue_ap_vld_int();
    void thread_p_blue_blk_n();
    void thread_p_blue_int();
    void thread_p_green_ap_vld();
    void thread_p_green_ap_vld_int();
    void thread_p_green_blk_n();
    void thread_p_green_int();
    void thread_p_red_ap_vld();
    void thread_p_red_ap_vld_int();
    void thread_p_red_blk_n();
    void thread_p_red_int();
    void thread_x_fu_113_p2();
    void thread_xor_ln15_1_fu_146_p2();
    void thread_xor_ln15_fu_131_p2();
    void thread_y_fu_101_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
