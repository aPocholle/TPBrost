// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mire.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mire::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mire::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> mire::ap_ST_fsm_state1 = "1";
const sc_lv<4> mire::ap_ST_fsm_state2 = "10";
const sc_lv<4> mire::ap_ST_fsm_state3 = "100";
const sc_lv<4> mire::ap_ST_fsm_state4 = "1000";
const sc_lv<32> mire::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mire::ap_const_lv32_2 = "10";
const sc_lv<1> mire::ap_const_lv1_0 = "0";
const sc_lv<32> mire::ap_const_lv32_3 = "11";
const sc_lv<32> mire::ap_const_lv32_1 = "1";
const bool mire::ap_const_boolean_0 = false;
const sc_lv<9> mire::ap_const_lv9_0 = "000000000";
const sc_lv<1> mire::ap_const_lv1_1 = "1";
const sc_lv<10> mire::ap_const_lv10_0 = "0000000000";
const sc_lv<9> mire::ap_const_lv9_1E0 = "111100000";
const sc_lv<9> mire::ap_const_lv9_1 = "1";
const sc_lv<10> mire::ap_const_lv10_280 = "1010000000";
const sc_lv<10> mire::ap_const_lv10_1 = "1";
const sc_lv<10> mire::ap_const_lv10_D5 = "11010101";
const sc_lv<10> mire::ap_const_lv10_1AA = "110101010";
const sc_lv<8> mire::ap_const_lv8_FF = "11111111";
const sc_lv<8> mire::ap_const_lv8_0 = "00000000";
const bool mire::ap_const_boolean_1 = true;

mire::mire(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_forward_p_red_U = new regslice_forward<8>("regslice_forward_p_red_U");
    regslice_forward_p_red_U->ap_clk(ap_clk);
    regslice_forward_p_red_U->ap_rst(ap_rst);
    regslice_forward_p_red_U->data_in(p_red_int);
    regslice_forward_p_red_U->vld_in(p_red_ap_vld_int);
    regslice_forward_p_red_U->ack_in(p_red_ap_ack_int);
    regslice_forward_p_red_U->data_out(p_red);
    regslice_forward_p_red_U->vld_out(regslice_forward_p_red_U_vld_out);
    regslice_forward_p_red_U->ack_out(p_red_ap_ack);
    regslice_forward_p_red_U->apdone_blk(regslice_forward_p_red_U_apdone_blk);
    regslice_forward_p_green_U = new regslice_forward<8>("regslice_forward_p_green_U");
    regslice_forward_p_green_U->ap_clk(ap_clk);
    regslice_forward_p_green_U->ap_rst(ap_rst);
    regslice_forward_p_green_U->data_in(p_green_int);
    regslice_forward_p_green_U->vld_in(p_green_ap_vld_int);
    regslice_forward_p_green_U->ack_in(p_green_ap_ack_int);
    regslice_forward_p_green_U->data_out(p_green);
    regslice_forward_p_green_U->vld_out(regslice_forward_p_green_U_vld_out);
    regslice_forward_p_green_U->ack_out(p_green_ap_ack);
    regslice_forward_p_green_U->apdone_blk(regslice_forward_p_green_U_apdone_blk);
    regslice_forward_p_blue_U = new regslice_forward<8>("regslice_forward_p_blue_U");
    regslice_forward_p_blue_U->ap_clk(ap_clk);
    regslice_forward_p_blue_U->ap_rst(ap_rst);
    regslice_forward_p_blue_U->data_in(p_blue_int);
    regslice_forward_p_blue_U->vld_in(p_blue_ap_vld_int);
    regslice_forward_p_blue_U->ack_in(p_blue_ap_ack_int);
    regslice_forward_p_blue_U->data_out(p_blue);
    regslice_forward_p_blue_U->vld_out(regslice_forward_p_blue_U_vld_out);
    regslice_forward_p_blue_U->ack_out(p_blue_ap_ack);
    regslice_forward_p_blue_U->apdone_blk(regslice_forward_p_blue_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln15_fu_152_p2);
    sensitive << ( icmp_ln20_fu_125_p2 );
    sensitive << ( xor_ln15_1_fu_146_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( regslice_forward_p_red_U_apdone_blk );
    sensitive << ( regslice_forward_p_green_U_apdone_blk );
    sensitive << ( regslice_forward_p_blue_U_apdone_blk );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( p_red_ap_ack_int );
    sensitive << ( p_green_ap_ack_int );
    sensitive << ( p_blue_ap_ack_int );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( p_red_ap_ack_int );
    sensitive << ( p_green_ap_ack_int );
    sensitive << ( p_blue_ap_ack_int );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_forward_p_red_U_apdone_blk );
    sensitive << ( regslice_forward_p_green_U_apdone_blk );
    sensitive << ( regslice_forward_p_blue_U_apdone_blk );
    sensitive << ( icmp_ln11_fu_95_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_forward_p_red_U_apdone_blk );
    sensitive << ( regslice_forward_p_green_U_apdone_blk );
    sensitive << ( regslice_forward_p_blue_U_apdone_blk );
    sensitive << ( icmp_ln11_fu_95_p2 );

    SC_METHOD(thread_icmp_ln11_fu_95_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_forward_p_red_U_apdone_blk );
    sensitive << ( regslice_forward_p_green_U_apdone_blk );
    sensitive << ( regslice_forward_p_blue_U_apdone_blk );
    sensitive << ( y_0_reg_73 );

    SC_METHOD(thread_icmp_ln12_fu_107_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_0_reg_84 );

    SC_METHOD(thread_icmp_ln15_fu_119_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_0_reg_84 );

    SC_METHOD(thread_icmp_ln20_fu_125_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_0_reg_84 );

    SC_METHOD(thread_p_blue_ap_vld);
    sensitive << ( regslice_forward_p_blue_U_vld_out );

    SC_METHOD(thread_p_blue_ap_vld_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_p_blue_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_blue_ap_ack_int );

    SC_METHOD(thread_p_blue_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( xor_ln15_fu_131_p2 );

    SC_METHOD(thread_p_green_ap_vld);
    sensitive << ( regslice_forward_p_green_U_vld_out );

    SC_METHOD(thread_p_green_ap_vld_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_p_green_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_green_ap_ack_int );

    SC_METHOD(thread_p_green_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( and_ln15_fu_152_p2 );

    SC_METHOD(thread_p_red_ap_vld);
    sensitive << ( regslice_forward_p_red_U_vld_out );

    SC_METHOD(thread_p_red_ap_vld_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_p_red_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_red_ap_ack_int );

    SC_METHOD(thread_p_red_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( icmp_ln15_fu_119_p2 );

    SC_METHOD(thread_x_fu_113_p2);
    sensitive << ( x_0_reg_84 );

    SC_METHOD(thread_xor_ln15_1_fu_146_p2);
    sensitive << ( icmp_ln15_fu_119_p2 );

    SC_METHOD(thread_xor_ln15_fu_131_p2);
    sensitive << ( icmp_ln20_fu_125_p2 );

    SC_METHOD(thread_y_fu_101_p2);
    sensitive << ( y_0_reg_73 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_forward_p_red_U_apdone_blk );
    sensitive << ( regslice_forward_p_green_U_apdone_blk );
    sensitive << ( regslice_forward_p_blue_U_apdone_blk );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( icmp_ln11_fu_95_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mire_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_red, "(port)p_red");
    sc_trace(mVcdFile, p_red_ap_vld, "(port)p_red_ap_vld");
    sc_trace(mVcdFile, p_red_ap_ack, "(port)p_red_ap_ack");
    sc_trace(mVcdFile, p_green, "(port)p_green");
    sc_trace(mVcdFile, p_green_ap_vld, "(port)p_green_ap_vld");
    sc_trace(mVcdFile, p_green_ap_ack, "(port)p_green_ap_ack");
    sc_trace(mVcdFile, p_blue, "(port)p_blue");
    sc_trace(mVcdFile, p_blue_ap_vld, "(port)p_blue_ap_vld");
    sc_trace(mVcdFile, p_blue_ap_ack, "(port)p_blue_ap_ack");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_red_blk_n, "p_red_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln12_fu_107_p2, "icmp_ln12_fu_107_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, p_green_blk_n, "p_green_blk_n");
    sc_trace(mVcdFile, p_blue_blk_n, "p_blue_blk_n");
    sc_trace(mVcdFile, y_fu_101_p2, "y_fu_101_p2");
    sc_trace(mVcdFile, y_reg_179, "y_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, regslice_forward_p_red_U_apdone_blk, "regslice_forward_p_red_U_apdone_blk");
    sc_trace(mVcdFile, regslice_forward_p_green_U_apdone_blk, "regslice_forward_p_green_U_apdone_blk");
    sc_trace(mVcdFile, regslice_forward_p_blue_U_apdone_blk, "regslice_forward_p_blue_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, x_fu_113_p2, "x_fu_113_p2");
    sc_trace(mVcdFile, x_reg_187, "x_reg_187");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, y_0_reg_73, "y_0_reg_73");
    sc_trace(mVcdFile, x_0_reg_84, "x_0_reg_84");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, icmp_ln11_fu_95_p2, "icmp_ln11_fu_95_p2");
    sc_trace(mVcdFile, icmp_ln20_fu_125_p2, "icmp_ln20_fu_125_p2");
    sc_trace(mVcdFile, xor_ln15_fu_131_p2, "xor_ln15_fu_131_p2");
    sc_trace(mVcdFile, icmp_ln15_fu_119_p2, "icmp_ln15_fu_119_p2");
    sc_trace(mVcdFile, xor_ln15_1_fu_146_p2, "xor_ln15_1_fu_146_p2");
    sc_trace(mVcdFile, and_ln15_fu_152_p2, "and_ln15_fu_152_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, p_red_int, "p_red_int");
    sc_trace(mVcdFile, p_red_ap_vld_int, "p_red_ap_vld_int");
    sc_trace(mVcdFile, p_red_ap_ack_int, "p_red_ap_ack_int");
    sc_trace(mVcdFile, regslice_forward_p_red_U_vld_out, "regslice_forward_p_red_U_vld_out");
    sc_trace(mVcdFile, p_green_int, "p_green_int");
    sc_trace(mVcdFile, p_green_ap_vld_int, "p_green_ap_vld_int");
    sc_trace(mVcdFile, p_green_ap_ack_int, "p_green_ap_ack_int");
    sc_trace(mVcdFile, regslice_forward_p_green_U_vld_out, "regslice_forward_p_green_U_vld_out");
    sc_trace(mVcdFile, p_blue_int, "p_blue_int");
    sc_trace(mVcdFile, p_blue_ap_vld_int, "p_blue_ap_vld_int");
    sc_trace(mVcdFile, p_blue_ap_ack_int, "p_blue_ap_ack_int");
    sc_trace(mVcdFile, regslice_forward_p_blue_U_vld_out, "regslice_forward_p_blue_U_vld_out");
#endif

    }
    mHdltvinHandle.open("mire.hdltvin.dat");
    mHdltvoutHandle.open("mire.hdltvout.dat");
}

mire::~mire() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete regslice_forward_p_red_U;
    delete regslice_forward_p_green_U;
    delete regslice_forward_p_blue_U;
}

void mire::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_95_p2.read()))) {
        x_0_reg_84 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_block_state4_io.read(), ap_const_boolean_0))) {
        x_0_reg_84 = x_reg_187.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_1))) {
        y_0_reg_73 = y_reg_179.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y_0_reg_73 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        x_reg_187 = x_fu_113_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())))) {
        y_reg_179 = y_fu_101_p2.read();
    }
}

void mire::thread_and_ln15_fu_152_p2() {
    and_ln15_fu_152_p2 = (icmp_ln20_fu_125_p2.read() & xor_ln15_1_fu_146_p2.read());
}

void mire::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mire::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mire::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mire::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mire::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read()));
}

void mire::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_red_ap_ack_int.read())) || (esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_green_ap_ack_int.read())) || (esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, p_blue_ap_ack_int.read())));
}

void mire::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_logic_0, p_red_ap_ack_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_green_ap_ack_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_blue_ap_ack_int.read()));
}

void mire::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_95_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mire::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mire::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_95_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mire::thread_icmp_ln11_fu_95_p2() {
    icmp_ln11_fu_95_p2 = (!y_0_reg_73.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): sc_lv<1>(y_0_reg_73.read() == ap_const_lv9_1E0);
}

void mire::thread_icmp_ln12_fu_107_p2() {
    icmp_ln12_fu_107_p2 = (!x_0_reg_84.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): sc_lv<1>(x_0_reg_84.read() == ap_const_lv10_280);
}

void mire::thread_icmp_ln15_fu_119_p2() {
    icmp_ln15_fu_119_p2 = (!x_0_reg_84.read().is_01() || !ap_const_lv10_D5.is_01())? sc_lv<1>(): (sc_biguint<10>(x_0_reg_84.read()) < sc_biguint<10>(ap_const_lv10_D5));
}

void mire::thread_icmp_ln20_fu_125_p2() {
    icmp_ln20_fu_125_p2 = (!x_0_reg_84.read().is_01() || !ap_const_lv10_1AA.is_01())? sc_lv<1>(): (sc_biguint<10>(x_0_reg_84.read()) < sc_biguint<10>(ap_const_lv10_1AA));
}

void mire::thread_p_blue_ap_vld() {
    p_blue_ap_vld = regslice_forward_p_blue_U_vld_out.read();
}

void mire::thread_p_blue_ap_vld_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        p_blue_ap_vld_int = ap_const_logic_1;
    } else {
        p_blue_ap_vld_int = ap_const_logic_0;
    }
}

void mire::thread_p_blue_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_blue_blk_n = p_blue_ap_ack_int.read();
    } else {
        p_blue_blk_n = ap_const_logic_1;
    }
}

void mire::thread_p_blue_int() {
    p_blue_int = (!xor_ln15_fu_131_p2.read()[0].is_01())? sc_lv<8>(): ((xor_ln15_fu_131_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void mire::thread_p_green_ap_vld() {
    p_green_ap_vld = regslice_forward_p_green_U_vld_out.read();
}

void mire::thread_p_green_ap_vld_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        p_green_ap_vld_int = ap_const_logic_1;
    } else {
        p_green_ap_vld_int = ap_const_logic_0;
    }
}

void mire::thread_p_green_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_green_blk_n = p_green_ap_ack_int.read();
    } else {
        p_green_blk_n = ap_const_logic_1;
    }
}

void mire::thread_p_green_int() {
    p_green_int = (!and_ln15_fu_152_p2.read()[0].is_01())? sc_lv<8>(): ((and_ln15_fu_152_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void mire::thread_p_red_ap_vld() {
    p_red_ap_vld = regslice_forward_p_red_U_vld_out.read();
}

void mire::thread_p_red_ap_vld_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        p_red_ap_vld_int = ap_const_logic_1;
    } else {
        p_red_ap_vld_int = ap_const_logic_0;
    }
}

void mire::thread_p_red_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        p_red_blk_n = p_red_ap_ack_int.read();
    } else {
        p_red_blk_n = ap_const_logic_1;
    }
}

void mire::thread_p_red_int() {
    p_red_int = (!icmp_ln15_fu_119_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln15_fu_119_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void mire::thread_x_fu_113_p2() {
    x_fu_113_p2 = (!x_0_reg_84.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(x_0_reg_84.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mire::thread_xor_ln15_1_fu_146_p2() {
    xor_ln15_1_fu_146_p2 = (icmp_ln15_fu_119_p2.read() ^ ap_const_lv1_1);
}

void mire::thread_xor_ln15_fu_131_p2() {
    xor_ln15_fu_131_p2 = (icmp_ln20_fu_125_p2.read() ^ ap_const_lv1_1);
}

void mire::thread_y_fu_101_p2() {
    y_fu_101_p2 = (!y_0_reg_73.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(y_0_reg_73.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void mire::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_95_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_red_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_green_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_p_blue_U_apdone_blk.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_95_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_107_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_block_state4_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void mire::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_red\" :  \"" << p_red.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_red_ap_vld\" :  \"" << p_red_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_red_ap_ack\" :  \"" << p_red_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_green\" :  \"" << p_green.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_green_ap_vld\" :  \"" << p_green_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_green_ap_ack\" :  \"" << p_green_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_blue\" :  \"" << p_blue.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_blue_ap_vld\" :  \"" << p_blue_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_blue_ap_ack\" :  \"" << p_blue_ap_ack.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

