-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mire is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_red : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_red_ap_vld : OUT STD_LOGIC;
    p_red_ap_ack : IN STD_LOGIC;
    p_green : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_green_ap_vld : OUT STD_LOGIC;
    p_green_ap_ack : IN STD_LOGIC;
    p_blue : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_blue_ap_vld : OUT STD_LOGIC;
    p_blue_ap_ack : IN STD_LOGIC );
end;


architecture behav of mire is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mire,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.763500,HLS_SYN_LAT=615361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=171,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_D5 : STD_LOGIC_VECTOR (9 downto 0) := "0011010101";
    constant ap_const_lv10_1AA : STD_LOGIC_VECTOR (9 downto 0) := "0110101010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_red_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln12_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_green_blk_n : STD_LOGIC;
    signal p_blue_blk_n : STD_LOGIC;
    signal y_fu_101_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_179 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_forward_p_red_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_p_green_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_p_blue_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal x_fu_113_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal y_0_reg_73 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_reg_84 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal icmp_ln11_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal p_red_int : STD_LOGIC_VECTOR (7 downto 0);
    signal p_red_ap_vld_int : STD_LOGIC;
    signal p_red_ap_ack_int : STD_LOGIC;
    signal regslice_forward_p_red_U_vld_out : STD_LOGIC;
    signal p_green_int : STD_LOGIC_VECTOR (7 downto 0);
    signal p_green_ap_vld_int : STD_LOGIC;
    signal p_green_ap_ack_int : STD_LOGIC;
    signal regslice_forward_p_green_U_vld_out : STD_LOGIC;
    signal p_blue_int : STD_LOGIC_VECTOR (7 downto 0);
    signal p_blue_ap_vld_int : STD_LOGIC;
    signal p_blue_ap_ack_int : STD_LOGIC;
    signal regslice_forward_p_blue_U_vld_out : STD_LOGIC;

    component regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_p_red_U : component regslice_forward
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_red_int,
        vld_in => p_red_ap_vld_int,
        ack_in => p_red_ap_ack_int,
        data_out => p_red,
        vld_out => regslice_forward_p_red_U_vld_out,
        ack_out => p_red_ap_ack,
        apdone_blk => regslice_forward_p_red_U_apdone_blk);

    regslice_forward_p_green_U : component regslice_forward
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_green_int,
        vld_in => p_green_ap_vld_int,
        ack_in => p_green_ap_ack_int,
        data_out => p_green,
        vld_out => regslice_forward_p_green_U_vld_out,
        ack_out => p_green_ap_ack,
        apdone_blk => regslice_forward_p_green_U_apdone_blk);

    regslice_forward_p_blue_U : component regslice_forward
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => p_blue_int,
        vld_in => p_blue_ap_vld_int,
        ack_in => p_blue_ap_ack_int,
        data_out => p_blue,
        vld_out => regslice_forward_p_blue_U_vld_out,
        ack_out => p_blue_ap_ack,
        apdone_blk => regslice_forward_p_blue_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (icmp_ln11_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_84 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
                x_0_reg_84 <= x_reg_187;
            end if; 
        end if;
    end process;

    y_0_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_73 <= y_reg_179;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_73 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                x_reg_187 <= x_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                y_reg_179 <= y_fu_101_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, regslice_forward_p_red_U_apdone_blk, regslice_forward_p_green_U_apdone_blk, regslice_forward_p_blue_U_apdone_blk, ap_block_state3_io, ap_block_state4_io, icmp_ln11_fu_95_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (icmp_ln11_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (icmp_ln11_fu_95_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln15_fu_152_p2 <= (xor_ln15_1_fu_146_p2 and icmp_ln20_fu_125_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(regslice_forward_p_red_U_apdone_blk, regslice_forward_p_green_U_apdone_blk, regslice_forward_p_blue_U_apdone_blk)
    begin
                ap_block_state2 <= ((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln12_fu_107_p2, p_red_ap_ack_int, p_green_ap_ack_int, p_blue_ap_ack_int)
    begin
                ap_block_state3_io <= (((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (p_blue_ap_ack_int = ap_const_logic_0)) or ((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (p_green_ap_ack_int = ap_const_logic_0)) or ((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (p_red_ap_ack_int = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(p_red_ap_ack_int, p_green_ap_ack_int, p_blue_ap_ack_int)
    begin
                ap_block_state4_io <= ((p_blue_ap_ack_int = ap_const_logic_0) or (p_green_ap_ack_int = ap_const_logic_0) or (p_red_ap_ack_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_forward_p_red_U_apdone_blk, regslice_forward_p_green_U_apdone_blk, regslice_forward_p_blue_U_apdone_blk, icmp_ln11_fu_95_p2)
    begin
        if ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (icmp_ln11_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_forward_p_red_U_apdone_blk, regslice_forward_p_green_U_apdone_blk, regslice_forward_p_blue_U_apdone_blk, icmp_ln11_fu_95_p2)
    begin
        if ((not(((regslice_forward_p_blue_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_green_U_apdone_blk = ap_const_logic_1) or (regslice_forward_p_red_U_apdone_blk = ap_const_logic_1))) and (icmp_ln11_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln11_fu_95_p2 <= "1" when (y_0_reg_73 = ap_const_lv9_1E0) else "0";
    icmp_ln12_fu_107_p2 <= "1" when (x_0_reg_84 = ap_const_lv10_280) else "0";
    icmp_ln15_fu_119_p2 <= "1" when (unsigned(x_0_reg_84) < unsigned(ap_const_lv10_D5)) else "0";
    icmp_ln20_fu_125_p2 <= "1" when (unsigned(x_0_reg_84) < unsigned(ap_const_lv10_1AA)) else "0";
    p_blue_ap_vld <= regslice_forward_p_blue_U_vld_out;

    p_blue_ap_vld_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_blue_ap_vld_int <= ap_const_logic_1;
        else 
            p_blue_ap_vld_int <= ap_const_logic_0;
        end if; 
    end process;


    p_blue_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_CS_fsm_state4, p_blue_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            p_blue_blk_n <= p_blue_ap_ack_int;
        else 
            p_blue_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_blue_int <= 
        ap_const_lv8_FF when (xor_ln15_fu_131_p2(0) = '1') else 
        ap_const_lv8_0;
    p_green_ap_vld <= regslice_forward_p_green_U_vld_out;

    p_green_ap_vld_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_green_ap_vld_int <= ap_const_logic_1;
        else 
            p_green_ap_vld_int <= ap_const_logic_0;
        end if; 
    end process;


    p_green_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_CS_fsm_state4, p_green_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            p_green_blk_n <= p_green_ap_ack_int;
        else 
            p_green_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_green_int <= 
        ap_const_lv8_FF when (and_ln15_fu_152_p2(0) = '1') else 
        ap_const_lv8_0;
    p_red_ap_vld <= regslice_forward_p_red_U_vld_out;

    p_red_ap_vld_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_red_ap_vld_int <= ap_const_logic_1;
        else 
            p_red_ap_vld_int <= ap_const_logic_0;
        end if; 
    end process;


    p_red_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_107_p2, ap_CS_fsm_state4, p_red_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln12_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            p_red_blk_n <= p_red_ap_ack_int;
        else 
            p_red_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_red_int <= 
        ap_const_lv8_FF when (icmp_ln15_fu_119_p2(0) = '1') else 
        ap_const_lv8_0;
    x_fu_113_p2 <= std_logic_vector(unsigned(x_0_reg_84) + unsigned(ap_const_lv10_1));
    xor_ln15_1_fu_146_p2 <= (icmp_ln15_fu_119_p2 xor ap_const_lv1_1);
    xor_ln15_fu_131_p2 <= (icmp_ln20_fu_125_p2 xor ap_const_lv1_1);
    y_fu_101_p2 <= std_logic_vector(unsigned(y_0_reg_73) + unsigned(ap_const_lv9_1));
end behav;
