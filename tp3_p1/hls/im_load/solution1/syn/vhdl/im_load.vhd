-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity im_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    video_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    video_TVALID : OUT STD_LOGIC;
    video_TREADY : IN STD_LOGIC;
    video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    mem_V_ce0 : OUT STD_LOGIC;
    mem_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of im_load is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "im_load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.467375,HLS_SYN_LAT=922561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=63,HLS_SYN_LUT=199,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_118_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_220 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_video_data_p_V_U_apdone_blk : STD_LOGIC;
    signal zext_ln42_1_fu_132_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln42_1_reg_225 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln23_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln42_1_fu_136_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln42_1_reg_230 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_238 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln29_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_89 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_101 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_124_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln29_fu_160_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_178_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_fu_144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_1_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_2_fu_203_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln42_fu_207_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal video_TVALID_int : STD_LOGIC;
    signal video_TREADY_int : STD_LOGIC;
    signal regslice_both_video_data_p_V_U_vld_out : STD_LOGIC;
    signal regslice_both_video_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_video_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_video_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_video_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_video_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_video_last_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_video_data_p_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mem_V_q0,
        vld_in => video_TVALID_int,
        ack_in => video_TREADY_int,
        data_out => video_TDATA,
        vld_out => regslice_both_video_data_p_V_U_vld_out,
        ack_out => video_TREADY,
        apdone_blk => regslice_both_video_data_p_V_U_apdone_blk);

    regslice_both_video_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln29_reg_243,
        vld_in => video_TVALID_int,
        ack_in => regslice_both_video_user_V_U_ack_in_dummy,
        data_out => video_TUSER,
        vld_out => regslice_both_video_user_V_U_vld_out,
        ack_out => video_TREADY,
        apdone_blk => regslice_both_video_user_V_U_apdone_blk);

    regslice_both_video_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln34_reg_248,
        vld_in => video_TVALID_int,
        ack_in => regslice_both_video_last_V_U_ack_in_dummy,
        data_out => video_TLAST,
        vld_out => regslice_both_video_last_V_U_vld_out,
        ack_out => video_TREADY,
        apdone_blk => regslice_both_video_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_89 <= i_reg_220;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_89 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_112_p2 = ap_const_lv1_0) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_101 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (video_TREADY_int = ap_const_logic_1))) then 
                j_0_reg_101 <= j_reg_238;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_220 <= i_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln29_reg_243 <= icmp_ln29_fu_186_p2;
                icmp_ln34_reg_248 <= icmp_ln34_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_238 <= j_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_112_p2 = ap_const_lv1_0) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln42_1_reg_230(15 downto 7) <= shl_ln42_1_fu_136_p3(15 downto 7);
                    zext_ln42_1_reg_225(17 downto 9) <= zext_ln42_1_fu_132_p1(17 downto 9);
            end if;
        end if;
    end process;
    zext_ln42_1_reg_225(8 downto 0) <= "000000000";
    zext_ln42_1_reg_225(18) <= '0';
    shl_ln42_1_reg_230(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2, regslice_both_video_data_p_V_U_apdone_blk, icmp_ln23_fu_112_p2, ap_CS_fsm_state3, icmp_ln25_fu_148_p2, video_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln23_fu_112_p2 = ap_const_lv1_1) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln23_fu_112_p2 = ap_const_lv1_0) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (video_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (video_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln42_1_fu_198_p2 <= std_logic_vector(unsigned(zext_ln25_fu_144_p1) + unsigned(shl_ln42_1_reg_230));
    add_ln42_fu_207_p2 <= std_logic_vector(unsigned(zext_ln42_1_reg_225) + unsigned(zext_ln42_2_fu_203_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_both_video_data_p_V_U_apdone_blk, icmp_ln23_fu_112_p2)
    begin
        if (((icmp_ln23_fu_112_p2 = ap_const_lv1_1) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_video_data_p_V_U_apdone_blk, icmp_ln23_fu_112_p2)
    begin
        if (((icmp_ln23_fu_112_p2 = ap_const_lv1_1) and (regslice_both_video_data_p_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_118_p2 <= std_logic_vector(unsigned(i_0_reg_89) + unsigned(ap_const_lv9_1));
    icmp_ln23_fu_112_p2 <= "1" when (i_0_reg_89 = ap_const_lv9_1E0) else "0";
    icmp_ln25_fu_148_p2 <= "1" when (j_0_reg_101 = ap_const_lv10_280) else "0";
    icmp_ln29_fu_186_p2 <= "1" when (or_ln_fu_178_p3 = ap_const_lv10_0) else "0";
    icmp_ln34_fu_192_p2 <= "1" when (j_0_reg_101 = ap_const_lv10_27F) else "0";
    j_fu_154_p2 <= std_logic_vector(unsigned(j_0_reg_101) + unsigned(ap_const_lv10_1));
    mem_V_address0 <= zext_ln42_fu_212_p1(19 - 1 downto 0);

    mem_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_V_ce0 <= ap_const_logic_1;
        else 
            mem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln29_fu_164_p2 <= (trunc_ln29_fu_160_p1 or i_0_reg_89);
    or_ln_fu_178_p3 <= (tmp_fu_170_p3 & or_ln29_fu_164_p2);
    shl_ln42_1_fu_136_p3 <= (i_0_reg_89 & ap_const_lv7_0);
    shl_ln_fu_124_p3 <= (i_0_reg_89 & ap_const_lv9_0);
    tmp_fu_170_p3 <= j_0_reg_101(9 downto 9);
    trunc_ln29_fu_160_p1 <= j_0_reg_101(9 - 1 downto 0);

    video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, video_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            video_TDATA_blk_n <= video_TREADY_int;
        else 
            video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    video_TVALID <= regslice_both_video_data_p_V_U_vld_out;

    video_TVALID_int_assign_proc : process(ap_CS_fsm_state4, video_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (video_TREADY_int = ap_const_logic_1))) then 
            video_TVALID_int <= ap_const_logic_1;
        else 
            video_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_101),16));
    zext_ln42_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_124_p3),19));
    zext_ln42_2_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_198_p2),19));
    zext_ln42_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_207_p2),64));
end behav;
